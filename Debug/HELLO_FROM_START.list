
HELLO_FROM_START.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015dc  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a358  0800a358  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a360  0800a360  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a360  0800a360  0001a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006768  20000080  0800a3e8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067e8  0800a3e8  000267e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d491  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca6  00000000  00000000  0003d541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000411e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00042730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aea  00000000  00000000  00043af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cc1  00000000  00000000  0006a5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e596b  00000000  00000000  0008229b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  00167c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d64 	.word	0x08008d64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008d64 	.word	0x08008d64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000009c 	.word	0x2000009c
 80005e8:	200000f8 	.word	0x200000f8

080005ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <__io_putchar+0x20>)
 80005fe:	f001 fe7a 	bl	80022f6 <HAL_UART_Transmit>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20004dac 	.word	0x20004dac

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fbb9 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f859 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8ef 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8c3 	bl	80007ac <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SEM_PRINT_ID = osSemaphoreCreate(osSemaphore(SEM_PRINT),1);
 8000626:	2101      	movs	r1, #1
 8000628:	4821      	ldr	r0, [pc, #132]	; (80006b0 <main+0xa0>)
 800062a:	f002 fb74 	bl	8002d16 <osSemaphoreCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <main+0xa4>)
 8000632:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  vTraceEnable(TRC_START);
 8000634:	2001      	movs	r0, #1
 8000636:	f005 fdbf 	bl	80061b8 <vTraceEnable>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1_Normal */
  osThreadStaticDef(Task1_Normal, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0xa8>)
 800063c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1_NormalHandle = osThreadCreate(osThread(Task1_Normal), NULL);
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fafe 	bl	8002c56 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <main+0xac>)
 800065e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2_Normal */
  osThreadStaticDef(Task2_Normal, StartTask02, osPriorityNormal, 0, 256, Task2_NormalBuffer, &Task2_NormalControlBlock);
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <main+0xb0>)
 8000662:	f107 0420 	add.w	r4, r7, #32
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2_NormalHandle = osThreadCreate(osThread(Task2_Normal), NULL);
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 faeb 	bl	8002c56 <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <main+0xb4>)
 8000684:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3_High */
  osThreadStaticDef(Task3_High, StartTask03, osPriorityHigh, 0, 256, Task3_HighBuffer, &Task3_HighControlBlock);
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <main+0xb8>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3_HighHandle = osThreadCreate(osThread(Task3_High), NULL);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fada 	bl	8002c56 <osThreadCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <main+0xbc>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f002 face 	bl	8002c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x9c>
 80006ae:	bf00      	nop
 80006b0:	0800a2a0 	.word	0x0800a2a0
 80006b4:	2000408c 	.word	0x2000408c
 80006b8:	08008da8 	.word	0x08008da8
 80006bc:	20004dec 	.word	0x20004dec
 80006c0:	08008dc4 	.word	0x08008dc4
 80006c4:	20004090 	.word	0x20004090
 80006c8:	08008de0 	.word	0x08008de0
 80006cc:	20004cf0 	.word	0x20004cf0

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 fb5a 	bl	8007d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xd4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <SystemClock_Config+0xd4>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xd4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemClock_Config+0xd8>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f8e4 	bl	800192c <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800076a:	f000 f935 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fdd0 	bl	8001330 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000796:	f000 f91f 	bl	80009d8 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fd3a 	bl	800225c <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f8f3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20004dac 	.word	0x20004dac
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_GPIO_Init+0xd0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_GPIO_Init+0xd4>)
 800088c:	f000 fd36 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_GPIO_Init+0xd8>)
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_GPIO_Init+0xdc>)
 80008a6:	f000 fb95 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008aa:	2320      	movs	r3, #32
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xd4>)
 80008c2:	f000 fb87 	bl	8000fd4 <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	10210000 	.word	0x10210000
 80008dc:	40020800 	.word	0x40020800

080008e0 <vApplicationStackOverflowHook>:

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  printf("This task oveflowed : %s\r\n", (char*)pcTaskName);
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <vApplicationStackOverflowHook+0x1c>)
 80008ee:	f007 fa5b 	bl	8007da8 <iprintf>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	08008dfc 	.word	0x08008dfc

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//traceString myString = xTraceRegisterString("UART2");

  /* Infinite loop */
	traceString myTrace = xTraceRegisterString("Task start");
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <StartDefaultTask+0x38>)
 800090a:	f005 feb9 	bl	8006680 <xTraceRegisterString>
 800090e:	4603      	mov	r3, r0
 8000910:	81fb      	strh	r3, [r7, #14]

	//uint32_t u32startTime = 0, u32stopTime = 0;
	for(;;)
	{
		osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <StartDefaultTask+0x3c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f04f 31ff 	mov.w	r1, #4294967295
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fa2e 	bl	8002d7c <osSemaphoreWait>
		printf("Task1 Normal RUNNING\r\n");
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <StartDefaultTask+0x40>)
 8000922:	f007 fac7 	bl	8007eb4 <puts>
		osSemaphoreRelease(SEM_PRINT_ID);
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <StartDefaultTask+0x3c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fa74 	bl	8002e18 <osSemaphoreRelease>
	    osDelay(20);
 8000930:	2014      	movs	r0, #20
 8000932:	f002 f9dc 	bl	8002cee <osDelay>
		osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 8000936:	e7ec      	b.n	8000912 <StartDefaultTask+0x12>
 8000938:	08008e30 	.word	0x08008e30
 800093c:	2000408c 	.word	0x2000408c
 8000940:	08008e3c 	.word	0x08008e3c

08000944 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <StartTask02+0x30>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fa11 	bl	8002d7c <osSemaphoreWait>
	printf("Task2 Normal RUNNING\r\n");
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <StartTask02+0x34>)
 800095c:	f007 faaa 	bl	8007eb4 <puts>
	osSemaphoreRelease(SEM_PRINT_ID);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <StartTask02+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa57 	bl	8002e18 <osSemaphoreRelease>
    osDelay(20);
 800096a:	2014      	movs	r0, #20
 800096c:	f002 f9bf 	bl	8002cee <osDelay>
	osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 8000970:	e7ec      	b.n	800094c <StartTask02+0x8>
 8000972:	bf00      	nop
 8000974:	2000408c 	.word	0x2000408c
 8000978:	08008e54 	.word	0x08008e54

0800097c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <StartTask03+0x30>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f9f5 	bl	8002d7c <osSemaphoreWait>
	printf("Task3 High RUNNING\r\n");
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <StartTask03+0x34>)
 8000994:	f007 fa8e 	bl	8007eb4 <puts>
	osSemaphoreRelease(SEM_PRINT_ID);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <StartTask03+0x30>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f002 fa3b 	bl	8002e18 <osSemaphoreRelease>
	osDelay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f002 f9a3 	bl	8002cee <osDelay>
	osSemaphoreWait(SEM_PRINT_ID,osWaitForever);
 80009a8:	e7ec      	b.n	8000984 <StartTask03+0x8>
 80009aa:	bf00      	nop
 80009ac:	2000408c 	.word	0x2000408c
 80009b0:	08008e6c 	.word	0x08008e6c

080009b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c6:	f000 fa03 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40001000 	.word	0x40001000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000aae:	f000 fa91 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2036      	movs	r0, #54	; 0x36
 8000ade:	f000 fa4f 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae2:	2036      	movs	r0, #54	; 0x36
 8000ae4:	f000 fa68 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_InitTick+0xa4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <HAL_InitTick+0xa4>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0xa4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b04:	f107 0210 	add.w	r2, r7, #16
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fd28 	bl	8001564 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b14:	f000 fcfe 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <HAL_InitTick+0xa8>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	0c9b      	lsrs	r3, r3, #18
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_InitTick+0xac>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_InitTick+0xb0>)
 8000b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_InitTick+0xac>)
 8000b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_InitTick+0xac>)
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_InitTick+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_InitTick+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <HAL_InitTick+0xac>)
 8000b4e:	f001 f947 	bl	8001de0 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_InitTick+0xac>)
 8000b5a:	f001 f976 	bl	8001e4a <HAL_TIM_Base_Start_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	20004df0 	.word	0x20004df0
 8000b78:	40001000 	.word	0x40001000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM6_DAC_IRQHandler+0x10>)
 8000bb6:	f001 f96c 	bl	8001e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20004df0 	.word	0x20004df0

08000bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
	}

return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e009      	b.n	8000c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fce7 	bl	80005ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf1      	blt.n	8000c10 <_write+0x12>
	}
	return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_close>:

int _close(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_isatty>:

int _isatty(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f007 f82a 	bl	8007d28 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200002f8 	.word	0x200002f8
 8000d08:	200067e8 	.word	0x200067e8

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SystemInit+0x28>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <SystemInit+0x28>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SystemInit+0x28>)
 8000d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d26:	609a      	str	r2, [r3, #8]
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
  ldr  r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd3 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f006 ffe5 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc51 	bl	8000610 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d74:	0800a368 	.word	0x0800a368
  ldr  r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d7c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000d80:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000d84:	200067e8 	.word	0x200067e8

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8d8 	bl	8000f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fe84 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe12 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20004e30 	.word	0x20004e30

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20004e30 	.word	0x20004e30

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff4c 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f92:	f7ff ff61 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f7ff ffb1 	bl	8000f04 <NVIC_EncodePriority>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff54 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e165      	b.n	80012bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8154 	bne.w	80012b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d00b      	beq.n	800102e <HAL_GPIO_Init+0x5a>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001022:	2b11      	cmp	r3, #17
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0xfc>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80ae 	beq.w	80012b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_GPIO_Init+0x300>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x300>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_GPIO_Init+0x300>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x308>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x21a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x30c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x216>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x310>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x212>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x20e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x20a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x206>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x202>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001232:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_GPIO_Init+0x324>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae96 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0cc      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d90c      	bls.n	800136c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800138e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d044      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d119      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e067      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fcea 	bl	8000df8 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff fce6 	bl	8000df8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e04f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d20c      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f887 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	490a      	ldr	r1, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff faf6 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	0800a2a8 	.word	0x0800a2a8
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_RCC_GetHCLKFreq+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001518:	f7ff fff0 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	0800a2b8 	.word	0x0800a2b8

0800153c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001540:	f7ff ffdc 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	0800a2b8 	.word	0x0800a2b8

08001564 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_RCC_GetClockConfig+0x60>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 020f 	and.w	r2, r3, #15
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b088      	sub	sp, #32
 80015ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e4:	4bce      	ldr	r3, [pc, #824]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	f200 818d 	bhi.w	800190c <HAL_RCC_GetSysClockFreq+0x344>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_RCC_GetSysClockFreq+0x30>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	0800162d 	.word	0x0800162d
 80015fc:	0800190d 	.word	0x0800190d
 8001600:	0800190d 	.word	0x0800190d
 8001604:	0800190d 	.word	0x0800190d
 8001608:	08001633 	.word	0x08001633
 800160c:	0800190d 	.word	0x0800190d
 8001610:	0800190d 	.word	0x0800190d
 8001614:	0800190d 	.word	0x0800190d
 8001618:	08001639 	.word	0x08001639
 800161c:	0800190d 	.word	0x0800190d
 8001620:	0800190d 	.word	0x0800190d
 8001624:	0800190d 	.word	0x0800190d
 8001628:	080017ad 	.word	0x080017ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4bbd      	ldr	r3, [pc, #756]	; (8001924 <HAL_RCC_GetSysClockFreq+0x35c>)
 800162e:	61bb      	str	r3, [r7, #24]
       break;
 8001630:	e16f      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001632:	4bbd      	ldr	r3, [pc, #756]	; (8001928 <HAL_RCC_GetSysClockFreq+0x360>)
 8001634:	61bb      	str	r3, [r7, #24]
      break;
 8001636:	e16c      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4bb9      	ldr	r3, [pc, #740]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001642:	4bb7      	ldr	r3, [pc, #732]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d053      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4bb4      	ldr	r3, [pc, #720]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	ea02 0400 	and.w	r4, r2, r0
 8001666:	603c      	str	r4, [r7, #0]
 8001668:	400b      	ands	r3, r1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001670:	4620      	mov	r0, r4
 8001672:	4629      	mov	r1, r5
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	014b      	lsls	r3, r1, #5
 800167e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001682:	0142      	lsls	r2, r0, #5
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	4623      	mov	r3, r4
 800168a:	1ac0      	subs	r0, r0, r3
 800168c:	462b      	mov	r3, r5
 800168e:	eb61 0103 	sbc.w	r1, r1, r3
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	018b      	lsls	r3, r1, #6
 800169c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016a0:	0182      	lsls	r2, r0, #6
 80016a2:	1a12      	subs	r2, r2, r0
 80016a4:	eb63 0301 	sbc.w	r3, r3, r1
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	00d9      	lsls	r1, r3, #3
 80016b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016b6:	00d0      	lsls	r0, r2, #3
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4621      	mov	r1, r4
 80016be:	1852      	adds	r2, r2, r1
 80016c0:	4629      	mov	r1, r5
 80016c2:	eb43 0101 	adc.w	r1, r3, r1
 80016c6:	460b      	mov	r3, r1
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	0259      	lsls	r1, r3, #9
 80016d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016d6:	0250      	lsls	r0, r2, #9
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	f7fe fde2 	bl	80002b0 <__aeabi_uldivmod>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4613      	mov	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	e04c      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f6:	4b8a      	ldr	r3, [pc, #552]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	461a      	mov	r2, r3
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	ea02 0a00 	and.w	sl, r2, r0
 800170e:	ea03 0b01 	and.w	fp, r3, r1
 8001712:	4650      	mov	r0, sl
 8001714:	4659      	mov	r1, fp
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	014b      	lsls	r3, r1, #5
 8001720:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001724:	0142      	lsls	r2, r0, #5
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	ebb0 000a 	subs.w	r0, r0, sl
 800172e:	eb61 010b 	sbc.w	r1, r1, fp
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	018b      	lsls	r3, r1, #6
 800173c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001740:	0182      	lsls	r2, r0, #6
 8001742:	1a12      	subs	r2, r2, r0
 8001744:	eb63 0301 	sbc.w	r3, r3, r1
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	00d9      	lsls	r1, r3, #3
 8001752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001756:	00d0      	lsls	r0, r2, #3
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	eb12 020a 	adds.w	r2, r2, sl
 8001760:	eb43 030b 	adc.w	r3, r3, fp
 8001764:	f04f 0000 	mov.w	r0, #0
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	0299      	lsls	r1, r3, #10
 800176e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001772:	0290      	lsls	r0, r2, #10
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	461a      	mov	r2, r3
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f7fe fd94 	bl	80002b0 <__aeabi_uldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4613      	mov	r3, r2
 800178e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001790:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	3301      	adds	r3, #1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	61bb      	str	r3, [r7, #24]
      break;
 80017aa:	e0b2      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ac:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d04d      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	ea02 0800 	and.w	r8, r2, r0
 80017da:	ea03 0901 	and.w	r9, r3, r1
 80017de:	4640      	mov	r0, r8
 80017e0:	4649      	mov	r1, r9
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	014b      	lsls	r3, r1, #5
 80017ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f0:	0142      	lsls	r2, r0, #5
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	ebb0 0008 	subs.w	r0, r0, r8
 80017fa:	eb61 0109 	sbc.w	r1, r1, r9
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800180c:	0182      	lsls	r2, r0, #6
 800180e:	1a12      	subs	r2, r2, r0
 8001810:	eb63 0301 	sbc.w	r3, r3, r1
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	00d9      	lsls	r1, r3, #3
 800181e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001822:	00d0      	lsls	r0, r2, #3
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	eb12 0208 	adds.w	r2, r2, r8
 800182c:	eb43 0309 	adc.w	r3, r3, r9
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0259      	lsls	r1, r3, #9
 800183a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800183e:	0250      	lsls	r0, r2, #9
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	461a      	mov	r2, r3
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	f7fe fd2e 	bl	80002b0 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	e04a      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	461a      	mov	r2, r3
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	ea02 0400 	and.w	r4, r2, r0
 8001876:	ea03 0501 	and.w	r5, r3, r1
 800187a:	4620      	mov	r0, r4
 800187c:	4629      	mov	r1, r5
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	014b      	lsls	r3, r1, #5
 8001888:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800188c:	0142      	lsls	r2, r0, #5
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	1b00      	subs	r0, r0, r4
 8001894:	eb61 0105 	sbc.w	r1, r1, r5
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	018b      	lsls	r3, r1, #6
 80018a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018a6:	0182      	lsls	r2, r0, #6
 80018a8:	1a12      	subs	r2, r2, r0
 80018aa:	eb63 0301 	sbc.w	r3, r3, r1
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	00d9      	lsls	r1, r3, #3
 80018b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018bc:	00d0      	lsls	r0, r2, #3
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	1912      	adds	r2, r2, r4
 80018c4:	eb45 0303 	adc.w	r3, r5, r3
 80018c8:	f04f 0000 	mov.w	r0, #0
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	0299      	lsls	r1, r3, #10
 80018d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018d6:	0290      	lsls	r0, r2, #10
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f7fe fce2 	bl	80002b0 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0f1b      	lsrs	r3, r3, #28
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	61bb      	str	r3, [r7, #24]
      break;
 800190a:	e002      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetSysClockFreq+0x35c>)
 800190e:	61bb      	str	r3, [r7, #24]
      break;
 8001910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001912:	69bb      	ldr	r3, [r7, #24]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8083 	beq.w	8001a4c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d019      	beq.n	8001986 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001952:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800195a:	2b08      	cmp	r3, #8
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800195e:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800196a:	d00c      	beq.n	8001986 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d112      	bne.n	800199e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001978:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001984:	d10b      	bne.n	800199e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x11e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d157      	bne.n	8001a4a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e216      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x8a>
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7b      	ldr	r2, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e01d      	b.n	80019f2 <HAL_RCC_OscConfig+0xc6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0xae>
 80019c0:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a72      	ldr	r2, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0xc6>
 80019da:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f9fd 	bl	8000df8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a02:	f7ff f9f9 	bl	8000df8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1db      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a14:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0xd6>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f9e9 	bl	8000df8 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f9e5 	bl	8000df8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1c7      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0xfe>
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d06f      	beq.n	8001b38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d017      	beq.n	8001a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a64:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a70:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d11c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x180>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e18f      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4938      	ldr	r1, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac0:	e03a      	b.n	8001b38 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d020      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f992 	bl	8000df8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f98e 	bl	8000df8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e170      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4925      	ldr	r1, [pc, #148]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
 8001b0a:	e015      	b.n	8001b38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x274>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f971 	bl	8000df8 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f96d 	bl	8000df8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e14f      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d037      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d016      	beq.n	8001b7a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_RCC_OscConfig+0x278>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f951 	bl	8000df8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f94d 	bl	8000df8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e12f      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x22e>
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x278>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f93a 	bl	8000df8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f936 	bl	8000df8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d908      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e118      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470000 	.word	0x42470000
 8001ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e9      	bne.n	8001b88 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8097 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a7e      	ldr	r2, [pc, #504]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b79      	ldr	r3, [pc, #484]	; (8001dd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a75      	ldr	r2, [pc, #468]	; (8001dd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f8f5 	bl	8000df8 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff f8f1 	bl	8000df8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0d3      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x31a>
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x354>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x33c>
 8001c4e:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a5d      	ldr	r2, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x354>
 8001c68:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001c7a:	f023 0304 	bic.w	r3, r3, #4
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff f8b6 	bl	8000df8 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff f8b2 	bl	8000df8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e092      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ee      	beq.n	8001c90 <HAL_RCC_OscConfig+0x364>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f8a0 	bl	8000df8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f89c 	bl	8000df8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e07c      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ee      	bne.n	8001cbc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d068      	beq.n	8001dca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d060      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d145      	bne.n	8001d98 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_OscConfig+0x4b0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f871 	bl	8000df8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f86d 	bl	8000df8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e04f      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	019b      	lsls	r3, r3, #6
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	071b      	lsls	r3, r3, #28
 8001d64:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f842 	bl	8000df8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff f83e 	bl	8000df8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e020      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x44c>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x4b0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f82b 	bl	8000df8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff f827 	bl	8000df8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e009      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x4a8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x47a>
 8001dc4:	e001      	b.n	8001dca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42470060 	.word	0x42470060

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01d      	b.n	8001e2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f815 	bl	8001e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 f968 	bl	80020f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d007      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d122      	bne.n	8001eee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d11b      	bne.n	8001eee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0202 	mvn.w	r2, #2
 8001ebe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8ee 	bl	80020b6 <HAL_TIM_IC_CaptureCallback>
 8001eda:	e005      	b.n	8001ee8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8e0 	bl	80020a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8f1 	bl	80020ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d122      	bne.n	8001f42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d11b      	bne.n	8001f42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0204 	mvn.w	r2, #4
 8001f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8c4 	bl	80020b6 <HAL_TIM_IC_CaptureCallback>
 8001f2e:	e005      	b.n	8001f3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8b6 	bl	80020a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8c7 	bl	80020ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d122      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11b      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0208 	mvn.w	r2, #8
 8001f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f89a 	bl	80020b6 <HAL_TIM_IC_CaptureCallback>
 8001f82:	e005      	b.n	8001f90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f88c 	bl	80020a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f89d 	bl	80020ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d122      	bne.n	8001fea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d11b      	bne.n	8001fea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0210 	mvn.w	r2, #16
 8001fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f870 	bl	80020b6 <HAL_TIM_IC_CaptureCallback>
 8001fd6:	e005      	b.n	8001fe4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f862 	bl	80020a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f873 	bl	80020ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0201 	mvn.w	r2, #1
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe fccf 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d10e      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b80      	cmp	r3, #128	; 0x80
 8002030:	d107      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f903 	bl	8002248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d10e      	bne.n	800206e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d107      	bne.n	800206e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f838 	bl	80020de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d10e      	bne.n	800209a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d107      	bne.n	800209a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0220 	mvn.w	r2, #32
 8002092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8cd 	bl	8002234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a40      	ldr	r2, [pc, #256]	; (8002208 <TIM_Base_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d00f      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <TIM_Base_SetConfig+0x118>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00b      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <TIM_Base_SetConfig+0x120>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <TIM_Base_SetConfig+0x114>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d027      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <TIM_Base_SetConfig+0x118>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d023      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <TIM_Base_SetConfig+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <TIM_Base_SetConfig+0x120>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <TIM_Base_SetConfig+0x124>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d017      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a28      	ldr	r2, [pc, #160]	; (800221c <TIM_Base_SetConfig+0x128>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <TIM_Base_SetConfig+0x12c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <TIM_Base_SetConfig+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <TIM_Base_SetConfig+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <TIM_Base_SetConfig+0x138>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <TIM_Base_SetConfig+0x13c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <TIM_Base_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0xf8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400
 8002224:	40014800 	.word	0x40014800
 8002228:	40001800 	.word	0x40001800
 800222c:	40001c00 	.word	0x40001c00
 8002230:	40002000 	.word	0x40002000

08002234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e03f      	b.n	80022ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fbd8 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f90b 	bl	80024bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b088      	sub	sp, #32
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 8083 	bne.w	800241e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Transmit+0x2e>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e07b      	b.n	8002420 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_UART_Transmit+0x40>
 8002332:	2302      	movs	r3, #2
 8002334:	e074      	b.n	8002420 <HAL_UART_Transmit+0x12a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800234c:	f7fe fd54 	bl	8000df8 <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002366:	e042      	b.n	80023ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d122      	bne.n	80023c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f84c 	bl	8002428 <UART_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e042      	b.n	8002420 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3302      	adds	r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	e017      	b.n	80023ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	e013      	b.n	80023ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f829 	bl	8002428 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e01f      	b.n	8002420 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1b7      	bne.n	8002368 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f810 	bl	8002428 <UART_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e006      	b.n	8002420 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002438:	e02c      	b.n	8002494 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d028      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <UART_WaitOnFlagUntilTimeout+0x30>
 8002448:	f7fe fcd6 	bl	8000df8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	429a      	cmp	r2, r3
 8002456:	d21d      	bcs.n	8002494 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002466:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e00f      	b.n	80024b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d0c3      	beq.n	800243a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	b0bd      	sub	sp, #244	; 0xf4
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	ea40 0301 	orr.w	r3, r0, r1
 80024e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002514:	f021 010c 	bic.w	r1, r1, #12
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002522:	430b      	orrs	r3, r1
 8002524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	6999      	ldr	r1, [r3, #24]
 8002538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	ea40 0301 	orr.w	r3, r0, r1
 8002542:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	f040 81a5 	bne.w	800289c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4bcd      	ldr	r3, [pc, #820]	; (8002890 <UART_SetConfig+0x3d4>)
 800255a:	429a      	cmp	r2, r3
 800255c:	d006      	beq.n	800256c <UART_SetConfig+0xb0>
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4bcb      	ldr	r3, [pc, #812]	; (8002894 <UART_SetConfig+0x3d8>)
 8002566:	429a      	cmp	r2, r3
 8002568:	f040 80cb 	bne.w	8002702 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800256c:	f7fe ffe6 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 8002570:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002578:	461c      	mov	r4, r3
 800257a:	f04f 0500 	mov.w	r5, #0
 800257e:	4622      	mov	r2, r4
 8002580:	462b      	mov	r3, r5
 8002582:	1891      	adds	r1, r2, r2
 8002584:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002588:	415b      	adcs	r3, r3
 800258a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800258e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002592:	1912      	adds	r2, r2, r4
 8002594:	eb45 0303 	adc.w	r3, r5, r3
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	00d9      	lsls	r1, r3, #3
 80025a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a6:	00d0      	lsls	r0, r2, #3
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	1911      	adds	r1, r2, r4
 80025ae:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80025b2:	416b      	adcs	r3, r5
 80025b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80025b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80025ca:	415b      	adcs	r3, r3
 80025cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80025d4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80025d8:	f7fd fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4bad      	ldr	r3, [pc, #692]	; (8002898 <UART_SetConfig+0x3dc>)
 80025e2:	fba3 2302 	umull	r2, r3, r3, r2
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	011e      	lsls	r6, r3, #4
 80025ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025ee:	461c      	mov	r4, r3
 80025f0:	f04f 0500 	mov.w	r5, #0
 80025f4:	4622      	mov	r2, r4
 80025f6:	462b      	mov	r3, r5
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80025fc:	415b      	adcs	r3, r3
 80025fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002600:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002604:	1912      	adds	r2, r2, r4
 8002606:	eb45 0303 	adc.w	r3, r5, r3
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	00d9      	lsls	r1, r3, #3
 8002614:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002618:	00d0      	lsls	r0, r2, #3
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	1911      	adds	r1, r2, r4
 8002620:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002624:	416b      	adcs	r3, r5
 8002626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800262a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	461a      	mov	r2, r3
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	1891      	adds	r1, r2, r2
 8002638:	6739      	str	r1, [r7, #112]	; 0x70
 800263a:	415b      	adcs	r3, r3
 800263c:	677b      	str	r3, [r7, #116]	; 0x74
 800263e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002642:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002646:	f7fd fe33 	bl	80002b0 <__aeabi_uldivmod>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <UART_SetConfig+0x3dc>)
 8002650:	fba3 1302 	umull	r1, r3, r3, r2
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	2164      	movs	r1, #100	; 0x64
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	3332      	adds	r3, #50	; 0x32
 8002662:	4a8d      	ldr	r2, [pc, #564]	; (8002898 <UART_SetConfig+0x3dc>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002670:	441e      	add	r6, r3
 8002672:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002676:	4618      	mov	r0, r3
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	1894      	adds	r4, r2, r2
 8002682:	66bc      	str	r4, [r7, #104]	; 0x68
 8002684:	415b      	adcs	r3, r3
 8002686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002688:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800268c:	1812      	adds	r2, r2, r0
 800268e:	eb41 0303 	adc.w	r3, r1, r3
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	f04f 0500 	mov.w	r5, #0
 800269a:	00dd      	lsls	r5, r3, #3
 800269c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026a0:	00d4      	lsls	r4, r2, #3
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	1814      	adds	r4, r2, r0
 80026a8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80026ac:	414b      	adcs	r3, r1
 80026ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	1891      	adds	r1, r2, r2
 80026c0:	6639      	str	r1, [r7, #96]	; 0x60
 80026c2:	415b      	adcs	r3, r3
 80026c4:	667b      	str	r3, [r7, #100]	; 0x64
 80026c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026ce:	f7fd fdef 	bl	80002b0 <__aeabi_uldivmod>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <UART_SetConfig+0x3dc>)
 80026d8:	fba3 1302 	umull	r1, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	2164      	movs	r1, #100	; 0x64
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	3332      	adds	r3, #50	; 0x32
 80026ea:	4a6b      	ldr	r2, [pc, #428]	; (8002898 <UART_SetConfig+0x3dc>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	f003 0207 	and.w	r2, r3, #7
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4432      	add	r2, r6
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	e26d      	b.n	8002bde <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002702:	f7fe ff07 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8002706:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800270e:	461c      	mov	r4, r3
 8002710:	f04f 0500 	mov.w	r5, #0
 8002714:	4622      	mov	r2, r4
 8002716:	462b      	mov	r3, r5
 8002718:	1891      	adds	r1, r2, r2
 800271a:	65b9      	str	r1, [r7, #88]	; 0x58
 800271c:	415b      	adcs	r3, r3
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002724:	1912      	adds	r2, r2, r4
 8002726:	eb45 0303 	adc.w	r3, r5, r3
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	00d9      	lsls	r1, r3, #3
 8002734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002738:	00d0      	lsls	r0, r2, #3
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	1911      	adds	r1, r2, r4
 8002740:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002744:	416b      	adcs	r3, r5
 8002746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	461a      	mov	r2, r3
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	1891      	adds	r1, r2, r2
 8002758:	6539      	str	r1, [r7, #80]	; 0x50
 800275a:	415b      	adcs	r3, r3
 800275c:	657b      	str	r3, [r7, #84]	; 0x54
 800275e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002762:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002766:	f7fd fda3 	bl	80002b0 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <UART_SetConfig+0x3dc>)
 8002770:	fba3 2302 	umull	r2, r3, r3, r2
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	011e      	lsls	r6, r3, #4
 8002778:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800277c:	461c      	mov	r4, r3
 800277e:	f04f 0500 	mov.w	r5, #0
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	1891      	adds	r1, r2, r2
 8002788:	64b9      	str	r1, [r7, #72]	; 0x48
 800278a:	415b      	adcs	r3, r3
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800278e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002792:	1912      	adds	r2, r2, r4
 8002794:	eb45 0303 	adc.w	r3, r5, r3
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	00d9      	lsls	r1, r3, #3
 80027a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a6:	00d0      	lsls	r0, r2, #3
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	1911      	adds	r1, r2, r4
 80027ae:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80027b2:	416b      	adcs	r3, r5
 80027b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	1891      	adds	r1, r2, r2
 80027c6:	6439      	str	r1, [r7, #64]	; 0x40
 80027c8:	415b      	adcs	r3, r3
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
 80027cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80027d4:	f7fd fd6c 	bl	80002b0 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <UART_SetConfig+0x3dc>)
 80027de:	fba3 1302 	umull	r1, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2164      	movs	r1, #100	; 0x64
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <UART_SetConfig+0x3dc>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fe:	441e      	add	r6, r3
 8002800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002804:	4618      	mov	r0, r3
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	1894      	adds	r4, r2, r2
 8002810:	63bc      	str	r4, [r7, #56]	; 0x38
 8002812:	415b      	adcs	r3, r3
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800281a:	1812      	adds	r2, r2, r0
 800281c:	eb41 0303 	adc.w	r3, r1, r3
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	f04f 0500 	mov.w	r5, #0
 8002828:	00dd      	lsls	r5, r3, #3
 800282a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800282e:	00d4      	lsls	r4, r2, #3
 8002830:	4622      	mov	r2, r4
 8002832:	462b      	mov	r3, r5
 8002834:	1814      	adds	r4, r2, r0
 8002836:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800283a:	414b      	adcs	r3, r1
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	1891      	adds	r1, r2, r2
 800284e:	6339      	str	r1, [r7, #48]	; 0x30
 8002850:	415b      	adcs	r3, r3
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
 8002854:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002858:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800285c:	f7fd fd28 	bl	80002b0 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <UART_SetConfig+0x3dc>)
 8002866:	fba3 1302 	umull	r1, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2164      	movs	r1, #100	; 0x64
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	3332      	adds	r3, #50	; 0x32
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <UART_SetConfig+0x3dc>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	f003 0207 	and.w	r2, r3, #7
 8002884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4432      	add	r2, r6
 800288c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800288e:	e1a6      	b.n	8002bde <UART_SetConfig+0x722>
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800289c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4bd1      	ldr	r3, [pc, #836]	; (8002be8 <UART_SetConfig+0x72c>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d006      	beq.n	80028b6 <UART_SetConfig+0x3fa>
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4bcf      	ldr	r3, [pc, #828]	; (8002bec <UART_SetConfig+0x730>)
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 80ca 	bne.w	8002a4a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b6:	f7fe fe41 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 80028ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028c2:	461c      	mov	r4, r3
 80028c4:	f04f 0500 	mov.w	r5, #0
 80028c8:	4622      	mov	r2, r4
 80028ca:	462b      	mov	r3, r5
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80028d0:	415b      	adcs	r3, r3
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028d8:	1912      	adds	r2, r2, r4
 80028da:	eb45 0303 	adc.w	r3, r5, r3
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	00d9      	lsls	r1, r3, #3
 80028e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ec:	00d0      	lsls	r0, r2, #3
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	eb12 0a04 	adds.w	sl, r2, r4
 80028f6:	eb43 0b05 	adc.w	fp, r3, r5
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	008b      	lsls	r3, r1, #2
 8002910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002914:	0082      	lsls	r2, r0, #2
 8002916:	4650      	mov	r0, sl
 8002918:	4659      	mov	r1, fp
 800291a:	f7fd fcc9 	bl	80002b0 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4bb3      	ldr	r3, [pc, #716]	; (8002bf0 <UART_SetConfig+0x734>)
 8002924:	fba3 2302 	umull	r2, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	011e      	lsls	r6, r3, #4
 800292c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002930:	4618      	mov	r0, r3
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	1894      	adds	r4, r2, r2
 800293c:	623c      	str	r4, [r7, #32]
 800293e:	415b      	adcs	r3, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002946:	1812      	adds	r2, r2, r0
 8002948:	eb41 0303 	adc.w	r3, r1, r3
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	f04f 0500 	mov.w	r5, #0
 8002954:	00dd      	lsls	r5, r3, #3
 8002956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800295a:	00d4      	lsls	r4, r2, #3
 800295c:	4622      	mov	r2, r4
 800295e:	462b      	mov	r3, r5
 8002960:	1814      	adds	r4, r2, r0
 8002962:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002966:	414b      	adcs	r3, r1
 8002968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800296c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	008b      	lsls	r3, r1, #2
 8002982:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002986:	0082      	lsls	r2, r0, #2
 8002988:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800298c:	f7fd fc90 	bl	80002b0 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4b96      	ldr	r3, [pc, #600]	; (8002bf0 <UART_SetConfig+0x734>)
 8002996:	fba3 1302 	umull	r1, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2164      	movs	r1, #100	; 0x64
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	; 0x32
 80029a8:	4a91      	ldr	r2, [pc, #580]	; (8002bf0 <UART_SetConfig+0x734>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b4:	441e      	add	r6, r3
 80029b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029ba:	4618      	mov	r0, r3
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	1894      	adds	r4, r2, r2
 80029c6:	61bc      	str	r4, [r7, #24]
 80029c8:	415b      	adcs	r3, r3
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d0:	1812      	adds	r2, r2, r0
 80029d2:	eb41 0303 	adc.w	r3, r1, r3
 80029d6:	f04f 0400 	mov.w	r4, #0
 80029da:	f04f 0500 	mov.w	r5, #0
 80029de:	00dd      	lsls	r5, r3, #3
 80029e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029e4:	00d4      	lsls	r4, r2, #3
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	1814      	adds	r4, r2, r0
 80029ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80029f0:	414b      	adcs	r3, r1
 80029f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f04f 0100 	mov.w	r1, #0
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	008b      	lsls	r3, r1, #2
 8002a0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a10:	0082      	lsls	r2, r0, #2
 8002a12:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002a16:	f7fd fc4b 	bl	80002b0 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <UART_SetConfig+0x734>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a6f      	ldr	r2, [pc, #444]	; (8002bf0 <UART_SetConfig+0x734>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4432      	add	r2, r6
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	e0c9      	b.n	8002bde <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a4a:	f7fe fd63 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8002a4e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a56:	461c      	mov	r4, r3
 8002a58:	f04f 0500 	mov.w	r5, #0
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	462b      	mov	r3, r5
 8002a60:	1891      	adds	r1, r2, r2
 8002a62:	6139      	str	r1, [r7, #16]
 8002a64:	415b      	adcs	r3, r3
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a6c:	1912      	adds	r2, r2, r4
 8002a6e:	eb45 0303 	adc.w	r3, r5, r3
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	00d9      	lsls	r1, r3, #3
 8002a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a80:	00d0      	lsls	r0, r2, #3
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	eb12 0804 	adds.w	r8, r2, r4
 8002a8a:	eb43 0905 	adc.w	r9, r3, r5
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	008b      	lsls	r3, r1, #2
 8002aa4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aa8:	0082      	lsls	r2, r0, #2
 8002aaa:	4640      	mov	r0, r8
 8002aac:	4649      	mov	r1, r9
 8002aae:	f7fd fbff 	bl	80002b0 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <UART_SetConfig+0x734>)
 8002ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	011e      	lsls	r6, r3, #4
 8002ac0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	1894      	adds	r4, r2, r2
 8002ad0:	60bc      	str	r4, [r7, #8]
 8002ad2:	415b      	adcs	r3, r3
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ada:	1812      	adds	r2, r2, r0
 8002adc:	eb41 0303 	adc.w	r3, r1, r3
 8002ae0:	f04f 0400 	mov.w	r4, #0
 8002ae4:	f04f 0500 	mov.w	r5, #0
 8002ae8:	00dd      	lsls	r5, r3, #3
 8002aea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aee:	00d4      	lsls	r4, r2, #3
 8002af0:	4622      	mov	r2, r4
 8002af2:	462b      	mov	r3, r5
 8002af4:	1814      	adds	r4, r2, r0
 8002af6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002afa:	414b      	adcs	r3, r1
 8002afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	008b      	lsls	r3, r1, #2
 8002b16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b1a:	0082      	lsls	r2, r0, #2
 8002b1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b20:	f7fd fbc6 	bl	80002b0 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <UART_SetConfig+0x734>)
 8002b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2164      	movs	r1, #100	; 0x64
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	3332      	adds	r3, #50	; 0x32
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <UART_SetConfig+0x734>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	441e      	add	r6, r3
 8002b4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1894      	adds	r4, r2, r2
 8002b5a:	603c      	str	r4, [r7, #0]
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b64:	1812      	adds	r2, r2, r0
 8002b66:	eb41 0303 	adc.w	r3, r1, r3
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	f04f 0500 	mov.w	r5, #0
 8002b72:	00dd      	lsls	r5, r3, #3
 8002b74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b78:	00d4      	lsls	r4, r2, #3
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	1814      	adds	r4, r2, r0
 8002b80:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002b84:	414b      	adcs	r3, r1
 8002b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	008b      	lsls	r3, r1, #2
 8002ba0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ba4:	0082      	lsls	r2, r0, #2
 8002ba6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002baa:	f7fd fb81 	bl	80002b0 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <UART_SetConfig+0x734>)
 8002bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	2164      	movs	r1, #100	; 0x64
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	3332      	adds	r3, #50	; 0x32
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <UART_SetConfig+0x734>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4432      	add	r2, r6
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	e7ff      	b.n	8002bde <UART_SetConfig+0x722>
 8002bde:	bf00      	nop
 8002be0:	37f4      	adds	r7, #244	; 0xf4
 8002be2:	46bd      	mov	sp, r7
 8002be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f

08002bf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c06:	2b84      	cmp	r3, #132	; 0x84
 8002c08:	d005      	beq.n	8002c16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	3303      	adds	r3, #3
 8002c14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2a:	f3ef 8305 	mrs	r3, IPSR
 8002c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8002c30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c4c:	f001 fdac 	bl	80047a8 <vTaskStartScheduler>
  
  return osOK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c58:	b089      	sub	sp, #36	; 0x24
 8002c5a:	af04      	add	r7, sp, #16
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <osThreadCreate+0x54>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01c      	beq.n	8002caa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685c      	ldr	r4, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681d      	ldr	r5, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691e      	ldr	r6, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ffb6 	bl	8002bf4 <makeFreeRtosPriority>
 8002c88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c92:	9202      	str	r2, [sp, #8]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	9100      	str	r1, [sp, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f001 fb13 	bl	80042ca <xTaskCreateStatic>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e01c      	b.n	8002ce4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685c      	ldr	r4, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cb6:	b29e      	uxth	r6, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff98 	bl	8002bf4 <makeFreeRtosPriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f001 fb55 	bl	8004384 <xTaskCreate>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <osDelay+0x16>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	e000      	b.n	8002d06 <osDelay+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fce2 	bl	80046d0 <vTaskDelay>
  
  return osOK;
 8002d0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af02      	add	r7, sp, #8
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10a      	bne.n	8002d44 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	9200      	str	r2, [sp, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f000 f9be 	bl	80030bc <xQueueGenericCreateStatic>
 8002d40:	4603      	mov	r3, r0
 8002d42:	e016      	b.n	8002d72 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e014      	b.n	8002d72 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d110      	bne.n	8002d70 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002d4e:	2203      	movs	r2, #3
 8002d50:	2100      	movs	r1, #0
 8002d52:	2001      	movs	r0, #1
 8002d54:	f000 fa48 	bl	80031e8 <xQueueGenericCreate>
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <osSemaphoreCreate+0x56>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fb2e 	bl	80033c8 <xQueueGenericSend>
      return sema;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	e000      	b.n	8002d72 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002d70:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	e03a      	b.n	8002e0a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d103      	bne.n	8002da8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e009      	b.n	8002dbc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <osSemaphoreWait+0x40>
      ticks = 1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002dbc:	f7ff ff32 	bl	8002c24 <inHandlerMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2100      	movs	r1, #0
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 f846 	bl	8003e60 <xQueueReceiveFromISR>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <osSemaphoreWait+0x62>
      return osErrorOS;
 8002dda:	23ff      	movs	r3, #255	; 0xff
 8002ddc:	e015      	b.n	8002e0a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d011      	beq.n	8002e08 <osSemaphoreWait+0x8c>
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <osSemaphoreWait+0x98>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	e008      	b.n	8002e08 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fe01 	bl	8003a00 <xQueueSemaphoreTake>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002e04:	23ff      	movs	r3, #255	; 0xff
 8002e06:	e000      	b.n	8002e0a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002e28:	f7ff fefc 	bl	8002c24 <inHandlerMode>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fcd3 	bl	80037e4 <xQueueGiveFromISR>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002e44:	23ff      	movs	r3, #255	; 0xff
 8002e46:	e017      	b.n	8002e78 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d013      	beq.n	8002e76 <osSemaphoreRelease+0x5e>
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <osSemaphoreRelease+0x68>)
 8002e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	e00a      	b.n	8002e76 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002e60:	2300      	movs	r3, #0
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 faae 	bl	80033c8 <xQueueGenericSend>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002e72:	23ff      	movs	r3, #255	; 0xff
 8002e74:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f103 0208 	add.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f103 0208 	add.w	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f103 0208 	add.w	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d103      	bne.n	8002f46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e00c      	b.n	8002f60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e002      	b.n	8002f54 <vListInsert+0x2e>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d2f6      	bcs.n	8002f4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6852      	ldr	r2, [r2, #4]
 8002fb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d103      	bne.n	8002fcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1e5a      	subs	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003016:	f002 fd0d 	bl	8005a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	441a      	add	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	3b01      	subs	r3, #1
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	441a      	add	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	22ff      	movs	r2, #255	; 0xff
 8003062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d114      	bne.n	8003096 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01a      	beq.n	80030aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3310      	adds	r3, #16
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fe8b 	bl	8004d94 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <xQueueGenericReset+0xcc>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	e009      	b.n	80030aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3310      	adds	r3, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fef2 	bl	8002e84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3324      	adds	r3, #36	; 0x24
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff feed 	bl	8002e84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030aa:	f002 fcf3 	bl	8005a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	; 0x38
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030fe:	bf00      	nop
 8003100:	e7fe      	b.n	8003100 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <xQueueGenericCreateStatic+0x52>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <xQueueGenericCreateStatic+0x56>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueGenericCreateStatic+0x58>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	623b      	str	r3, [r7, #32]
}
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <xQueueGenericCreateStatic+0x7e>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <xQueueGenericCreateStatic+0x82>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <xQueueGenericCreateStatic+0x84>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	61fb      	str	r3, [r7, #28]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800315a:	2350      	movs	r3, #80	; 0x50
 800315c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b50      	cmp	r3, #80	; 0x50
 8003162:	d00a      	beq.n	800317a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	61bb      	str	r3, [r7, #24]
}
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800317a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00e      	beq.n	80031a4 <xQueueGenericCreateStatic+0xe8>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800318e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f87f 	bl	80032a0 <prvInitialiseNewQueue>
 80031a2:	e017      	b.n	80031d4 <xQueueGenericCreateStatic+0x118>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80031a4:	f003 f800 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 ff7b 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <xQueueGenericCreateStatic+0x124>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <xQueueGenericCreateStatic+0x118>
 80031c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <xQueueGenericCreateStatic+0x128>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	3340      	adds	r3, #64	; 0x40
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fdda 	bl	8006d88 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3730      	adds	r7, #48	; 0x30
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20004e34 	.word	0x20004e34
 80031e4:	20000010 	.word	0x20000010

080031e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericCreate+0x2a>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	613b      	str	r3, [r7, #16]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e004      	b.n	8003228 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3350      	adds	r3, #80	; 0x50
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fd23 	bl	8005c78 <pvPortMalloc>
 8003232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d012      	beq.n	8003260 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3350      	adds	r3, #80	; 0x50
 8003242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800324c:	79fa      	ldrb	r2, [r7, #7]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f821 	bl	80032a0 <prvInitialiseNewQueue>
 800325e:	e016      	b.n	800328e <xQueueGenericCreate+0xa6>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8003260:	f002 ffa2 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003264:	4603      	mov	r3, r0
 8003266:	4618      	mov	r0, r3
 8003268:	f002 ff1d 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <xQueueGenericCreate+0xb0>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	4013      	ands	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <xQueueGenericCreate+0xa6>
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <xQueueGenericCreate+0xb4>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	3340      	adds	r3, #64	; 0x40
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fd7d 	bl	8006d88 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800328e:	69bb      	ldr	r3, [r7, #24]
	}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20004e34 	.word	0x20004e34
 800329c:	20000010 	.word	0x20000010

080032a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e002      	b.n	80032c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032ce:	2101      	movs	r1, #1
 80032d0:	6a38      	ldr	r0, [r7, #32]
 80032d2:	f7ff fe8b 	bl	8002fec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80032de:	6a38      	ldr	r0, [r7, #32]
 80032e0:	f002 fec8 	bl	8006074 <prvTraceGetQueueType>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <prvInitialiseNewQueue+0x11c>)
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 ffbb 	bl	8007268 <prvTraceGetObjectHandle>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4619      	mov	r1, r3
 80032f8:	6a38      	ldr	r0, [r7, #32]
 80032fa:	f002 ff29 	bl	8006150 <prvTraceSetQueueNumberLow16>
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <prvInitialiseNewQueue+0x120>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	4619      	mov	r1, r3
 8003304:	6a38      	ldr	r0, [r7, #32]
 8003306:	f002 ff39 	bl	800617c <prvTraceSetQueueNumberHigh16>
 800330a:	6a38      	ldr	r0, [r7, #32]
 800330c:	f002 feb2 	bl	8006074 <prvTraceGetQueueType>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <prvInitialiseNewQueue+0x11c>)
 8003316:	5c9c      	ldrb	r4, [r3, r2]
 8003318:	6a38      	ldr	r0, [r7, #32]
 800331a:	f002 fefe 	bl	800611a <prvTraceGetQueueNumberLow16>
 800331e:	4603      	mov	r3, r0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	4620      	mov	r0, r4
 8003326:	f004 f84d 	bl	80073c4 <prvMarkObjectAsUsed>
 800332a:	f002 ff3d 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800332e:	4603      	mov	r3, r0
 8003330:	4618      	mov	r0, r3
 8003332:	f002 feb8 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <prvInitialiseNewQueue+0x124>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d025      	beq.n	8003392 <prvInitialiseNewQueue+0xf2>
 8003346:	6a38      	ldr	r0, [r7, #32]
 8003348:	f002 fef4 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <prvInitialiseNewQueue+0x124>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	4013      	ands	r3, r2
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <prvInitialiseNewQueue+0xf2>
 800335c:	6a38      	ldr	r0, [r7, #32]
 800335e:	f002 fe89 	bl	8006074 <prvTraceGetQueueType>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <prvInitialiseNewQueue+0x11c>)
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	3318      	adds	r3, #24
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461d      	mov	r5, r3
 8003370:	6a38      	ldr	r0, [r7, #32]
 8003372:	f002 fe7f 	bl	8006074 <prvTraceGetQueueType>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <prvInitialiseNewQueue+0x11c>)
 800337c:	5c9c      	ldrb	r4, [r3, r2]
 800337e:	6a38      	ldr	r0, [r7, #32]
 8003380:	f002 fecb 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003384:	4603      	mov	r3, r0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4621      	mov	r1, r4
 800338c:	4628      	mov	r0, r5
 800338e:	f003 fbb7 	bl	8006b00 <prvTraceStoreKernelCall>
 8003392:	6a38      	ldr	r0, [r7, #32]
 8003394:	f002 fe6e 	bl	8006074 <prvTraceGetQueueType>
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <prvInitialiseNewQueue+0x11c>)
 800339e:	5c9c      	ldrb	r4, [r3, r2]
 80033a0:	6a38      	ldr	r0, [r7, #32]
 80033a2:	f002 feba 	bl	800611a <prvTraceGetQueueNumberLow16>
 80033a6:	4603      	mov	r3, r0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	4619      	mov	r1, r3
 80033ae:	4620      	mov	r0, r4
 80033b0:	f003 fe3c 	bl	800702c <prvTraceSetObjectState>
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bdb0      	pop	{r4, r5, r7, pc}
 80033bc:	20000010 	.word	0x20000010
 80033c0:	20006740 	.word	0x20006740
 80033c4:	20004e34 	.word	0x20004e34

080033c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033d6:	2300      	movs	r3, #0
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericSend+0x32>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <xQueueGenericSend+0x40>
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <xQueueGenericSend+0x44>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <xQueueGenericSend+0x46>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <xQueueGenericSend+0x60>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <xQueueGenericSend+0x6e>
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <xQueueGenericSend+0x72>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xQueueGenericSend+0x74>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <xQueueGenericSend+0x8e>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	623b      	str	r3, [r7, #32]
}
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003456:	f001 feab 	bl	80051b0 <xTaskGetSchedulerState>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <xQueueGenericSend+0x9e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <xQueueGenericSend+0xa2>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSend+0xa4>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericSend+0xbe>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	61fb      	str	r3, [r7, #28]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003486:	f002 fad5 	bl	8005a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	429a      	cmp	r2, r3
 8003494:	d303      	bcc.n	800349e <xQueueGenericSend+0xd6>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f040 8084 	bne.w	80035a6 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 800349e:	f002 fe83 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fdfe 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4ba6      	ldr	r3, [pc, #664]	; (8003748 <xQueueGenericSend+0x380>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02a      	beq.n	8003510 <xQueueGenericSend+0x148>
 80034ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034bc:	f002 fe3a 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <xQueueGenericSend+0x380>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01f      	beq.n	8003510 <xQueueGenericSend+0x148>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <xQueueGenericSend+0x124>
 80034d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d8:	f002 fdcc 	bl	8006074 <prvTraceGetQueueType>
 80034dc:	4603      	mov	r3, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	4b9a      	ldr	r3, [pc, #616]	; (800374c <xQueueGenericSend+0x384>)
 80034e2:	5c9b      	ldrb	r3, [r3, r2]
 80034e4:	3320      	adds	r3, #32
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461d      	mov	r5, r3
 80034ea:	e000      	b.n	80034ee <xQueueGenericSend+0x126>
 80034ec:	2525      	movs	r5, #37	; 0x25
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f002 fdc0 	bl	8006074 <prvTraceGetQueueType>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b94      	ldr	r3, [pc, #592]	; (800374c <xQueueGenericSend+0x384>)
 80034fa:	5c9c      	ldrb	r4, [r3, r2]
 80034fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fe:	f002 fe0c 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003502:	4603      	mov	r3, r0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	4621      	mov	r1, r4
 800350a:	4628      	mov	r0, r5
 800350c:	f003 faf8 	bl	8006b00 <prvTraceStoreKernelCall>
 8003510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003512:	f002 fdaf 	bl	8006074 <prvTraceGetQueueType>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	4b8c      	ldr	r3, [pc, #560]	; (800374c <xQueueGenericSend+0x384>)
 800351c:	5c9c      	ldrb	r4, [r3, r2]
 800351e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003520:	f002 fdfb 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003524:	4603      	mov	r3, r0
 8003526:	b2dd      	uxtb	r5, r3
 8003528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352a:	f002 fda3 	bl	8006074 <prvTraceGetQueueType>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	4b86      	ldr	r3, [pc, #536]	; (800374c <xQueueGenericSend+0x384>)
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d005      	beq.n	8003546 <xQueueGenericSend+0x17e>
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3301      	adds	r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e000      	b.n	8003548 <xQueueGenericSend+0x180>
 8003546:	2300      	movs	r3, #0
 8003548:	461a      	mov	r2, r3
 800354a:	4629      	mov	r1, r5
 800354c:	4620      	mov	r0, r4
 800354e:	f003 fd6d 	bl	800702c <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003558:	f000 fda7 	bl	80040aa <prvCopyDataToQueue>
 800355c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d010      	beq.n	8003588 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	3324      	adds	r3, #36	; 0x24
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fc12 	bl	8004d94 <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <xQueueGenericSend+0x388>)
 8003578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	e00a      	b.n	800359e <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800358e:	4b70      	ldr	r3, [pc, #448]	; (8003750 <xQueueGenericSend+0x388>)
 8003590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800359e:	f002 fa79 	bl	8005a94 <vPortExitCritical>
				return pdPASS;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e115      	b.n	80037d2 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d13c      	bne.n	8003626 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ac:	f002 fa72 	bl	8005a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80035b0:	f002 fdfa 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 fd75 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <xQueueGenericSend+0x380>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02a      	beq.n	8003622 <xQueueGenericSend+0x25a>
 80035cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ce:	f002 fdb1 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <xQueueGenericSend+0x380>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	4013      	ands	r3, r2
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01f      	beq.n	8003622 <xQueueGenericSend+0x25a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericSend+0x236>
 80035e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ea:	f002 fd43 	bl	8006074 <prvTraceGetQueueType>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b56      	ldr	r3, [pc, #344]	; (800374c <xQueueGenericSend+0x384>)
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	3348      	adds	r3, #72	; 0x48
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461d      	mov	r5, r3
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0x238>
 80035fe:	254d      	movs	r5, #77	; 0x4d
 8003600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003602:	f002 fd37 	bl	8006074 <prvTraceGetQueueType>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	4b50      	ldr	r3, [pc, #320]	; (800374c <xQueueGenericSend+0x384>)
 800360c:	5c9c      	ldrb	r4, [r3, r2]
 800360e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003610:	f002 fd83 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003614:	4603      	mov	r3, r0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4621      	mov	r1, r4
 800361c:	4628      	mov	r0, r5
 800361e:	f003 fa6f 	bl	8006b00 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8003622:	2300      	movs	r3, #0
 8003624:	e0d5      	b.n	80037d2 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fc27 	bl	8004e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800363a:	f002 fa2b 	bl	8005a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800363e:	f001 f937 	bl	80048b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003642:	f002 f9f7 	bl	8005a34 <vPortEnterCritical>
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800364c:	b25b      	sxtb	r3, r3
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d103      	bne.n	800365c <xQueueGenericSend+0x294>
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d103      	bne.n	8003672 <xQueueGenericSend+0x2aa>
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003672:	f002 fa0f 	bl	8005a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003676:	1d3a      	adds	r2, r7, #4
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fc16 	bl	8004eb0 <xTaskCheckForTimeOut>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d164      	bne.n	8003754 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800368a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800368c:	f000 fe05 	bl	800429a <prvIsQueueFull>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d051      	beq.n	800373a <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8003696:	f002 fd87 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fd02 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <xQueueGenericSend+0x380>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <xQueueGenericSend+0x340>
 80036b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b4:	f002 fd3e 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <xQueueGenericSend+0x380>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01f      	beq.n	8003708 <xQueueGenericSend+0x340>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <xQueueGenericSend+0x31c>
 80036ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d0:	f002 fcd0 	bl	8006074 <prvTraceGetQueueType>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <xQueueGenericSend+0x384>)
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	3370      	adds	r3, #112	; 0x70
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461d      	mov	r5, r3
 80036e2:	e000      	b.n	80036e6 <xQueueGenericSend+0x31e>
 80036e4:	2575      	movs	r5, #117	; 0x75
 80036e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e8:	f002 fcc4 	bl	8006074 <prvTraceGetQueueType>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <xQueueGenericSend+0x384>)
 80036f2:	5c9c      	ldrb	r4, [r3, r2]
 80036f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f6:	f002 fd10 	bl	800611a <prvTraceGetQueueNumberLow16>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f003 f9fc 	bl	8006b00 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	3310      	adds	r3, #16
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fb1b 	bl	8004d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003718:	f000 fd57 	bl	80041ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800371c:	f001 f8d6 	bl	80048cc <xTaskResumeAll>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f47f aeaf 	bne.w	8003486 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <xQueueGenericSend+0x388>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	e6a5      	b.n	8003486 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800373a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800373c:	f000 fd45 	bl	80041ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003740:	f001 f8c4 	bl	80048cc <xTaskResumeAll>
 8003744:	e69f      	b.n	8003486 <xQueueGenericSend+0xbe>
 8003746:	bf00      	nop
 8003748:	20004e34 	.word	0x20004e34
 800374c:	20000010 	.word	0x20000010
 8003750:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003756:	f000 fd38 	bl	80041ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800375a:	f001 f8b7 	bl	80048cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800375e:	f002 fd23 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003762:	4603      	mov	r3, r0
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fc9e 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <xQueueGenericSend+0x414>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02a      	beq.n	80037d0 <xQueueGenericSend+0x408>
 800377a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377c:	f002 fcda 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <xQueueGenericSend+0x414>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01f      	beq.n	80037d0 <xQueueGenericSend+0x408>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <xQueueGenericSend+0x3e4>
 8003796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003798:	f002 fc6c 	bl	8006074 <prvTraceGetQueueType>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <xQueueGenericSend+0x418>)
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	3348      	adds	r3, #72	; 0x48
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461d      	mov	r5, r3
 80037aa:	e000      	b.n	80037ae <xQueueGenericSend+0x3e6>
 80037ac:	254d      	movs	r5, #77	; 0x4d
 80037ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b0:	f002 fc60 	bl	8006074 <prvTraceGetQueueType>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <xQueueGenericSend+0x418>)
 80037ba:	5c9c      	ldrb	r4, [r3, r2]
 80037bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037be:	f002 fcac 	bl	800611a <prvTraceGetQueueNumberLow16>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	4621      	mov	r1, r4
 80037ca:	4628      	mov	r0, r5
 80037cc:	f003 f998 	bl	8006b00 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80037d0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3738      	adds	r7, #56	; 0x38
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bdb0      	pop	{r4, r5, r7, pc}
 80037da:	bf00      	nop
 80037dc:	20004e34 	.word	0x20004e34
 80037e0:	20000010 	.word	0x20000010

080037e4 <xQueueGiveFromISR>:

	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f806 	bl	8003804 <MyWrapper_xQueueGiveFromISR>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <MyWrapper_xQueueGiveFromISR>:
{
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	b090      	sub	sp, #64	; 0x40
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <MyWrapper_xQueueGiveFromISR+0x2c>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <MyWrapper_xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <MyWrapper_xQueueGiveFromISR+0x4a>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <MyWrapper_xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <MyWrapper_xQueueGiveFromISR+0x5a>
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <MyWrapper_xQueueGiveFromISR+0x5e>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <MyWrapper_xQueueGiveFromISR+0x60>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <MyWrapper_xQueueGiveFromISR+0x7a>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	623b      	str	r3, [r7, #32]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <MyWrapper_xQueueGiveFromISR+0x78>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800387e:	f002 f9bb 	bl	8005bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003882:	f3ef 8211 	mrs	r2, BASEPRI
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	61fa      	str	r2, [r7, #28]
 8003898:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800389a:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d26b      	bcs.n	8003986 <MyWrapper_xQueueGiveFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80038b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ba:	f002 fc3b 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <MyWrapper_xQueueGiveFromISR+0x1f4>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01f      	beq.n	800390e <MyWrapper_xQueueGiveFromISR+0x10a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <MyWrapper_xQueueGiveFromISR+0xe6>
 80038d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038d6:	f002 fbcd 	bl	8006074 <prvTraceGetQueueType>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	3330      	adds	r3, #48	; 0x30
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461d      	mov	r5, r3
 80038e8:	e000      	b.n	80038ec <MyWrapper_xQueueGiveFromISR+0xe8>
 80038ea:	2535      	movs	r5, #53	; 0x35
 80038ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ee:	f002 fbc1 	bl	8006074 <prvTraceGetQueueType>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80038f8:	5c9c      	ldrb	r4, [r3, r2]
 80038fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038fc:	f002 fc0d 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003900:	4603      	mov	r3, r0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f003 f8f9 	bl	8006b00 <prvTraceStoreKernelCall>
 800390e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003910:	f002 fbb0 	bl	8006074 <prvTraceGetQueueType>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	4b38      	ldr	r3, [pc, #224]	; (80039fc <MyWrapper_xQueueGiveFromISR+0x1f8>)
 800391a:	5c9c      	ldrb	r4, [r3, r2]
 800391c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800391e:	f002 fbfc 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003922:	4603      	mov	r3, r0
 8003924:	b2d9      	uxtb	r1, r3
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3301      	adds	r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4620      	mov	r0, r4
 8003934:	f003 fb7a 	bl	800702c <prvTraceSetObjectState>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003940:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d112      	bne.n	8003970 <MyWrapper_xQueueGiveFromISR+0x16c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <MyWrapper_xQueueGiveFromISR+0x17c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	3324      	adds	r3, #36	; 0x24
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fa1c 	bl	8004d94 <xTaskRemoveFromEventList>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00e      	beq.n	8003980 <MyWrapper_xQueueGiveFromISR+0x17c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <MyWrapper_xQueueGiveFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e007      	b.n	8003980 <MyWrapper_xQueueGiveFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003974:	3301      	adds	r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	b25a      	sxtb	r2, r3
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003980:	2301      	movs	r3, #1
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003984:	e02c      	b.n	80039e0 <MyWrapper_xQueueGiveFromISR+0x1dc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003986:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003988:	f002 fbd4 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <MyWrapper_xQueueGiveFromISR+0x1f4>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <MyWrapper_xQueueGiveFromISR+0x1d8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <MyWrapper_xQueueGiveFromISR+0x1b4>
 80039a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039a4:	f002 fb66 	bl	8006074 <prvTraceGetQueueType>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	3358      	adds	r3, #88	; 0x58
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461d      	mov	r5, r3
 80039b6:	e000      	b.n	80039ba <MyWrapper_xQueueGiveFromISR+0x1b6>
 80039b8:	255d      	movs	r5, #93	; 0x5d
 80039ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039bc:	f002 fb5a 	bl	8006074 <prvTraceGetQueueType>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80039c6:	5c9c      	ldrb	r4, [r3, r2]
 80039c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039ca:	f002 fba6 	bl	800611a <prvTraceGetQueueNumberLow16>
 80039ce:	4603      	mov	r3, r0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	4621      	mov	r1, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f003 f892 	bl	8006b00 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3740      	adds	r7, #64	; 0x40
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdb0      	pop	{r4, r5, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20004e34 	.word	0x20004e34
 80039fc:	20000010 	.word	0x20000010

08003a00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	623b      	str	r3, [r7, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	61fb      	str	r3, [r7, #28]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a50:	f001 fbae 	bl	80051b0 <xTaskGetSchedulerState>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <xQueueSemaphoreTake+0x60>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xQueueSemaphoreTake+0x64>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <xQueueSemaphoreTake+0x66>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	61bb      	str	r3, [r7, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a80:	f001 ffd8 	bl	8005a34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8081 	beq.w	8003b94 <xQueueSemaphoreTake+0x194>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8003a92:	f002 fb89 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fb04 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4bbc      	ldr	r3, [pc, #752]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d025      	beq.n	8003afa <xQueueSemaphoreTake+0xfa>
 8003aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab0:	f002 fb40 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4bb6      	ldr	r3, [pc, #728]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01a      	beq.n	8003afa <xQueueSemaphoreTake+0xfa>
 8003ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac6:	f002 fad5 	bl	8006074 <prvTraceGetQueueType>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4bb2      	ldr	r3, [pc, #712]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	3328      	adds	r3, #40	; 0x28
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ada:	f002 facb 	bl	8006074 <prvTraceGetQueueType>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4bad      	ldr	r3, [pc, #692]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003ae4:	5c9c      	ldrb	r4, [r3, r2]
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	f002 fb17 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003aec:	4603      	mov	r3, r0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	4621      	mov	r1, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	f003 f803 	bl	8006b00 <prvTraceStoreKernelCall>
 8003afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afc:	f002 faba 	bl	8006074 <prvTraceGetQueueType>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	4ba4      	ldr	r3, [pc, #656]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003b06:	5c9c      	ldrb	r4, [r3, r2]
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f002 fb06 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b2dd      	uxtb	r5, r3
 8003b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b14:	f002 faae 	bl	8006074 <prvTraceGetQueueType>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b9e      	ldr	r3, [pc, #632]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d108      	bne.n	8003b36 <xQueueSemaphoreTake+0x136>
 8003b24:	f002 fb40 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 faae 	bl	800608c <prvTraceGetTaskNumberLow16>
 8003b30:	4603      	mov	r3, r0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e004      	b.n	8003b40 <xQueueSemaphoreTake+0x140>
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4629      	mov	r1, r5
 8003b44:	4620      	mov	r0, r4
 8003b46:	f003 fa71 	bl	800702c <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	1e5a      	subs	r2, r3, #1
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <xQueueSemaphoreTake+0x164>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b5a:	f001 fdb1 	bl	80056c0 <pvTaskIncrementMutexHeldCount>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00f      	beq.n	8003b8c <xQueueSemaphoreTake+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	3310      	adds	r3, #16
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 f90f 	bl	8004d94 <xTaskRemoveFromEventList>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <xQueueSemaphoreTake+0x18c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b87      	ldr	r3, [pc, #540]	; (8003d9c <xQueueSemaphoreTake+0x39c>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b8c:	f001 ff82 	bl	8005a94 <vPortExitCritical>
				return pdPASS;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e15d      	b.n	8003e50 <xQueueSemaphoreTake+0x450>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d145      	bne.n	8003c26 <xQueueSemaphoreTake+0x226>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <xQueueSemaphoreTake+0x1b6>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	617b      	str	r3, [r7, #20]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xQueueSemaphoreTake+0x1b4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bb6:	f001 ff6d 	bl	8005a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003bba:	f002 faf5 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fa70 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d025      	beq.n	8003c22 <xQueueSemaphoreTake+0x222>
 8003bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd8:	f002 faac 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	4013      	ands	r3, r2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01a      	beq.n	8003c22 <xQueueSemaphoreTake+0x222>
 8003bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bee:	f002 fa41 	bl	8006074 <prvTraceGetQueueType>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b68      	ldr	r3, [pc, #416]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	3350      	adds	r3, #80	; 0x50
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461d      	mov	r5, r3
 8003c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c02:	f002 fa37 	bl	8006074 <prvTraceGetQueueType>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003c0c:	5c9c      	ldrb	r4, [r3, r2]
 8003c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c10:	f002 fa83 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f002 ff6f 	bl	8006b00 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e114      	b.n	8003e50 <xQueueSemaphoreTake+0x450>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <xQueueSemaphoreTake+0x23a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f927 	bl	8004e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c3a:	f001 ff2b 	bl	8005a94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c3e:	f000 fe37 	bl	80048b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c42:	f001 fef7 	bl	8005a34 <vPortEnterCritical>
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d103      	bne.n	8003c5c <xQueueSemaphoreTake+0x25c>
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c62:	b25b      	sxtb	r3, r3
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d103      	bne.n	8003c72 <xQueueSemaphoreTake+0x272>
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c72:	f001 ff0f 	bl	8005a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c76:	463a      	mov	r2, r7
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f916 	bl	8004eb0 <xTaskCheckForTimeOut>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 8090 	bne.w	8003dac <xQueueSemaphoreTake+0x3ac>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8e:	f000 faee 	bl	800426e <prvIsQueueEmpty>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8083 	beq.w	8003da0 <xQueueSemaphoreTake+0x3a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8003c9a:	f002 fa85 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f002 fa00 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d025      	beq.n	8003d02 <xQueueSemaphoreTake+0x302>
 8003cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb8:	f002 fa3c 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01a      	beq.n	8003d02 <xQueueSemaphoreTake+0x302>
 8003ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cce:	f002 f9d1 	bl	8006074 <prvTraceGetQueueType>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003cd8:	5c9b      	ldrb	r3, [r3, r2]
 8003cda:	3368      	adds	r3, #104	; 0x68
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461d      	mov	r5, r3
 8003ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce2:	f002 f9c7 	bl	8006074 <prvTraceGetQueueType>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003cec:	5c9c      	ldrb	r4, [r3, r2]
 8003cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf0:	f002 fa13 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f002 feff 	bl	8006b00 <prvTraceStoreKernelCall>
 8003d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d04:	f002 f9b6 	bl	8006074 <prvTraceGetQueueType>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <xQueueSemaphoreTake+0x398>)
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d018      	beq.n	8003d46 <xQueueSemaphoreTake+0x346>
 8003d14:	f002 fa48 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 f9c3 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <xQueueSemaphoreTake+0x394>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <xQueueSemaphoreTake+0x346>
 8003d30:	f002 fa3a 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 f9a8 	bl	800608c <prvTraceGetTaskNumberLow16>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	f003 f9eb 	bl	800711c <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <xQueueSemaphoreTake+0x362>
					{
						taskENTER_CRITICAL();
 8003d4e:	f001 fe71 	bl	8005a34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fa48 	bl	80051ec <xTaskPriorityInherit>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8003d5e:	f001 fe99 	bl	8005a94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 ffee 	bl	8004d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d72:	f000 fa2a 	bl	80041ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d76:	f000 fda9 	bl	80048cc <xTaskResumeAll>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f ae7f 	bne.w	8003a80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <xQueueSemaphoreTake+0x39c>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	e675      	b.n	8003a80 <xQueueSemaphoreTake+0x80>
 8003d94:	20004e34 	.word	0x20004e34
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	e000ed04 	.word	0xe000ed04
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da2:	f000 fa12 	bl	80041ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003da6:	f000 fd91 	bl	80048cc <xTaskResumeAll>
 8003daa:	e669      	b.n	8003a80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dae:	f000 fa0c 	bl	80041ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003db2:	f000 fd8b 	bl	80048cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db8:	f000 fa59 	bl	800426e <prvIsQueueEmpty>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f43f ae5e 	beq.w	8003a80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <xQueueSemaphoreTake+0x3e6>
					{
						taskENTER_CRITICAL();
 8003dca:	f001 fe33 	bl	8005a34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd0:	f000 f953 	bl	800407a <prvGetDisinheritPriorityAfterTimeout>
 8003dd4:	6378      	str	r0, [r7, #52]	; 0x34
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fb91 	bl	8005504 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003de2:	f001 fe57 	bl	8005a94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003de6:	f002 f9df 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 f95a 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <xQueueSemaphoreTake+0x458>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d025      	beq.n	8003e4e <xQueueSemaphoreTake+0x44e>
 8003e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e04:	f002 f996 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <xQueueSemaphoreTake+0x458>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <xQueueSemaphoreTake+0x44e>
 8003e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1a:	f002 f92b 	bl	8006074 <prvTraceGetQueueType>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <xQueueSemaphoreTake+0x45c>)
 8003e24:	5c9b      	ldrb	r3, [r3, r2]
 8003e26:	3350      	adds	r3, #80	; 0x50
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2e:	f002 f921 	bl	8006074 <prvTraceGetQueueType>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <xQueueSemaphoreTake+0x45c>)
 8003e38:	5c9c      	ldrb	r4, [r3, r2]
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3c:	f002 f96d 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003e40:	4603      	mov	r3, r0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f002 fe59 	bl	8006b00 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8003e4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3738      	adds	r7, #56	; 0x38
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}
 8003e58:	20004e34 	.word	0x20004e34
 8003e5c:	20000010 	.word	0x20000010

08003e60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b08e      	sub	sp, #56	; 0x38
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	623b      	str	r3, [r7, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <xQueueReceiveFromISR+0x3a>
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <xQueueReceiveFromISR+0x3e>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <xQueueReceiveFromISR+0x40>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	61fb      	str	r3, [r7, #28]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eba:	f001 fe9d 	bl	8005bf8 <vPortValidateInterruptPriority>
	__asm volatile
 8003ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	61ba      	str	r2, [r7, #24]
 8003ed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06a      	beq.n	8003fbc <xQueueReceiveFromISR+0x15c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8003ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ef2:	f002 f91f 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <xQueueReceiveFromISR+0x1c4>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	4013      	ands	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01a      	beq.n	8003f3c <xQueueReceiveFromISR+0xdc>
 8003f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f08:	f002 f8b4 	bl	8006074 <prvTraceGetQueueType>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b45      	ldr	r3, [pc, #276]	; (8004028 <xQueueReceiveFromISR+0x1c8>)
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	3338      	adds	r3, #56	; 0x38
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461d      	mov	r5, r3
 8003f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f1c:	f002 f8aa 	bl	8006074 <prvTraceGetQueueType>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b40      	ldr	r3, [pc, #256]	; (8004028 <xQueueReceiveFromISR+0x1c8>)
 8003f26:	5c9c      	ldrb	r4, [r3, r2]
 8003f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2a:	f002 f8f6 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f002 fde2 	bl	8006b00 <prvTraceStoreKernelCall>
 8003f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f3e:	f002 f899 	bl	8006074 <prvTraceGetQueueType>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <xQueueReceiveFromISR+0x1c8>)
 8003f48:	5c9c      	ldrb	r4, [r3, r2]
 8003f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f4c:	f002 f8e5 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003f50:	4603      	mov	r3, r0
 8003f52:	b2d9      	uxtb	r1, r3
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4620      	mov	r0, r4
 8003f62:	f003 f863 	bl	800702c <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6a:	f000 f908 	bl	800417e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d112      	bne.n	8003fa6 <xQueueReceiveFromISR+0x146>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <xQueueReceiveFromISR+0x156>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 ff01 	bl	8004d94 <xTaskRemoveFromEventList>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <xQueueReceiveFromISR+0x156>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <xQueueReceiveFromISR+0x156>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e007      	b.n	8003fb6 <xQueueReceiveFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	b25a      	sxtb	r2, r3
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	e027      	b.n	800400c <xQueueReceiveFromISR+0x1ac>
		}
		else
		{
			xReturn = pdFAIL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8003fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fc2:	f002 f8b7 	bl	8006134 <prvTraceGetQueueNumberHigh16>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <xQueueReceiveFromISR+0x1c4>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <xQueueReceiveFromISR+0x1ac>
 8003fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd8:	f002 f84c 	bl	8006074 <prvTraceGetQueueType>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <xQueueReceiveFromISR+0x1c8>)
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	3360      	adds	r3, #96	; 0x60
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461d      	mov	r5, r3
 8003fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fec:	f002 f842 	bl	8006074 <prvTraceGetQueueType>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <xQueueReceiveFromISR+0x1c8>)
 8003ff6:	5c9c      	ldrb	r4, [r3, r2]
 8003ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ffa:	f002 f88e 	bl	800611a <prvTraceGetQueueNumberLow16>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	4621      	mov	r1, r4
 8004006:	4628      	mov	r0, r5
 8004008:	f002 fd7a 	bl	8006b00 <prvTraceStoreKernelCall>
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f383 8811 	msr	BASEPRI, r3
}
 8004016:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800401a:	4618      	mov	r0, r3
 800401c:	3738      	adds	r7, #56	; 0x38
 800401e:	46bd      	mov	sp, r7
 8004020:	bdb0      	pop	{r4, r5, r7, pc}
 8004022:	bf00      	nop
 8004024:	20004e34 	.word	0x20004e34
 8004028:	20000010 	.word	0x20000010

0800402c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1c3 0307 	rsb	r3, r3, #7
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e001      	b.n	800409c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800409c:	68fb      	ldr	r3, [r7, #12]
	}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b086      	sub	sp, #24
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d14d      	bne.n	800416c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f94d 	bl	8005374 <xTaskPriorityDisinherit>
 80040da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	e043      	b.n	800416c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d119      	bne.n	800411e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6858      	ldr	r0, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	461a      	mov	r2, r3
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	f003 fe41 	bl	8007d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d32b      	bcc.n	800416c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e026      	b.n	800416c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68d8      	ldr	r0, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	461a      	mov	r2, r3
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	f003 fe27 	bl	8007d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	425b      	negs	r3, r3
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d207      	bcs.n	800415a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	425b      	negs	r3, r3
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d105      	bne.n	800416c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3b01      	subs	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d018      	beq.n	80041c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d303      	bcc.n	80041b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68d9      	ldr	r1, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	461a      	mov	r2, r3
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	f003 fddd 	bl	8007d7c <memcpy>
	}
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041d2:	f001 fc2f 	bl	8005a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041de:	e011      	b.n	8004204 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3324      	adds	r3, #36	; 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fdd1 	bl	8004d94 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041f8:	f000 febc 	bl	8004f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	3b01      	subs	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	dce9      	bgt.n	80041e0 <prvUnlockQueue+0x16>
 800420c:	e000      	b.n	8004210 <prvUnlockQueue+0x46>
					break;
 800420e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004218:	f001 fc3c 	bl	8005a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800421c:	f001 fc0a 	bl	8005a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004226:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004228:	e011      	b.n	800424e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3310      	adds	r3, #16
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fdac 	bl	8004d94 <xTaskRemoveFromEventList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004242:	f000 fe97 	bl	8004f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004246:	7bbb      	ldrb	r3, [r7, #14]
 8004248:	3b01      	subs	r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800424e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004252:	2b00      	cmp	r3, #0
 8004254:	dce9      	bgt.n	800422a <prvUnlockQueue+0x60>
 8004256:	e000      	b.n	800425a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004258:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004262:	f001 fc17 	bl	8005a94 <vPortExitCritical>
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004276:	f001 fbdd 	bl	8005a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004282:	2301      	movs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e001      	b.n	800428c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800428c:	f001 fc02 	bl	8005a94 <vPortExitCritical>

	return xReturn;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a2:	f001 fbc7 	bl	8005a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d102      	bne.n	80042b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e001      	b.n	80042bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042bc:	f001 fbea 	bl	8005a94 <vPortExitCritical>

	return xReturn;
 80042c0:	68fb      	ldr	r3, [r7, #12]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08e      	sub	sp, #56	; 0x38
 80042ce:	af04      	add	r7, sp, #16
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	623b      	str	r3, [r7, #32]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <xTaskCreateStatic+0x46>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61fb      	str	r3, [r7, #28]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004310:	235c      	movs	r3, #92	; 0x5c
 8004312:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b5c      	cmp	r3, #92	; 0x5c
 8004318:	d00a      	beq.n	8004330 <xTaskCreateStatic+0x66>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	61bb      	str	r3, [r7, #24]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004330:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01e      	beq.n	8004376 <xTaskCreateStatic+0xac>
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01b      	beq.n	8004376 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004346:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004350:	2300      	movs	r3, #0
 8004352:	9303      	str	r3, [sp, #12]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f850 	bl	800440e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	f000 f8dc 	bl	800452c <prvAddNewTaskToReadyList>
 8004374:	e001      	b.n	800437a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800437a:	697b      	ldr	r3, [r7, #20]
	}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af04      	add	r7, sp, #16
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f001 fc6d 	bl	8005c78 <pvPortMalloc>
 800439e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043a6:	205c      	movs	r0, #92	; 0x5c
 80043a8:	f001 fc66 	bl	8005c78 <pvPortMalloc>
 80043ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	e005      	b.n	80043c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043bc:	6978      	ldr	r0, [r7, #20]
 80043be:	f001 fd2f 	bl	8005e20 <vPortFree>
 80043c2:	e001      	b.n	80043c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d017      	beq.n	80043fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	2300      	movs	r3, #0
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f80e 	bl	800440e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f2:	69f8      	ldr	r0, [r7, #28]
 80043f4:	f000 f89a 	bl	800452c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e002      	b.n	8004404 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004404:	69bb      	ldr	r3, [r7, #24]
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b088      	sub	sp, #32
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	461a      	mov	r2, r3
 8004426:	21a5      	movs	r1, #165	; 0xa5
 8004428:	f003 fcb6 	bl	8007d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004436:	3b01      	subs	r3, #1
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	617b      	str	r3, [r7, #20]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e012      	b.n	8004498 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	7819      	ldrb	r1, [r3, #0]
 800447a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	3334      	adds	r3, #52	; 0x34
 8004482:	460a      	mov	r2, r1
 8004484:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	d9e9      	bls.n	8004472 <prvInitialiseNewTask+0x64>
 800449e:	e000      	b.n	80044a2 <prvInitialiseNewTask+0x94>
			{
				break;
 80044a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044aa:	e003      	b.n	80044b4 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d901      	bls.n	80044be <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ba:	2306      	movs	r3, #6
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fcf5 	bl	8002ec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	3318      	adds	r3, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fcf0 	bl	8002ec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f1c3 0207 	rsb	r2, r3, #7
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	69b8      	ldr	r0, [r7, #24]
 800450e:	f001 f951 	bl	80057b4 <pxPortInitialiseStack>
 8004512:	4602      	mov	r2, r0
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004524:	bf00      	nop
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004534:	f001 fa7e 	bl	8005a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <prvAddNewTaskToReadyList+0x180>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a5b      	ldr	r2, [pc, #364]	; (80046ac <prvAddNewTaskToReadyList+0x180>)
 8004540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004542:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <prvAddNewTaskToReadyList+0x184>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800454a:	4a59      	ldr	r2, [pc, #356]	; (80046b0 <prvAddNewTaskToReadyList+0x184>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004550:	4b56      	ldr	r3, [pc, #344]	; (80046ac <prvAddNewTaskToReadyList+0x180>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004558:	f000 fd5c 	bl	8005014 <prvInitialiseTaskLists>
 800455c:	e00d      	b.n	800457a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800455e:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <prvAddNewTaskToReadyList+0x188>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004566:	4b52      	ldr	r3, [pc, #328]	; (80046b0 <prvAddNewTaskToReadyList+0x184>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	429a      	cmp	r2, r3
 8004572:	d802      	bhi.n	800457a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004574:	4a4e      	ldr	r2, [pc, #312]	; (80046b0 <prvAddNewTaskToReadyList+0x184>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800457a:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <prvAddNewTaskToReadyList+0x18c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a4d      	ldr	r2, [pc, #308]	; (80046b8 <prvAddNewTaskToReadyList+0x18c>)
 8004582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004584:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <prvAddNewTaskToReadyList+0x18c>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d048      	beq.n	8004624 <prvAddNewTaskToReadyList+0xf8>
 8004592:	2003      	movs	r0, #3
 8004594:	f002 fe68 	bl	8007268 <prvTraceGetObjectHandle>
 8004598:	4603      	mov	r3, r0
 800459a:	b29b      	uxth	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 fd8f 	bl	80060c2 <prvTraceSetTaskNumberLow16>
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <prvAddNewTaskToReadyList+0x190>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 fd9f 	bl	80060ee <prvTraceSetTaskNumberHigh16>
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 fd6b 	bl	800608c <prvTraceGetTaskNumberLow16>
 80045b6:	4603      	mov	r3, r0
 80045b8:	b2d9      	uxtb	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3334      	adds	r3, #52	; 0x34
 80045be:	461a      	mov	r2, r3
 80045c0:	2003      	movs	r0, #3
 80045c2:	f002 ff43 	bl	800744c <prvTraceSetObjectName>
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 fd60 	bl	800608c <prvTraceGetTaskNumberLow16>
 80045cc:	4603      	mov	r3, r0
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	2003      	movs	r0, #3
 80045da:	f002 fcad 	bl	8006f38 <prvTraceSetPriorityProperty>
 80045de:	f001 fde3 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fd5e 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <prvAddNewTaskToReadyList+0x194>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <prvAddNewTaskToReadyList+0xf8>
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 fd53 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004600:	4603      	mov	r3, r0
 8004602:	461a      	mov	r2, r3
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <prvAddNewTaskToReadyList+0x194>)
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d009      	beq.n	8004624 <prvAddNewTaskToReadyList+0xf8>
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fd3b 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004616:	4603      	mov	r3, r0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	2103      	movs	r1, #3
 800461e:	201b      	movs	r0, #27
 8004620:	f002 fa6e 	bl	8006b00 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 fd3e 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <prvAddNewTaskToReadyList+0x194>)
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	4013      	ands	r3, r2
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <prvAddNewTaskToReadyList+0x11e>
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f001 fd26 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004640:	4603      	mov	r3, r0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f002 f95f 	bl	8006908 <prvTraceStoreTaskReady>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	2201      	movs	r2, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <prvAddNewTaskToReadyList+0x198>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <prvAddNewTaskToReadyList+0x198>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <prvAddNewTaskToReadyList+0x19c>)
 800466a:	441a      	add	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe fc33 	bl	8002ede <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004678:	f001 fa0c 	bl	8005a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <prvAddNewTaskToReadyList+0x188>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvAddNewTaskToReadyList+0x184>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d207      	bcs.n	80046a2 <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <prvAddNewTaskToReadyList+0x1a0>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200003fc 	.word	0x200003fc
 80046b0:	200002fc 	.word	0x200002fc
 80046b4:	20000408 	.word	0x20000408
 80046b8:	20000418 	.word	0x20000418
 80046bc:	20006740 	.word	0x20006740
 80046c0:	20004e34 	.word	0x20004e34
 80046c4:	20000404 	.word	0x20000404
 80046c8:	20000300 	.word	0x20000300
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04b      	beq.n	800477a <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <vTaskDelay+0xc8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <vTaskDelay+0x30>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004700:	f000 f8d6 	bl	80048b0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <vTaskDelay+0xcc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fccc 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <vTaskDelay+0xd0>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	4013      	ands	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <vTaskDelay+0x6a>
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	2089      	movs	r0, #137	; 0x89
 8004722:	f002 fb31 	bl	8006d88 <prvTraceStoreKernelCallWithNumericParamOnly>
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <vTaskDelay+0xcc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fcae 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004730:	4603      	mov	r3, r0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4618      	mov	r0, r3
 8004736:	f002 fcf1 	bl	800711c <prvTraceSetTaskInstanceFinished>
 800473a:	f001 fd35 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800473e:	4603      	mov	r3, r0
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fcb0 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <vTaskDelay+0xd0>)
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <vTaskDelay+0x9c>
 8004756:	f001 fd27 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fc95 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004762:	4603      	mov	r3, r0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4618      	mov	r0, r3
 8004768:	f002 fcd8 	bl	800711c <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800476c:	2100      	movs	r1, #0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ffba 	bl	80056e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004774:	f000 f8aa 	bl	80048cc <xTaskResumeAll>
 8004778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <vTaskDelay+0xd4>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000424 	.word	0x20000424
 800479c:	200002fc 	.word	0x200002fc
 80047a0:	20004e34 	.word	0x20004e34
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047b6:	463a      	mov	r2, r7
 80047b8:	1d39      	adds	r1, r7, #4
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fb fefa 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	9202      	str	r2, [sp, #8]
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	2300      	movs	r3, #0
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	2300      	movs	r3, #0
 80047d4:	460a      	mov	r2, r1
 80047d6:	492e      	ldr	r1, [pc, #184]	; (8004890 <vTaskStartScheduler+0xe8>)
 80047d8:	482e      	ldr	r0, [pc, #184]	; (8004894 <vTaskStartScheduler+0xec>)
 80047da:	f7ff fd76 	bl	80042ca <xTaskCreateStatic>
 80047de:	4603      	mov	r3, r0
 80047e0:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <vTaskStartScheduler+0xf0>)
 80047e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047e4:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <vTaskStartScheduler+0xf0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e001      	b.n	80047f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d135      	bne.n	8004868 <vTaskStartScheduler+0xc0>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	613b      	str	r3, [r7, #16]
}
 800480e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004810:	4b22      	ldr	r3, [pc, #136]	; (800489c <vTaskStartScheduler+0xf4>)
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004818:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <vTaskStartScheduler+0xf8>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <vTaskStartScheduler+0xfc>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004824:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <vTaskStartScheduler+0x100>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f001 fcbd 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800482e:	4603      	mov	r3, r0
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fc38 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <vTaskStartScheduler+0x104>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	4013      	ands	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <vTaskStartScheduler+0xb4>
 8004846:	f001 fcaf 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 800484a:	4603      	mov	r3, r0
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fc1d 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004852:	4603      	mov	r3, r0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4618      	mov	r0, r3
 8004858:	f002 fafc 	bl	8006e54 <prvTraceStoreTaskswitch>
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <vTaskStartScheduler+0x100>)
 800485e:	2202      	movs	r2, #2
 8004860:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004862:	f001 f835 	bl	80058d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004866:	e00e      	b.n	8004886 <vTaskStartScheduler+0xde>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d10a      	bne.n	8004886 <vTaskStartScheduler+0xde>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <vTaskStartScheduler+0xdc>
}
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08008e80 	.word	0x08008e80
 8004894:	08004fe1 	.word	0x08004fe1
 8004898:	20000420 	.word	0x20000420
 800489c:	2000041c 	.word	0x2000041c
 80048a0:	20000408 	.word	0x20000408
 80048a4:	20000400 	.word	0x20000400
 80048a8:	20004058 	.word	0x20004058
 80048ac:	20004e34 	.word	0x20004e34

080048b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <vTaskSuspendAll+0x18>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	4a03      	ldr	r2, [pc, #12]	; (80048c8 <vTaskSuspendAll+0x18>)
 80048bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	20000424 	.word	0x20000424

080048cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048da:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <xTaskResumeAll+0x13c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	603b      	str	r3, [r7, #0]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048f8:	f001 f89c 	bl	8005a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <xTaskResumeAll+0x13c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <xTaskResumeAll+0x13c>)
 8004904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <xTaskResumeAll+0x13c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d174      	bne.n	80049f8 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <xTaskResumeAll+0x140>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d070      	beq.n	80049f8 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004916:	e041      	b.n	800499c <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004918:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <xTaskResumeAll+0x144>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3318      	adds	r3, #24
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fb37 	bl	8002f98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3304      	adds	r3, #4
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fb32 	bl	8002f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 fbb6 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <xTaskResumeAll+0x148>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <xTaskResumeAll+0x8e>
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f001 fb9e 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004950:	4603      	mov	r3, r0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4618      	mov	r0, r3
 8004956:	f001 ffd7 	bl	8006908 <prvTraceStoreTaskReady>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <xTaskResumeAll+0x14c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <xTaskResumeAll+0x14c>)
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <xTaskResumeAll+0x150>)
 800497a:	441a      	add	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7fe faab 	bl	8002ede <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <xTaskResumeAll+0x154>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <xTaskResumeAll+0x158>)
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <xTaskResumeAll+0x144>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1b9      	bne.n	8004918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049aa:	f000 fbd1 	bl	8005150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <xTaskResumeAll+0x15c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049ba:	f000 f839 	bl	8004a30 <xTaskIncrementTick>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <xTaskResumeAll+0x158>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f1      	bne.n	80049ba <xTaskResumeAll+0xee>

						uxPendedTicks = 0;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <xTaskResumeAll+0x15c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xTaskResumeAll+0x158>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d009      	beq.n	80049f8 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <xTaskResumeAll+0x160>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049f8:	f001 f84c 	bl	8005a94 <vPortExitCritical>

	return xAlreadyYielded;
 80049fc:	68bb      	ldr	r3, [r7, #8]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000424 	.word	0x20000424
 8004a0c:	200003fc 	.word	0x200003fc
 8004a10:	200003bc 	.word	0x200003bc
 8004a14:	20004e34 	.word	0x20004e34
 8004a18:	20000404 	.word	0x20000404
 8004a1c:	20000300 	.word	0x20000300
 8004a20:	200002fc 	.word	0x200002fc
 8004a24:	20000410 	.word	0x20000410
 8004a28:	2000040c 	.word	0x2000040c
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <xTaskIncrementTick+0x1a0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d003      	beq.n	8004a4a <xTaskIncrementTick+0x1a>
 8004a42:	4b64      	ldr	r3, [pc, #400]	; (8004bd4 <xTaskIncrementTick+0x1a4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <xTaskIncrementTick+0x2a>
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <xTaskIncrementTick+0x1a8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	4a61      	ldr	r2, [pc, #388]	; (8004bd8 <xTaskIncrementTick+0x1a8>)
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	2000      	movs	r0, #0
 8004a56:	f003 f91d 	bl	8007c94 <prvTracePortGetTimeStamp>
 8004a5a:	4b5d      	ldr	r3, [pc, #372]	; (8004bd0 <xTaskIncrementTick+0x1a0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <xTaskIncrementTick+0x40>
 8004a62:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <xTaskIncrementTick+0x1ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4619      	mov	r1, r3
 8004a6a:	2003      	movs	r0, #3
 8004a6c:	f002 f98c 	bl	8006d88 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a70:	4b57      	ldr	r3, [pc, #348]	; (8004bd0 <xTaskIncrementTick+0x1a0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 809b 	bne.w	8004bb0 <xTaskIncrementTick+0x180>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a7a:	4b58      	ldr	r3, [pc, #352]	; (8004bdc <xTaskIncrementTick+0x1ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a82:	4a56      	ldr	r2, [pc, #344]	; (8004bdc <xTaskIncrementTick+0x1ac>)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d120      	bne.n	8004ad0 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a8e:	4b54      	ldr	r3, [pc, #336]	; (8004be0 <xTaskIncrementTick+0x1b0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <xTaskIncrementTick+0x7e>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	603b      	str	r3, [r7, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <xTaskIncrementTick+0x7c>
 8004aae:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <xTaskIncrementTick+0x1b0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <xTaskIncrementTick+0x1b4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a49      	ldr	r2, [pc, #292]	; (8004be0 <xTaskIncrementTick+0x1b0>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4a49      	ldr	r2, [pc, #292]	; (8004be4 <xTaskIncrementTick+0x1b4>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b49      	ldr	r3, [pc, #292]	; (8004be8 <xTaskIncrementTick+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a47      	ldr	r2, [pc, #284]	; (8004be8 <xTaskIncrementTick+0x1b8>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	f000 fb40 	bl	8005150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ad0:	4b46      	ldr	r3, [pc, #280]	; (8004bec <xTaskIncrementTick+0x1bc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d35b      	bcc.n	8004b92 <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <xTaskIncrementTick+0x1b0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <xTaskIncrementTick+0x1bc>)
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	601a      	str	r2, [r3, #0]
					break;
 8004aec:	e051      	b.n	8004b92 <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aee:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <xTaskIncrementTick+0x1b0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d203      	bcs.n	8004b0e <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b06:	4a39      	ldr	r2, [pc, #228]	; (8004bec <xTaskIncrementTick+0x1bc>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b0c:	e041      	b.n	8004b92 <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fa40 	bl	8002f98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	3318      	adds	r3, #24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe fa37 	bl	8002f98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f001 fabb 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b2e      	ldr	r3, [pc, #184]	; (8004bf0 <xTaskIncrementTick+0x1c0>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <xTaskIncrementTick+0x120>
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f001 faa3 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004b46:	4603      	mov	r3, r0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 fedc 	bl	8006908 <prvTraceStoreTaskReady>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <xTaskIncrementTick+0x1c4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <xTaskIncrementTick+0x1c4>)
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <xTaskIncrementTick+0x1c8>)
 8004b70:	441a      	add	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe f9b0 	bl	8002ede <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <xTaskIncrementTick+0x1cc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d3a6      	bcc.n	8004ada <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b90:	e7a3      	b.n	8004ada <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <xTaskIncrementTick+0x1cc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	4917      	ldr	r1, [pc, #92]	; (8004bf8 <xTaskIncrementTick+0x1c8>)
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d907      	bls.n	8004bba <xTaskIncrementTick+0x18a>
			{
				xSwitchRequired = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e004      	b.n	8004bba <xTaskIncrementTick+0x18a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <xTaskIncrementTick+0x1a4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <xTaskIncrementTick+0x1a4>)
 8004bb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <xTaskIncrementTick+0x1d0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <xTaskIncrementTick+0x196>
		{
			xSwitchRequired = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000424 	.word	0x20000424
 8004bd4:	2000040c 	.word	0x2000040c
 8004bd8:	2000404c 	.word	0x2000404c
 8004bdc:	20000400 	.word	0x20000400
 8004be0:	200003b4 	.word	0x200003b4
 8004be4:	200003b8 	.word	0x200003b8
 8004be8:	20000414 	.word	0x20000414
 8004bec:	2000041c 	.word	0x2000041c
 8004bf0:	20004e34 	.word	0x20004e34
 8004bf4:	20000404 	.word	0x20000404
 8004bf8:	20000300 	.word	0x20000300
 8004bfc:	200002fc 	.word	0x200002fc
 8004c00:	20000410 	.word	0x20000410

08004c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c0a:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <vTaskSwitchContext+0x12c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <vTaskSwitchContext+0x130>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c18:	e085      	b.n	8004d26 <vTaskSwitchContext+0x122>
		xYieldPending = pdFALSE;
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <vTaskSwitchContext+0x130>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004c20:	4b45      	ldr	r3, [pc, #276]	; (8004d38 <vTaskSwitchContext+0x134>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d111      	bne.n	8004c5c <vTaskSwitchContext+0x58>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d10b      	bne.n	8004c5c <vTaskSwitchContext+0x58>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3308      	adds	r3, #8
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d105      	bne.n	8004c5c <vTaskSwitchContext+0x58>
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	330c      	adds	r3, #12
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d008      	beq.n	8004c6e <vTaskSwitchContext+0x6a>
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <vTaskSwitchContext+0x134>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <vTaskSwitchContext+0x134>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3334      	adds	r3, #52	; 0x34
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7fb fe39 	bl	80008e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <vTaskSwitchContext+0x138>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c7c:	7afb      	ldrb	r3, [r7, #11]
 8004c7e:	f1c3 031f 	rsb	r3, r3, #31
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	492e      	ldr	r1, [pc, #184]	; (8004d40 <vTaskSwitchContext+0x13c>)
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <vTaskSwitchContext+0xaa>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	607b      	str	r3, [r7, #4]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <vTaskSwitchContext+0xa8>
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <vTaskSwitchContext+0x13c>)
 8004cba:	4413      	add	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d104      	bne.n	8004cde <vTaskSwitchContext+0xda>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <vTaskSwitchContext+0x134>)
 8004ce6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <vTaskSwitchContext+0x140>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f001 fa5b 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f9d6 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <vTaskSwitchContext+0x144>)
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	4013      	ands	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <vTaskSwitchContext+0x11c>
 8004d0a:	f001 fa4d 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f9bb 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004d16:	4603      	mov	r3, r0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 f89a 	bl	8006e54 <prvTraceStoreTaskswitch>
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <vTaskSwitchContext+0x140>)
 8004d22:	2202      	movs	r2, #2
 8004d24:	601a      	str	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000424 	.word	0x20000424
 8004d34:	20000410 	.word	0x20000410
 8004d38:	200002fc 	.word	0x200002fc
 8004d3c:	20000404 	.word	0x20000404
 8004d40:	20000300 	.word	0x20000300
 8004d44:	20004058 	.word	0x20004058
 8004d48:	20004e34 	.word	0x20004e34

08004d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60fb      	str	r3, [r7, #12]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <vTaskPlaceOnEventList+0x44>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3318      	adds	r3, #24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe f8d3 	bl	8002f26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d80:	2101      	movs	r1, #1
 8004d82:	6838      	ldr	r0, [r7, #0]
 8004d84:	f000 fcb0 	bl	80056e8 <prvAddCurrentTaskToDelayedList>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	200002fc 	.word	0x200002fc

08004d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60fb      	str	r3, [r7, #12]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	3318      	adds	r3, #24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe f8e7 	bl	8002f98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dca:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <xTaskRemoveFromEventList+0xd4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d12f      	bne.n	8004e32 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe f8de 	bl	8002f98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ddc:	6938      	ldr	r0, [r7, #16]
 8004dde:	f001 f962 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <xTaskRemoveFromEventList+0xd8>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	4013      	ands	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <xTaskRemoveFromEventList+0x6e>
 8004df2:	6938      	ldr	r0, [r7, #16]
 8004df4:	f001 f94a 	bl	800608c <prvTraceGetTaskNumberLow16>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fd83 	bl	8006908 <prvTraceStoreTaskReady>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	2201      	movs	r2, #1
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <xTaskRemoveFromEventList+0xdc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <xTaskRemoveFromEventList+0xdc>)
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <xTaskRemoveFromEventList+0xe0>)
 8004e22:	441a      	add	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7fe f857 	bl	8002ede <vListInsertEnd>
 8004e30:	e005      	b.n	8004e3e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3318      	adds	r3, #24
 8004e36:	4619      	mov	r1, r3
 8004e38:	480f      	ldr	r0, [pc, #60]	; (8004e78 <xTaskRemoveFromEventList+0xe4>)
 8004e3a:	f7fe f850 	bl	8002ede <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <xTaskRemoveFromEventList+0xe8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d905      	bls.n	8004e58 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <xTaskRemoveFromEventList+0xec>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e001      	b.n	8004e5c <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000424 	.word	0x20000424
 8004e6c:	20004e34 	.word	0x20004e34
 8004e70:	20000404 	.word	0x20000404
 8004e74:	20000300 	.word	0x20000300
 8004e78:	200003bc 	.word	0x200003bc
 8004e7c:	200002fc 	.word	0x200002fc
 8004e80:	20000410 	.word	0x20000410

08004e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <vTaskInternalSetTimeOutState+0x24>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <vTaskInternalSetTimeOutState+0x28>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000414 	.word	0x20000414
 8004eac:	20000400 	.word	0x20000400

08004eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	613b      	str	r3, [r7, #16]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ef2:	f000 fd9f 	bl	8005a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <xTaskCheckForTimeOut+0xbc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d102      	bne.n	8004f16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e023      	b.n	8004f5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <xTaskCheckForTimeOut+0xc0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d007      	beq.n	8004f32 <xTaskCheckForTimeOut+0x82>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e015      	b.n	8004f5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d20b      	bcs.n	8004f54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff9b 	bl	8004e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e004      	b.n	8004f5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f5e:	f000 fd99 	bl	8005a94 <vPortExitCritical>

	return xReturn;
 8004f62:	69fb      	ldr	r3, [r7, #28]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000400 	.word	0x20000400
 8004f70:	20000414 	.word	0x20000414

08004f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <vTaskMissedYield+0x14>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	20000410 	.word	0x20000410

08004f8c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e001      	b.n	8004faa <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8004faa:	68fb      	ldr	r3, [r7, #12]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fe8:	f000 f854 	bl	8005094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <prvIdleTask+0x2c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d907      	bls.n	8005004 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <prvIdleTask+0x30>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005004:	f7fb fad0 	bl	80005a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005008:	e7ee      	b.n	8004fe8 <prvIdleTask+0x8>
 800500a:	bf00      	nop
 800500c:	20000300 	.word	0x20000300
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	e00c      	b.n	800503a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <prvInitialiseTaskLists+0x60>)
 800502c:	4413      	add	r3, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd ff28 	bl	8002e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3301      	adds	r3, #1
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b06      	cmp	r3, #6
 800503e:	d9ef      	bls.n	8005020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005040:	480d      	ldr	r0, [pc, #52]	; (8005078 <prvInitialiseTaskLists+0x64>)
 8005042:	f7fd ff1f 	bl	8002e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005046:	480d      	ldr	r0, [pc, #52]	; (800507c <prvInitialiseTaskLists+0x68>)
 8005048:	f7fd ff1c 	bl	8002e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800504c:	480c      	ldr	r0, [pc, #48]	; (8005080 <prvInitialiseTaskLists+0x6c>)
 800504e:	f7fd ff19 	bl	8002e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005052:	480c      	ldr	r0, [pc, #48]	; (8005084 <prvInitialiseTaskLists+0x70>)
 8005054:	f7fd ff16 	bl	8002e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005058:	480b      	ldr	r0, [pc, #44]	; (8005088 <prvInitialiseTaskLists+0x74>)
 800505a:	f7fd ff13 	bl	8002e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <prvInitialiseTaskLists+0x78>)
 8005060:	4a05      	ldr	r2, [pc, #20]	; (8005078 <prvInitialiseTaskLists+0x64>)
 8005062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <prvInitialiseTaskLists+0x7c>)
 8005066:	4a05      	ldr	r2, [pc, #20]	; (800507c <prvInitialiseTaskLists+0x68>)
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000300 	.word	0x20000300
 8005078:	2000038c 	.word	0x2000038c
 800507c:	200003a0 	.word	0x200003a0
 8005080:	200003bc 	.word	0x200003bc
 8005084:	200003d0 	.word	0x200003d0
 8005088:	200003e8 	.word	0x200003e8
 800508c:	200003b4 	.word	0x200003b4
 8005090:	200003b8 	.word	0x200003b8

08005094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800509a:	e019      	b.n	80050d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800509c:	f000 fcca 	bl	8005a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <prvCheckTasksWaitingTermination+0x50>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fd ff73 	bl	8002f98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <prvCheckTasksWaitingTermination+0x54>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <prvCheckTasksWaitingTermination+0x54>)
 80050ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <prvCheckTasksWaitingTermination+0x58>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <prvCheckTasksWaitingTermination+0x58>)
 80050c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050c6:	f000 fce5 	bl	8005a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f810 	bl	80050f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <prvCheckTasksWaitingTermination+0x58>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e1      	bne.n	800509c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200003d0 	.word	0x200003d0
 80050e8:	200003fc 	.word	0x200003fc
 80050ec:	200003e4 	.word	0x200003e4

080050f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fe8a 	bl	8005e20 <vPortFree>
				vPortFree( pxTCB );
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fe87 	bl	8005e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005112:	e018      	b.n	8005146 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800511a:	2b01      	cmp	r3, #1
 800511c:	d103      	bne.n	8005126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fe7e 	bl	8005e20 <vPortFree>
	}
 8005124:	e00f      	b.n	8005146 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800512c:	2b02      	cmp	r3, #2
 800512e:	d00a      	beq.n	8005146 <prvDeleteTCB+0x56>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <prvDeleteTCB+0x54>
	}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <prvResetNextTaskUnblockTime+0x38>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <prvResetNextTaskUnblockTime+0x3c>)
 8005162:	f04f 32ff 	mov.w	r2, #4294967295
 8005166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005168:	e008      	b.n	800517c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <prvResetNextTaskUnblockTime+0x38>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <prvResetNextTaskUnblockTime+0x3c>)
 800517a:	6013      	str	r3, [r2, #0]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	200003b4 	.word	0x200003b4
 800518c:	2000041c 	.word	0x2000041c

08005190 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <xTaskGetCurrentTaskHandle+0x1c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800519c:	687b      	ldr	r3, [r7, #4]
	}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	200002fc 	.word	0x200002fc

080051b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <xTaskGetSchedulerState+0x34>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051be:	2301      	movs	r3, #1
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	e008      	b.n	80051d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c4:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <xTaskGetSchedulerState+0x38>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051cc:	2302      	movs	r3, #2
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e001      	b.n	80051d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051d6:	687b      	ldr	r3, [r7, #4]
	}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	20000408 	.word	0x20000408
 80051e8:	20000424 	.word	0x20000424

080051ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80ab 	beq.w	800535a <xTaskPriorityInherit+0x16e>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b56      	ldr	r3, [pc, #344]	; (8005364 <xTaskPriorityInherit+0x178>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	f080 809a 	bcs.w	8005348 <xTaskPriorityInherit+0x15c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db06      	blt.n	800522a <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521c:	4b51      	ldr	r3, [pc, #324]	; (8005364 <xTaskPriorityInherit+0x178>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f1c3 0207 	rsb	r2, r3, #7
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6959      	ldr	r1, [r3, #20]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <xTaskPriorityInherit+0x17c>)
 800523c:	4413      	add	r3, r2
 800523e:	4299      	cmp	r1, r3
 8005240:	d14d      	bne.n	80052de <xTaskPriorityInherit+0xf2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd fea6 	bl	8002f98 <uxListRemove>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d115      	bne.n	800527e <xTaskPriorityInherit+0x92>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	4944      	ldr	r1, [pc, #272]	; (8005368 <xTaskPriorityInherit+0x17c>)
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xTaskPriorityInherit+0x92>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	2201      	movs	r2, #1
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43da      	mvns	r2, r3
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <xTaskPriorityInherit+0x180>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	4a3c      	ldr	r2, [pc, #240]	; (800536c <xTaskPriorityInherit+0x180>)
 800527c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800527e:	4b39      	ldr	r3, [pc, #228]	; (8005364 <xTaskPriorityInherit+0x178>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005288:	68b8      	ldr	r0, [r7, #8]
 800528a:	f000 ff0c 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	4b37      	ldr	r3, [pc, #220]	; (8005370 <xTaskPriorityInherit+0x184>)
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	4013      	ands	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <xTaskPriorityInherit+0xc2>
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f000 fef4 	bl	800608c <prvTraceGetTaskNumberLow16>
 80052a4:	4603      	mov	r3, r0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fb2d 	bl	8006908 <prvTraceStoreTaskReady>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	2201      	movs	r2, #1
 80052b4:	409a      	lsls	r2, r3
 80052b6:	4b2d      	ldr	r3, [pc, #180]	; (800536c <xTaskPriorityInherit+0x180>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <xTaskPriorityInherit+0x180>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <xTaskPriorityInherit+0x17c>)
 80052ce:	441a      	add	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fd fe01 	bl	8002ede <vListInsertEnd>
 80052dc:	e004      	b.n	80052e8 <xTaskPriorityInherit+0xfc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052de:	4b21      	ldr	r3, [pc, #132]	; (8005364 <xTaskPriorityInherit+0x178>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80052e8:	68b8      	ldr	r0, [r7, #8]
 80052ea:	f000 fedc 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <xTaskPriorityInherit+0x184>)
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	4013      	ands	r3, r2
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d021      	beq.n	8005342 <xTaskPriorityInherit+0x156>
 80052fe:	68b8      	ldr	r0, [r7, #8]
 8005300:	f000 fec4 	bl	800608c <prvTraceGetTaskNumberLow16>
 8005304:	4603      	mov	r3, r0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461c      	mov	r4, r3
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f000 febe 	bl	800608c <prvTraceGetTaskNumberLow16>
 8005310:	4603      	mov	r3, r0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	2003      	movs	r0, #3
 8005318:	f001 fe4a 	bl	8006fb0 <prvTraceGetPriorityProperty>
 800531c:	4603      	mov	r3, r0
 800531e:	4622      	mov	r2, r4
 8005320:	2103      	movs	r1, #3
 8005322:	208e      	movs	r0, #142	; 0x8e
 8005324:	f001 fc6a 	bl	8006bfc <prvTraceStoreKernelCallWithParam>
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f000 feaf 	bl	800608c <prvTraceGetTaskNumberLow16>
 800532e:	4603      	mov	r3, r0
 8005330:	b2d9      	uxtb	r1, r3
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <xTaskPriorityInherit+0x178>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	2003      	movs	r0, #3
 800533e:	f001 fdfb 	bl	8006f38 <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005342:	2301      	movs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e008      	b.n	800535a <xTaskPriorityInherit+0x16e>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <xTaskPriorityInherit+0x178>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d201      	bcs.n	800535a <xTaskPriorityInherit+0x16e>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800535a:	68fb      	ldr	r3, [r7, #12]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	200002fc 	.word	0x200002fc
 8005368:	20000300 	.word	0x20000300
 800536c:	20000404 	.word	0x20000404
 8005370:	20004e34 	.word	0x20004e34

08005374 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80af 	beq.w	80054ea <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800538c:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <xTaskPriorityDisinherit+0x180>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	429a      	cmp	r2, r3
 8005394:	d00a      	beq.n	80053ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	429a      	cmp	r2, r3
 80053de:	f000 8084 	beq.w	80054ea <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d17f      	bne.n	80054ea <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd fdd2 	bl	8002f98 <uxListRemove>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d115      	bne.n	8005426 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	493e      	ldr	r1, [pc, #248]	; (80054f8 <xTaskPriorityDisinherit+0x184>)
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xTaskPriorityDisinherit+0xb2>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	4b37      	ldr	r3, [pc, #220]	; (80054fc <xTaskPriorityDisinherit+0x188>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	4a36      	ldr	r2, [pc, #216]	; (80054fc <xTaskPriorityDisinherit+0x188>)
 8005424:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f000 fe3d 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <xTaskPriorityDisinherit+0x18c>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <xTaskPriorityDisinherit+0x10a>
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f000 fe25 	bl	800608c <prvTraceGetTaskNumberLow16>
 8005442:	4603      	mov	r3, r0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461c      	mov	r4, r3
 8005448:	6938      	ldr	r0, [r7, #16]
 800544a:	f000 fe1f 	bl	800608c <prvTraceGetTaskNumberLow16>
 800544e:	4603      	mov	r3, r0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	2003      	movs	r0, #3
 8005456:	f001 fdab 	bl	8006fb0 <prvTraceGetPriorityProperty>
 800545a:	4603      	mov	r3, r0
 800545c:	4622      	mov	r2, r4
 800545e:	2103      	movs	r1, #3
 8005460:	208f      	movs	r0, #143	; 0x8f
 8005462:	f001 fbcb 	bl	8006bfc <prvTraceStoreKernelCallWithParam>
 8005466:	6938      	ldr	r0, [r7, #16]
 8005468:	f000 fe10 	bl	800608c <prvTraceGetTaskNumberLow16>
 800546c:	4603      	mov	r3, r0
 800546e:	b2d9      	uxtb	r1, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	2003      	movs	r0, #3
 800547a:	f001 fd5d 	bl	8006f38 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	f1c3 0207 	rsb	r2, r3, #7
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f000 fe07 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8005498:	4603      	mov	r3, r0
 800549a:	461a      	mov	r2, r3
 800549c:	4b18      	ldr	r3, [pc, #96]	; (8005500 <xTaskPriorityDisinherit+0x18c>)
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <xTaskPriorityDisinherit+0x144>
 80054a8:	6938      	ldr	r0, [r7, #16]
 80054aa:	f000 fdef 	bl	800608c <prvTraceGetTaskNumberLow16>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 fa28 	bl	8006908 <prvTraceStoreTaskReady>
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b0e      	ldr	r3, [pc, #56]	; (80054fc <xTaskPriorityDisinherit+0x188>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <xTaskPriorityDisinherit+0x188>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <xTaskPriorityDisinherit+0x184>)
 80054d8:	441a      	add	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7fd fcfc 	bl	8002ede <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054ea:	697b      	ldr	r3, [r7, #20]
	}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd90      	pop	{r4, r7, pc}
 80054f4:	200002fc 	.word	0x200002fc
 80054f8:	20000300 	.word	0x20000300
 80054fc:	20000404 	.word	0x20000404
 8005500:	20004e34 	.word	0x20004e34

08005504 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b089      	sub	sp, #36	; 0x24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005512:	2301      	movs	r3, #1
 8005514:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80c4 	beq.w	80056a6 <vTaskPriorityDisinheritAfterTimeout+0x1a2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d902      	bls.n	800554c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e002      	b.n	8005552 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	429a      	cmp	r2, r3
 800555a:	f000 80a4 	beq.w	80056a6 <vTaskPriorityDisinheritAfterTimeout+0x1a2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	429a      	cmp	r2, r3
 8005566:	f040 809e 	bne.w	80056a6 <vTaskPriorityDisinheritAfterTimeout+0x1a2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800556a:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <vTaskPriorityDisinheritAfterTimeout+0x1ac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	429a      	cmp	r2, r3
 8005572:	d10a      	bne.n	800558a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60bb      	str	r3, [r7, #8]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800558a:	69b8      	ldr	r0, [r7, #24]
 800558c:	f000 fd8b 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <vTaskPriorityDisinheritAfterTimeout+0x1b0>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	4013      	ands	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80055a0:	69b8      	ldr	r0, [r7, #24]
 80055a2:	f000 fd73 	bl	800608c <prvTraceGetTaskNumberLow16>
 80055a6:	4603      	mov	r3, r0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461c      	mov	r4, r3
 80055ac:	69b8      	ldr	r0, [r7, #24]
 80055ae:	f000 fd6d 	bl	800608c <prvTraceGetTaskNumberLow16>
 80055b2:	4603      	mov	r3, r0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	4619      	mov	r1, r3
 80055b8:	2003      	movs	r0, #3
 80055ba:	f001 fcf9 	bl	8006fb0 <prvTraceGetPriorityProperty>
 80055be:	4603      	mov	r3, r0
 80055c0:	4622      	mov	r2, r4
 80055c2:	2103      	movs	r1, #3
 80055c4:	208f      	movs	r0, #143	; 0x8f
 80055c6:	f001 fb19 	bl	8006bfc <prvTraceStoreKernelCallWithParam>
 80055ca:	69b8      	ldr	r0, [r7, #24]
 80055cc:	f000 fd5e 	bl	800608c <prvTraceGetTaskNumberLow16>
 80055d0:	4603      	mov	r3, r0
 80055d2:	b2d9      	uxtb	r1, r3
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	2003      	movs	r0, #3
 80055de:	f001 fcab 	bl	8006f38 <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db04      	blt.n	8005600 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f1c3 0207 	rsb	r2, r3, #7
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6959      	ldr	r1, [r3, #20]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <vTaskPriorityDisinheritAfterTimeout+0x1b4>)
 8005610:	4413      	add	r3, r2
 8005612:	4299      	cmp	r1, r3
 8005614:	d147      	bne.n	80056a6 <vTaskPriorityDisinheritAfterTimeout+0x1a2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd fcbc 	bl	8002f98 <uxListRemove>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d115      	bne.n	8005652 <vTaskPriorityDisinheritAfterTimeout+0x14e>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	4923      	ldr	r1, [pc, #140]	; (80056b8 <vTaskPriorityDisinheritAfterTimeout+0x1b4>)
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <vTaskPriorityDisinheritAfterTimeout+0x14e>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	2201      	movs	r2, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43da      	mvns	r2, r3
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4013      	ands	r3, r2
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 8005650:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005652:	69b8      	ldr	r0, [r7, #24]
 8005654:	f000 fd27 	bl	80060a6 <prvTraceGetTaskNumberHigh16>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <vTaskPriorityDisinheritAfterTimeout+0x1b0>)
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	4013      	ands	r3, r2
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <vTaskPriorityDisinheritAfterTimeout+0x174>
 8005668:	69b8      	ldr	r0, [r7, #24]
 800566a:	f000 fd0f 	bl	800608c <prvTraceGetTaskNumberLow16>
 800566e:	4603      	mov	r3, r0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f948 	bl	8006908 <prvTraceStoreTaskReady>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	2201      	movs	r2, #1
 800567e:	409a      	lsls	r2, r3
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4313      	orrs	r3, r2
 8005686:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <vTaskPriorityDisinheritAfterTimeout+0x1b4>)
 8005698:	441a      	add	r2, r3
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7fd fc1c 	bl	8002ede <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056a6:	bf00      	nop
 80056a8:	3724      	adds	r7, #36	; 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200002fc 	.word	0x200002fc
 80056b4:	20004e34 	.word	0x20004e34
 80056b8:	20000300 	.word	0x20000300
 80056bc:	20000404 	.word	0x20000404

080056c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056c4:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d2:	3201      	adds	r2, #1
 80056d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80056d6:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80056d8:	681b      	ldr	r3, [r3, #0]
	}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	200002fc 	.word	0x200002fc

080056e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f8:	4b28      	ldr	r3, [pc, #160]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fc4a 	bl	8002f98 <uxListRemove>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43da      	mvns	r2, r3
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d10a      	bne.n	8005740 <prvAddCurrentTaskToDelayedList+0x58>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	481a      	ldr	r0, [pc, #104]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800573a:	f7fd fbd0 	bl	8002ede <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800573e:	e026      	b.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d209      	bcs.n	800576c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fd fbde 	bl	8002f26 <vListInsert>
}
 800576a:	e010      	b.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fd fbd4 	bl	8002f26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d202      	bcs.n	800578e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6013      	str	r3, [r2, #0]
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000400 	.word	0x20000400
 800579c:	200002fc 	.word	0x200002fc
 80057a0:	20000404 	.word	0x20000404
 80057a4:	200003e8 	.word	0x200003e8
 80057a8:	200003b8 	.word	0x200003b8
 80057ac:	200003b4 	.word	0x200003b4
 80057b0:	2000041c 	.word	0x2000041c

080057b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b04      	subs	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b04      	subs	r3, #4
 80057d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057e4:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <pxPortInitialiseStack+0x64>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b14      	subs	r3, #20
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f06f 0202 	mvn.w	r2, #2
 8005802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b20      	subs	r3, #32
 8005808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	0800581d 	.word	0x0800581d

0800581c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <prvTaskExitError+0x54>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d00a      	beq.n	8005846 <prvTaskExitError+0x2a>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <prvTaskExitError+0x28>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60bb      	str	r3, [r7, #8]
}
 8005858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800585a:	bf00      	nop
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0fc      	beq.n	800585c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	2000000c 	.word	0x2000000c
	...

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058a8:	4808      	ldr	r0, [pc, #32]	; (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ca:	bf00      	nop
 80058cc:	e000ed08 	.word	0xe000ed08

080058d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058d6:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <xPortStartScheduler+0x140>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4e      	ldr	r2, [pc, #312]	; (8005a14 <xPortStartScheduler+0x144>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x26>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61bb      	str	r3, [r7, #24]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058f6:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <xPortStartScheduler+0x140>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a47      	ldr	r2, [pc, #284]	; (8005a18 <xPortStartScheduler+0x148>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10a      	bne.n	8005916 <xPortStartScheduler+0x46>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	617b      	str	r3, [r7, #20]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005916:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <xPortStartScheduler+0x14c>)
 8005918:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005938:	b2da      	uxtb	r2, r3
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <xPortStartScheduler+0x150>)
 800593c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800593e:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <xPortStartScheduler+0x154>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005944:	e009      	b.n	800595a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <xPortStartScheduler+0x154>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a35      	ldr	r2, [pc, #212]	; (8005a24 <xPortStartScheduler+0x154>)
 800594e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d0ef      	beq.n	8005946 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <xPortStartScheduler+0x154>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1c3 0307 	rsb	r3, r3, #7
 800596e:	2b04      	cmp	r3, #4
 8005970:	d00a      	beq.n	8005988 <xPortStartScheduler+0xb8>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	613b      	str	r3, [r7, #16]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005988:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <xPortStartScheduler+0x154>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1c3 0307 	rsb	r3, r3, #7
 8005990:	2b04      	cmp	r3, #4
 8005992:	d00a      	beq.n	80059aa <xPortStartScheduler+0xda>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60fb      	str	r3, [r7, #12]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059aa:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <xPortStartScheduler+0x154>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <xPortStartScheduler+0x154>)
 80059b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <xPortStartScheduler+0x154>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <xPortStartScheduler+0x154>)
 80059be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059c8:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <xPortStartScheduler+0x158>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <xPortStartScheduler+0x158>)
 80059ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059d4:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <xPortStartScheduler+0x158>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <xPortStartScheduler+0x158>)
 80059da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059e0:	f000 f8dc 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <xPortStartScheduler+0x15c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059ea:	f000 f8fb 	bl	8005be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xPortStartScheduler+0x160>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <xPortStartScheduler+0x160>)
 80059f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059fa:	f7ff ff55 	bl	80058a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059fe:	f7ff f901 	bl	8004c04 <vTaskSwitchContext>
	prvTaskExitError();
 8005a02:	f7ff ff0b 	bl	800581c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	e000ed00 	.word	0xe000ed00
 8005a14:	410fc271 	.word	0x410fc271
 8005a18:	410fc270 	.word	0x410fc270
 8005a1c:	e000e400 	.word	0xe000e400
 8005a20:	20000428 	.word	0x20000428
 8005a24:	2000042c 	.word	0x2000042c
 8005a28:	e000ed20 	.word	0xe000ed20
 8005a2c:	2000000c 	.word	0x2000000c
 8005a30:	e000ef34 	.word	0xe000ef34

08005a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	607b      	str	r3, [r7, #4]
}
 8005a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10f      	bne.n	8005a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <vPortEnterCritical+0x5c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	603b      	str	r3, [r7, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <vPortEnterCritical+0x4a>
	}
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <vPortExitCritical+0x50>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <vPortExitCritical+0x24>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	607b      	str	r3, [r7, #4]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <vPortExitCritical+0x50>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <vPortExitCritical+0x50>)
 8005ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <vPortExitCritical+0x42>
 8005aca:	2300      	movs	r3, #0
 8005acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f383 8811 	msr	BASEPRI, r3
}
 8005ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	2000000c 	.word	0x2000000c
	...

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f01e 0f10 	tst.w	lr, #16
 8005b00:	bf08      	it	eq
 8005b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b14:	f380 8811 	msr	BASEPRI, r0
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f7ff f870 	bl	8004c04 <vTaskSwitchContext>
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f380 8811 	msr	BASEPRI, r0
 8005b2c:	bc09      	pop	{r0, r3}
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	6808      	ldr	r0, [r1, #0]
 8005b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	f01e 0f10 	tst.w	lr, #16
 8005b3a:	bf08      	it	eq
 8005b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b40:	f380 8809 	msr	PSP, r0
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst>:
 8005b50:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7fe ff5d 	bl	8004a30 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <vPortSetupTimerInterrupt+0x44>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010
 8005bd4:	e000e018 	.word	0xe000e018
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	10624dd3 	.word	0x10624dd3
 8005be0:	e000e014 	.word	0xe000e014

08005be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bf4 <vPortEnableVFP+0x10>
 8005be8:	6801      	ldr	r1, [r0, #0]
 8005bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bee:	6001      	str	r1, [r0, #0]
 8005bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed88 	.word	0xe000ed88

08005bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bfe:	f3ef 8305 	mrs	r3, IPSR
 8005c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b0f      	cmp	r3, #15
 8005c08:	d914      	bls.n	8005c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <vPortValidateInterruptPriority+0x70>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <vPortValidateInterruptPriority+0x74>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	7afa      	ldrb	r2, [r7, #11]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d20a      	bcs.n	8005c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	607b      	str	r3, [r7, #4]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <vPortValidateInterruptPriority+0x78>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <vPortValidateInterruptPriority+0x7c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d90a      	bls.n	8005c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	603b      	str	r3, [r7, #0]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <vPortValidateInterruptPriority+0x60>
	}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	e000e3f0 	.word	0xe000e3f0
 8005c6c:	20000428 	.word	0x20000428
 8005c70:	e000ed0c 	.word	0xe000ed0c
 8005c74:	2000042c 	.word	0x2000042c

08005c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c84:	f7fe fe14 	bl	80048b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c88:	4b60      	ldr	r3, [pc, #384]	; (8005e0c <pvPortMalloc+0x194>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c90:	f000 f928 	bl	8005ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c94:	4b5e      	ldr	r3, [pc, #376]	; (8005e10 <pvPortMalloc+0x198>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 808e 	bne.w	8005dbe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01d      	beq.n	8005ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ca8:	2208      	movs	r2, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d069      	beq.n	8005dbe <pvPortMalloc+0x146>
 8005cea:	4b4a      	ldr	r3, [pc, #296]	; (8005e14 <pvPortMalloc+0x19c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d864      	bhi.n	8005dbe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cf4:	4b48      	ldr	r3, [pc, #288]	; (8005e18 <pvPortMalloc+0x1a0>)
 8005cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cf8:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <pvPortMalloc+0x1a0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfe:	e004      	b.n	8005d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <pvPortMalloc+0xa4>
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f1      	bne.n	8005d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <pvPortMalloc+0x194>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d04b      	beq.n	8005dbe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	2308      	movs	r3, #8
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d91f      	bls.n	8005d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <pvPortMalloc+0xf8>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	613b      	str	r3, [r7, #16]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d82:	69b8      	ldr	r0, [r7, #24]
 8005d84:	f000 f910 	bl	8005fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d88:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <pvPortMalloc+0x19c>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <pvPortMalloc+0x19c>)
 8005d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d96:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <pvPortMalloc+0x19c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <pvPortMalloc+0x1a4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d203      	bcs.n	8005daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <pvPortMalloc+0x19c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <pvPortMalloc+0x1a4>)
 8005da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <pvPortMalloc+0x198>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <pvPortMalloc+0x15a>
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	2094      	movs	r0, #148	; 0x94
 8005dcc:	f000 fe00 	bl	80069d0 <vTraceStoreMemMangEvent>
 8005dd0:	e005      	b.n	8005dde <pvPortMalloc+0x166>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	20e8      	movs	r0, #232	; 0xe8
 8005dda:	f000 fdf9 	bl	80069d0 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8005dde:	f7fe fd75 	bl	80048cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <pvPortMalloc+0x18a>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60fb      	str	r3, [r7, #12]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <pvPortMalloc+0x188>
	return pvReturn;
 8005e02:	69fb      	ldr	r3, [r7, #28]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20004038 	.word	0x20004038
 8005e10:	20004044 	.word	0x20004044
 8005e14:	2000403c 	.word	0x2000403c
 8005e18:	20004030 	.word	0x20004030
 8005e1c:	20004040 	.word	0x20004040

08005e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d050      	beq.n	8005ed4 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e32:	2308      	movs	r3, #8
 8005e34:	425b      	negs	r3, r3
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <vPortFree+0xbc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <vPortFree+0x44>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <vPortFree+0x62>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60bb      	str	r3, [r7, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <vPortFree+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d021      	beq.n	8005ed4 <vPortFree+0xb4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11d      	bne.n	8005ed4 <vPortFree+0xb4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <vPortFree+0xbc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ea8:	f7fe fd02 	bl	80048b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <vPortFree+0xc0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <vPortFree+0xc0>)
 8005eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	2096      	movs	r0, #150	; 0x96
 8005ec6:	f000 fd83 	bl	80069d0 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eca:	6938      	ldr	r0, [r7, #16]
 8005ecc:	f000 f86c 	bl	8005fa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ed0:	f7fe fcfc 	bl	80048cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ed4:	bf00      	nop
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20004044 	.word	0x20004044
 8005ee0:	2000403c 	.word	0x2000403c

08005ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <prvHeapInit+0xac>)
 8005ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3307      	adds	r3, #7
 8005f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <prvHeapInit+0xac>)
 8005f14:	4413      	add	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <prvHeapInit+0xb0>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <prvHeapInit+0xb0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f30:	2208      	movs	r2, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <prvHeapInit+0xb4>)
 8005f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <prvHeapInit+0xb4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvHeapInit+0xb4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvHeapInit+0xb4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <prvHeapInit+0xb8>)
 8005f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <prvHeapInit+0xbc>)
 8005f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <prvHeapInit+0xc0>)
 8005f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000430 	.word	0x20000430
 8005f94:	20004030 	.word	0x20004030
 8005f98:	20004038 	.word	0x20004038
 8005f9c:	20004040 	.word	0x20004040
 8005fa0:	2000403c 	.word	0x2000403c
 8005fa4:	20004044 	.word	0x20004044

08005fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fb0:	4b28      	ldr	r3, [pc, #160]	; (8006054 <prvInsertBlockIntoFreeList+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e002      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x14>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d8f7      	bhi.n	8005fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d108      	bne.n	8005fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d118      	bne.n	8006030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d00d      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e008      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e003      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d002      	beq.n	8006046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20004030 	.word	0x20004030
 8006058:	20004038 	.word	0x20004038

0800605c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fd ffe1 	bl	800402c <uxQueueGetQueueNumber>
 800606a:	4603      	mov	r3, r0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fd ffef 	bl	8004060 <ucQueueGetQueueType>
 8006082:	4603      	mov	r3, r0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fe ff79 	bl	8004f8c <uxTaskGetTaskNumber>
 800609a:	4603      	mov	r3, r0
 800609c:	b29b      	uxth	r3, r3
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe ff6c 	bl	8004f8c <uxTaskGetTaskNumber>
 80060b4:	4603      	mov	r3, r0
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	b29b      	uxth	r3, r3
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe ff5c 	bl	8004f8c <uxTaskGetTaskNumber>
 80060d4:	4603      	mov	r3, r0
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	4313      	orrs	r3, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fe ff69 	bl	8004fb8 <vTaskSetTaskNumber>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fe ff46 	bl	8004f8c <uxTaskGetTaskNumber>
 8006100:	4603      	mov	r3, r0
 8006102:	b29a      	uxth	r2, r3
 8006104:	887b      	ldrh	r3, [r7, #2]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	4313      	orrs	r3, r2
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fe ff53 	bl	8004fb8 <vTaskSetTaskNumber>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff9a 	bl	800605c <prvTraceGetQueueNumber>
 8006128:	4603      	mov	r3, r0
 800612a:	b29b      	uxth	r3, r3
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff ff8d 	bl	800605c <prvTraceGetQueueNumber>
 8006142:	4603      	mov	r3, r0
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	b29b      	uxth	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff7d 	bl	800605c <prvTraceGetQueueNumber>
 8006162:	4603      	mov	r3, r0
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	887a      	ldrh	r2, [r7, #2]
 800616a:	4313      	orrs	r3, r2
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fd ff68 	bl	8004044 <vQueueSetQueueNumber>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff67 	bl	800605c <prvTraceGetQueueNumber>
 800618e:	4603      	mov	r3, r0
 8006190:	b29a      	uxth	r2, r3
 8006192:	887b      	ldrh	r3, [r7, #2]
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	4313      	orrs	r3, r2
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fd ff52 	bl	8004044 <vQueueSetQueueNumber>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 80061ac:	f7fe fff0 	bl	8005190 <xTaskGetCurrentTaskHandle>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 80061c0:	f000 fa82 	bl	80066c8 <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d104      	bne.n	80061d4 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 80061ca:	f000 fa49 	bl	8006660 <prvTraceInitTimestamps>
		
		vTraceStart();
 80061ce:	f000 fa29 	bl	8006624 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 80061d2:	e00c      	b.n	80061ee <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d103      	bne.n	80061e2 <vTraceEnable+0x2a>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80061da:	4807      	ldr	r0, [pc, #28]	; (80061f8 <vTraceEnable+0x40>)
 80061dc:	f001 f9e2 	bl	80075a4 <prvTraceError>
}
 80061e0:	e005      	b.n	80061ee <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 80061e8:	4804      	ldr	r0, [pc, #16]	; (80061fc <vTraceEnable+0x44>)
 80061ea:	f001 f9db 	bl	80075a4 <prvTraceError>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08008e88 	.word	0x08008e88
 80061fc:	08008ec8 	.word	0x08008ec8

08006200 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8006204:	4b64      	ldr	r3, [pc, #400]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2209      	movs	r2, #9
 800620a:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 800620c:	4b62      	ldr	r3, [pc, #392]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	220a      	movs	r2, #10
 8006212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8006216:	4b60      	ldr	r3, [pc, #384]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	220a      	movs	r2, #10
 800621c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8006220:	4b5d      	ldr	r3, [pc, #372]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	220a      	movs	r2, #10
 8006226:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800622a:	4b5b      	ldr	r3, [pc, #364]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	220f      	movs	r2, #15
 8006230:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8006234:	4b58      	ldr	r3, [pc, #352]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2205      	movs	r2, #5
 800623a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 800623e:	4b56      	ldr	r3, [pc, #344]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2205      	movs	r2, #5
 8006244:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2205      	movs	r2, #5
 800624e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2205      	movs	r2, #5
 8006258:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 800625c:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2205      	movs	r2, #5
 8006262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8006266:	4b4c      	ldr	r3, [pc, #304]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	220f      	movs	r2, #15
 800626c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8006270:	4b49      	ldr	r3, [pc, #292]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	220f      	movs	r2, #15
 8006276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	220f      	movs	r2, #15
 8006280:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8006284:	4b44      	ldr	r3, [pc, #272]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	220f      	movs	r2, #15
 800628a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 800628e:	4b42      	ldr	r3, [pc, #264]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	220f      	movs	r2, #15
 8006294:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8006298:	4b3f      	ldr	r3, [pc, #252]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	220f      	movs	r2, #15
 800629e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80062a2:	4b3d      	ldr	r3, [pc, #244]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	220f      	movs	r2, #15
 80062a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80062ac:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	220f      	movs	r2, #15
 80062b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80062b6:	4b38      	ldr	r3, [pc, #224]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	220f      	movs	r2, #15
 80062bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 80062c0:	4b35      	ldr	r3, [pc, #212]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2210      	movs	r2, #16
 80062c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 80062ca:	4b33      	ldr	r3, [pc, #204]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 80062d4:	4b30      	ldr	r3, [pc, #192]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2210      	movs	r2, #16
 80062da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80062de:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2213      	movs	r2, #19
 80062e4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80062e8:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2211      	movs	r2, #17
 80062ee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80062f2:	4b29      	ldr	r3, [pc, #164]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2210      	movs	r2, #16
 80062f8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80062fc:	4b26      	ldr	r3, [pc, #152]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2213      	movs	r2, #19
 8006302:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2213      	movs	r2, #19
 800630c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8006310:	4b21      	ldr	r3, [pc, #132]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2213      	movs	r2, #19
 8006316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800631a:	4b1f      	ldr	r3, [pc, #124]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8006324:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	22a0      	movs	r2, #160	; 0xa0
 800632a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 800632e:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006336:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006342:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f240 22fd 	movw	r2, #765	; 0x2fd
 800634e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8006352:	4b11      	ldr	r3, [pc, #68]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f240 3252 	movw	r2, #850	; 0x352
 800635a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 800635e:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006366:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f240 4201 	movw	r2, #1025	; 0x401
 8006372:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800637e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <vTraceInitObjectPropertyTable+0x198>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800638a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20004e38 	.word	0x20004e38

0800639c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80063a6:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	825a      	strh	r2, [r3, #18]
 80063ac:	4b3e      	ldr	r3, [pc, #248]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063ae:	8a5a      	ldrh	r2, [r3, #18]
 80063b0:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063b2:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 80063b4:	4b3c      	ldr	r3, [pc, #240]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063b6:	220a      	movs	r2, #10
 80063b8:	829a      	strh	r2, [r3, #20]
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063bc:	8a9a      	ldrh	r2, [r3, #20]
 80063be:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063c0:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 80063c2:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063c4:	2214      	movs	r2, #20
 80063c6:	82da      	strh	r2, [r3, #22]
 80063c8:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063ca:	8ada      	ldrh	r2, [r3, #22]
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063ce:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 80063d0:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063d2:	221e      	movs	r2, #30
 80063d4:	831a      	strh	r2, [r3, #24]
 80063d6:	4b34      	ldr	r3, [pc, #208]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063d8:	8b1a      	ldrh	r2, [r3, #24]
 80063da:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063dc:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 80063de:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063e0:	222d      	movs	r2, #45	; 0x2d
 80063e2:	835a      	strh	r2, [r3, #26]
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063e6:	8b5a      	ldrh	r2, [r3, #26]
 80063e8:	4b2f      	ldr	r3, [pc, #188]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063ea:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 80063ec:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063ee:	2232      	movs	r2, #50	; 0x32
 80063f0:	839a      	strh	r2, [r3, #28]
 80063f2:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063f4:	8b9a      	ldrh	r2, [r3, #28]
 80063f6:	4b2c      	ldr	r3, [pc, #176]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063f8:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80063fa:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 80063fc:	2237      	movs	r2, #55	; 0x37
 80063fe:	83da      	strh	r2, [r3, #30]
 8006400:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006402:	8bda      	ldrh	r2, [r3, #30]
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006406:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8006408:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 800640a:	223c      	movs	r2, #60	; 0x3c
 800640c:	841a      	strh	r2, [r3, #32]
 800640e:	4b26      	ldr	r3, [pc, #152]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006410:	8c1a      	ldrh	r2, [r3, #32]
 8006412:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006414:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8006416:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006418:	2241      	movs	r2, #65	; 0x41
 800641a:	845a      	strh	r2, [r3, #34]	; 0x22
 800641c:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 800641e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8006420:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006422:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006426:	2209      	movs	r2, #9
 8006428:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800642a:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 800642c:	2213      	movs	r2, #19
 800642e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006432:	221d      	movs	r2, #29
 8006434:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8006436:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006438:	222c      	movs	r2, #44	; 0x2c
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 800643c:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 800643e:	2231      	movs	r2, #49	; 0x31
 8006440:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8006442:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006444:	2236      	movs	r2, #54	; 0x36
 8006446:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 800644a:	223b      	movs	r2, #59	; 0x3b
 800644c:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006450:	2240      	movs	r2, #64	; 0x40
 8006452:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006456:	2245      	movs	r2, #69	; 0x45
 8006458:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	e009      	b.n	8006474 <vTraceInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8006460:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3318      	adds	r3, #24
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	2200      	movs	r2, #0
 800646c:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3301      	adds	r3, #1
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d9f2      	bls.n	8006460 <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e008      	b.n	8006492 <vTraceInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8006480:	4a09      	ldr	r2, [pc, #36]	; (80064a8 <vTraceInitObjectHandleStack+0x10c>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	3348      	adds	r3, #72	; 0x48
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b45      	cmp	r3, #69	; 0x45
 8006496:	d9f3      	bls.n	8006480 <vTraceInitObjectHandleStack+0xe4>
	}
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	2000674c 	.word	0x2000674c

080064ac <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d827      	bhi.n	800650c <pszTraceGetErrorNotEnoughHandles+0x60>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <pszTraceGetErrorNotEnoughHandles+0x18>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006505 	.word	0x08006505
 80064e4:	08006509 	.word	0x08006509
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <pszTraceGetErrorNotEnoughHandles+0x70>)
 80064ea:	e010      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <pszTraceGetErrorNotEnoughHandles+0x74>)
 80064ee:	e00e      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 80064f0:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <pszTraceGetErrorNotEnoughHandles+0x78>)
 80064f2:	e00c      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 80064f6:	e00a      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <pszTraceGetErrorNotEnoughHandles+0x80>)
 80064fa:	e008      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <pszTraceGetErrorNotEnoughHandles+0x84>)
 80064fe:	e006      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8006502:	e004      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8006506:	e002      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <pszTraceGetErrorNotEnoughHandles+0x90>)
 800650a:	e000      	b.n	800650e <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	08008efc 	.word	0x08008efc
 8006520:	08008f44 	.word	0x08008f44
 8006524:	08008f8c 	.word	0x08008f8c
 8006528:	08008fe0 	.word	0x08008fe0
 800652c:	0800902c 	.word	0x0800902c
 8006530:	08009078 	.word	0x08009078
 8006534:	080090c4 	.word	0x080090c4
 8006538:	08009118 	.word	0x08009118
 800653c:	08009170 	.word	0x08009170
 8006540:	080091cc 	.word	0x080091cc

08006544 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 800654e:	4b30      	ldr	r3, [pc, #192]	; (8006610 <uiTraceStart+0xcc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8006556:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <uiTraceStart+0xcc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <uiTraceStart+0x24>
 800655e:	482d      	ldr	r0, [pc, #180]	; (8006614 <uiTraceStart+0xd0>)
 8006560:	f001 f820 	bl	80075a4 <prvTraceError>
 8006564:	2300      	movs	r3, #0
 8006566:	e04e      	b.n	8006606 <uiTraceStart+0xc2>
		return 0;
 8006568:	2300      	movs	r3, #0
 800656a:	e04c      	b.n	8006606 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <uiTraceStart+0xcc>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <uiTraceStart+0x36>
		return 1; /* Already running */
 8006576:	2301      	movs	r3, #1
 8006578:	e045      	b.n	8006606 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <uiTraceStart+0xd4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d13e      	bne.n	8006600 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	60bb      	str	r3, [r7, #8]
  return(result);
 8006588:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	2301      	movs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f383 8810 	msr	PRIMASK, r3
}
 8006596:	bf00      	nop
 8006598:	4b20      	ldr	r3, [pc, #128]	; (800661c <uiTraceStart+0xd8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	4a1f      	ldr	r2, [pc, #124]	; (800661c <uiTraceStart+0xd8>)
 80065a0:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <uiTraceStart+0xcc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 80065aa:	f7ff fdfd 	bl	80061a8 <prvTraceGetCurrentTaskHandle>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fd6b 	bl	800608c <prvTraceGetTaskNumberLow16>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d110      	bne.n	80065e2 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 80065c0:	2003      	movs	r0, #3
 80065c2:	f000 fe51 	bl	8007268 <prvTraceGetObjectHandle>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <uiTraceStart+0xdc>)
 80065ce:	4619      	mov	r1, r3
 80065d0:	2003      	movs	r0, #3
 80065d2:	f000 ff3b 	bl	800744c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	2003      	movs	r0, #3
 80065de:	f000 fcab 	bl	8006f38 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fc35 	bl	8006e54 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <uiTraceStart+0xd8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	4a0a      	ldr	r2, [pc, #40]	; (800661c <uiTraceStart+0xd8>)
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f383 8810 	msr	PRIMASK, r3
}
 80065fe:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <uiTraceStart+0xcc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20004e38 	.word	0x20004e38
 8006614:	080091fc 	.word	0x080091fc
 8006618:	20006744 	.word	0x20006744
 800661c:	2000405c 	.word	0x2000405c
 8006620:	08009240 	.word	0x08009240

08006624 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8006628:	f7ff ff8c 	bl	8006544 <uiTraceStart>
}
 800662c:	bf00      	nop
 800662e:	bd80      	pop	{r7, pc}

08006630 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <vTraceStop+0x28>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <vTraceStop+0x28>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <vTraceStop+0x2c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <vTraceStop+0x2c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4798      	blx	r3
	}
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20004e38 	.word	0x20004e38
 800665c:	20004068 	.word	0x20004068

08006660 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <prvTraceInitTimestamps+0x18>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a04      	ldr	r2, [pc, #16]	; (800667c <prvTraceInitTimestamps+0x1c>)
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e0001004 	.word	0xe0001004
 800667c:	20006748 	.word	0x20006748

08006680 <xTraceRegisterString>:
 *	 ...
 *	 vTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceString xTraceRegisterString(const char* label)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	TRACE_ASSERT(label != NULL, "xTraceRegisterString: label == NULL", (traceString)0);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <xTraceRegisterString+0x18>
 800668e:	480b      	ldr	r0, [pc, #44]	; (80066bc <xTraceRegisterString+0x3c>)
 8006690:	f000 ff88 	bl	80075a4 <prvTraceError>
 8006694:	2300      	movs	r3, #0
 8006696:	e00d      	b.n	80066b4 <xTraceRegisterString+0x34>
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <xTraceRegisterString+0x40>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <xTraceRegisterString+0x2a>
 80066a0:	4808      	ldr	r0, [pc, #32]	; (80066c4 <xTraceRegisterString+0x44>)
 80066a2:	f000 ff7f 	bl	80075a4 <prvTraceError>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e004      	b.n	80066b4 <xTraceRegisterString+0x34>
	return prvTraceOpenSymbol(label, 0);
 80066aa:	2100      	movs	r1, #0
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 ff27 	bl	8007500 <prvTraceOpenSymbol>
 80066b2:	4603      	mov	r3, r0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	08009574 	.word	0x08009574
 80066c0:	20004e38 	.word	0x20004e38
 80066c4:	0800924c 	.word	0x0800924c

080066c8 <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 80066cc:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <vTraceInitialize+0x21c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 8105 	bne.w	80068e0 <vTraceInitialize+0x218>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80066d6:	4b84      	ldr	r3, [pc, #528]	; (80068e8 <vTraceInitialize+0x220>)
 80066d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066dc:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80066de:	4b83      	ldr	r3, [pc, #524]	; (80068ec <vTraceInitialize+0x224>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80066e4:	4b82      	ldr	r3, [pc, #520]	; (80068f0 <vTraceInitialize+0x228>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80066ea:	4b82      	ldr	r3, [pc, #520]	; (80068f4 <vTraceInitialize+0x22c>)
 80066ec:	4a82      	ldr	r2, [pc, #520]	; (80068f8 <vTraceInitialize+0x230>)
 80066ee:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80066f0:	4b82      	ldr	r3, [pc, #520]	; (80068fc <vTraceInitialize+0x234>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a82      	ldr	r2, [pc, #520]	; (8006900 <vTraceInitialize+0x238>)
 80066f6:	6013      	str	r3, [r2, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80066f8:	4b7e      	ldr	r3, [pc, #504]	; (80068f4 <vTraceInitialize+0x22c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f641 1204 	movw	r2, #6404	; 0x1904
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f001 fb48 	bl	8007d98 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8006708:	4b7a      	ldr	r3, [pc, #488]	; (80068f4 <vTraceInitialize+0x22c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8006710:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8006712:	4b78      	ldr	r3, [pc, #480]	; (80068f4 <vTraceInitialize+0x22c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2207      	movs	r2, #7
 8006718:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800671a:	4b76      	ldr	r3, [pc, #472]	; (80068f4 <vTraceInitialize+0x22c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8006722:	4b74      	ldr	r3, [pc, #464]	; (80068f4 <vTraceInitialize+0x22c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f641 1204 	movw	r2, #6404	; 0x1904
 800672a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800672c:	4b71      	ldr	r3, [pc, #452]	; (80068f4 <vTraceInitialize+0x22c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006734:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8006736:	4b6f      	ldr	r3, [pc, #444]	; (80068f4 <vTraceInitialize+0x22c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8006740:	4b6c      	ldr	r3, [pc, #432]	; (80068f4 <vTraceInitialize+0x22c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2200      	movs	r2, #0
 8006746:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8006748:	4b6a      	ldr	r3, [pc, #424]	; (80068f4 <vTraceInitialize+0x22c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2200      	movs	r2, #0
 800674e:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8006750:	f7ff fd56 	bl	8006200 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8006754:	4b67      	ldr	r3, [pc, #412]	; (80068f4 <vTraceInitialize+0x22c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 800675c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8006760:	4b64      	ldr	r3, [pc, #400]	; (80068f4 <vTraceInitialize+0x22c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006768:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 800676c:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <vTraceInitialize+0x22c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8006776:	4b5f      	ldr	r3, [pc, #380]	; (80068f4 <vTraceInitialize+0x22c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 800677e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8006782:	4b5c      	ldr	r3, [pc, #368]	; (80068f4 <vTraceInitialize+0x22c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	2250      	movs	r2, #80	; 0x50
 800678c:	495d      	ldr	r1, [pc, #372]	; (8006904 <vTraceInitialize+0x23c>)
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fe36 	bl	8007400 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8006794:	4b57      	ldr	r3, [pc, #348]	; (80068f4 <vTraceInitialize+0x22c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 800679c:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 80067a0:	4b54      	ldr	r3, [pc, #336]	; (80068f4 <vTraceInitialize+0x22c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067a8:	3318      	adds	r3, #24
 80067aa:	220a      	movs	r2, #10
 80067ac:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 80067ae:	4b51      	ldr	r3, [pc, #324]	; (80068f4 <vTraceInitialize+0x22c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067b6:	3319      	adds	r3, #25
 80067b8:	220b      	movs	r2, #11
 80067ba:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 80067bc:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <vTraceInitialize+0x22c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067c4:	331a      	adds	r3, #26
 80067c6:	220c      	movs	r2, #12
 80067c8:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 80067ca:	4b4a      	ldr	r3, [pc, #296]	; (80068f4 <vTraceInitialize+0x22c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067d2:	331b      	adds	r3, #27
 80067d4:	220d      	movs	r2, #13
 80067d6:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 80067d8:	4b46      	ldr	r3, [pc, #280]	; (80068f4 <vTraceInitialize+0x22c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067e0:	331c      	adds	r3, #28
 80067e2:	2271      	movs	r2, #113	; 0x71
 80067e4:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 80067e6:	4b43      	ldr	r3, [pc, #268]	; (80068f4 <vTraceInitialize+0x22c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067ee:	331d      	adds	r3, #29
 80067f0:	2272      	movs	r2, #114	; 0x72
 80067f2:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 80067f4:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <vTraceInitialize+0x22c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80067fc:	331e      	adds	r3, #30
 80067fe:	2273      	movs	r2, #115	; 0x73
 8006800:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8006802:	4b3c      	ldr	r3, [pc, #240]	; (80068f4 <vTraceInitialize+0x22c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 800680a:	331f      	adds	r3, #31
 800680c:	2274      	movs	r2, #116	; 0x74
 800680e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 8006810:	4b38      	ldr	r3, [pc, #224]	; (80068f4 <vTraceInitialize+0x22c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8006818:	22f1      	movs	r2, #241	; 0xf1
 800681a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 800681c:	4b35      	ldr	r3, [pc, #212]	; (80068f4 <vTraceInitialize+0x22c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8006824:	3301      	adds	r3, #1
 8006826:	22f2      	movs	r2, #242	; 0xf2
 8006828:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 800682a:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <vTraceInitialize+0x22c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8006832:	3302      	adds	r3, #2
 8006834:	22f3      	movs	r2, #243	; 0xf3
 8006836:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 8006838:	4b2e      	ldr	r3, [pc, #184]	; (80068f4 <vTraceInitialize+0x22c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8006840:	3303      	adds	r3, #3
 8006842:	22f4      	movs	r2, #244	; 0xf4
 8006844:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8006846:	f7ff fda9 	bl	800639c <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 800684a:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <vTraceInitialize+0x22c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	22f4      	movs	r2, #244	; 0xf4
 8006850:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8006852:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <vTraceInitialize+0x22c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	22f3      	movs	r2, #243	; 0xf3
 8006858:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800685a:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <vTraceInitialize+0x22c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	22f2      	movs	r2, #242	; 0xf2
 8006860:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <vTraceInitialize+0x22c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	22f1      	movs	r2, #241	; 0xf1
 8006868:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 800686a:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <vTraceInitialize+0x22c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2274      	movs	r2, #116	; 0x74
 8006870:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <vTraceInitialize+0x22c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2273      	movs	r2, #115	; 0x73
 8006878:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <vTraceInitialize+0x22c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2272      	movs	r2, #114	; 0x72
 8006880:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <vTraceInitialize+0x22c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2271      	movs	r2, #113	; 0x71
 8006888:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <vTraceInitialize+0x22c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2204      	movs	r2, #4
 8006890:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <vTraceInitialize+0x22c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2203      	movs	r2, #3
 8006898:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <vTraceInitialize+0x22c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2202      	movs	r2, #2
 80068a0:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80068a2:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <vTraceInitialize+0x22c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <vTraceInitialize+0x228>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <vTraceInitialize+0x20c>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <vTraceInitialize+0x22c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <vTraceInitialize+0x228>)
 80068bc:	6811      	ldr	r1, [r2, #0]
 80068be:	2250      	movs	r2, #80	; 0x50
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fd9d 	bl	8007400 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <vTraceInitialize+0x22c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		vTraceStop();
 80068d0:	f7ff feae 	bl	8006630 <vTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 80068d4:	f001 f9a6 	bl	8007c24 <prvTraceInitCortexM>
#endif

	RecorderInitialized = 1;
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <vTraceInitialize+0x21c>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e000      	b.n	80068e2 <vTraceInitialize+0x21a>
		return;
 80068e0:	bf00      	nop
}
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000406c 	.word	0x2000406c
 80068e8:	20004e34 	.word	0x20004e34
 80068ec:	20006740 	.word	0x20006740
 80068f0:	20006744 	.word	0x20006744
 80068f4:	20004e38 	.word	0x20004e38
 80068f8:	20004e3c 	.word	0x20004e3c
 80068fc:	e0001004 	.word	0xe0001004
 8006900:	20006748 	.word	0x20006748
 8006904:	080095a8 	.word	0x080095a8

08006908 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d04b      	beq.n	80069b0 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8006918:	4b28      	ldr	r3, [pc, #160]	; (80069bc <prvTraceStoreTaskReady+0xb4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d049      	beq.n	80069b4 <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d903      	bls.n	800692e <prvTraceStoreTaskReady+0x26>
 8006926:	4826      	ldr	r0, [pc, #152]	; (80069c0 <prvTraceStoreTaskReady+0xb8>)
 8006928:	f000 fe3c 	bl	80075a4 <prvTraceError>
 800692c:	e043      	b.n	80069b6 <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 800692e:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <prvTraceStoreTaskReady+0xbc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8006936:	4824      	ldr	r0, [pc, #144]	; (80069c8 <prvTraceStoreTaskReady+0xc0>)
 8006938:	f000 fe34 	bl	80075a4 <prvTraceError>
		return;
 800693c:	e03b      	b.n	80069b6 <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693e:	f3ef 8310 	mrs	r3, PRIMASK
 8006942:	60fb      	str	r3, [r7, #12]
  return(result);
 8006944:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	2301      	movs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f383 8810 	msr	PRIMASK, r3
}
 8006952:	bf00      	nop
 8006954:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <prvTraceStoreTaskReady+0xbc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <prvTraceStoreTaskReady+0xbc>)
 800695c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <prvTraceStoreTaskReady+0xc4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d018      	beq.n	800699a <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006968:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800696c:	f000 fefc 	bl	8007768 <prvTraceGetDTS>
 8006970:	4603      	mov	r3, r0
 8006972:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8006978:	f000 fbfa 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 800697c:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	8b7a      	ldrh	r2, [r7, #26]
 800698e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	7e7a      	ldrb	r2, [r7, #25]
 8006994:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8006996:	f000 febf 	bl	8007718 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvTraceStoreTaskReady+0xbc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <prvTraceStoreTaskReady+0xbc>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	e002      	b.n	80069b6 <prvTraceStoreTaskReady+0xae>
		return;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <prvTraceStoreTaskReady+0xae>
		return;
 80069b4:	bf00      	nop
}
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000018 	.word	0x20000018
 80069c0:	080095bc 	.word	0x080095bc
 80069c4:	2000405c 	.word	0x2000405c
 80069c8:	080095fc 	.word	0x080095fc
 80069cc:	20004e38 	.word	0x20004e38

080069d0 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 80069dc:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8084 	beq.w	8006aee <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da03      	bge.n	80069f4 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	425b      	negs	r3, r3
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
 80069f2:	e001      	b.n	80069f8 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f8:	f3ef 8310 	mrs	r3, PRIMASK
 80069fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80069fe:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
 8006a02:	2301      	movs	r3, #1
 8006a04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f383 8810 	msr	PRIMASK, r3
}
 8006a0c:	bf00      	nop
 8006a0e:	4b3b      	ldr	r3, [pc, #236]	; (8006afc <vTraceStoreMemMangEvent+0x12c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	4a39      	ldr	r2, [pc, #228]	; (8006afc <vTraceStoreMemMangEvent+0x12c>)
 8006a16:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d015      	beq.n	8006a4a <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8006a1e:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4b34      	ldr	r3, [pc, #208]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8006a2e:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a34:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d905      	bls.n	8006a4a <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b2d      	ldr	r3, [pc, #180]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8006a4a:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <vTraceStoreMemMangEvent+0x128>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d041      	beq.n	8006ad8 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8006a54:	20ff      	movs	r0, #255	; 0xff
 8006a56:	f000 fe87 	bl	8007768 <prvTraceGetDTS>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8006a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a66:	f000 f953 	bl	8006d10 <prvTraceGetParam>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8006a6e:	f000 fb7f 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006a72:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02e      	beq.n	8006ad8 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a80:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006a8c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006a8e:	f000 fe43 	bl	8007718 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a98:	f000 f93a 	bl	8006d10 <prvTraceGetParam>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8006aa6:	f000 fb63 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006aaa:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d012      	beq.n	8006ad8 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ab6:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006abe:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8006ad4:	f000 fe20 	bl	8007718 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <vTraceStoreMemMangEvent+0x12c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <vTraceStoreMemMangEvent+0x12c>)
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	e000      	b.n	8006af0 <vTraceStoreMemMangEvent+0x120>
		return;
 8006aee:	bf00      	nop
}
 8006af0:	3738      	adds	r7, #56	; 0x38
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20004e38 	.word	0x20004e38
 8006afc:	2000405c 	.word	0x2000405c

08006b00 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2bfe      	cmp	r3, #254	; 0xfe
 8006b12:	d903      	bls.n	8006b1c <prvTraceStoreKernelCall+0x1c>
 8006b14:	4832      	ldr	r0, [pc, #200]	; (8006be0 <prvTraceStoreKernelCall+0xe0>)
 8006b16:	f000 fd45 	bl	80075a4 <prvTraceError>
 8006b1a:	e05d      	b.n	8006bd8 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d903      	bls.n	8006b2a <prvTraceStoreKernelCall+0x2a>
 8006b22:	4830      	ldr	r0, [pc, #192]	; (8006be4 <prvTraceStoreKernelCall+0xe4>)
 8006b24:	f000 fd3e 	bl	80075a4 <prvTraceError>
 8006b28:	e056      	b.n	8006bd8 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <prvTraceStoreKernelCall+0xe8>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	4413      	add	r3, r2
 8006b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d903      	bls.n	8006b46 <prvTraceStoreKernelCall+0x46>
 8006b3e:	482b      	ldr	r0, [pc, #172]	; (8006bec <prvTraceStoreKernelCall+0xec>)
 8006b40:	f000 fd30 	bl	80075a4 <prvTraceError>
 8006b44:	e048      	b.n	8006bd8 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8006b46:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <prvTraceStoreKernelCall+0xf0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8006b4e:	4829      	ldr	r0, [pc, #164]	; (8006bf4 <prvTraceStoreKernelCall+0xf4>)
 8006b50:	f000 fd28 	bl	80075a4 <prvTraceError>
		return;
 8006b54:	e040      	b.n	8006bd8 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8006b56:	4b28      	ldr	r3, [pc, #160]	; (8006bf8 <prvTraceStoreKernelCall+0xf8>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d03b      	beq.n	8006bd6 <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b62:	617b      	str	r3, [r7, #20]
  return(result);
 8006b64:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	2301      	movs	r3, #1
 8006b6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f383 8810 	msr	PRIMASK, r3
}
 8006b72:	bf00      	nop
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <prvTraceStoreKernelCall+0xf0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <prvTraceStoreKernelCall+0xf0>)
 8006b7c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <prvTraceStoreKernelCall+0xe8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01b      	beq.n	8006bc0 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006b88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b8c:	f000 fdec 	bl	8007768 <prvTraceGetDTS>
 8006b90:	4603      	mov	r3, r0
 8006b92:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8006b9a:	f000 fae9 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006b9e:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006baa:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006bba:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8006bbc:	f000 fdac 	bl	8007718 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <prvTraceStoreKernelCall+0xf0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <prvTraceStoreKernelCall+0xf0>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f383 8810 	msr	PRIMASK, r3
}
 8006bd4:	e000      	b.n	8006bd8 <prvTraceStoreKernelCall+0xd8>
		return;
 8006bd6:	bf00      	nop
}
 8006bd8:	3728      	adds	r7, #40	; 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	0800966c 	.word	0x0800966c
 8006be4:	080096a4 	.word	0x080096a4
 8006be8:	20004e38 	.word	0x20004e38
 8006bec:	080096ec 	.word	0x080096ec
 8006bf0:	2000405c 	.word	0x2000405c
 8006bf4:	08009734 	.word	0x08009734
 8006bf8:	20004064 	.word	0x20004064

08006bfc <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2bfe      	cmp	r3, #254	; 0xfe
 8006c10:	d903      	bls.n	8006c1a <prvTraceStoreKernelCallWithParam+0x1e>
 8006c12:	4838      	ldr	r0, [pc, #224]	; (8006cf4 <prvTraceStoreKernelCallWithParam+0xf8>)
 8006c14:	f000 fcc6 	bl	80075a4 <prvTraceError>
 8006c18:	e068      	b.n	8006cec <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d903      	bls.n	8006c28 <prvTraceStoreKernelCallWithParam+0x2c>
 8006c20:	4835      	ldr	r0, [pc, #212]	; (8006cf8 <prvTraceStoreKernelCallWithParam+0xfc>)
 8006c22:	f000 fcbf 	bl	80075a4 <prvTraceError>
 8006c26:	e061      	b.n	8006cec <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8006c28:	4b34      	ldr	r3, [pc, #208]	; (8006cfc <prvTraceStoreKernelCallWithParam+0x100>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d903      	bls.n	8006c44 <prvTraceStoreKernelCallWithParam+0x48>
 8006c3c:	4830      	ldr	r0, [pc, #192]	; (8006d00 <prvTraceStoreKernelCallWithParam+0x104>)
 8006c3e:	f000 fcb1 	bl	80075a4 <prvTraceError>
 8006c42:	e053      	b.n	8006cec <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8006c44:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <prvTraceStoreKernelCallWithParam+0x108>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8006c4c:	482e      	ldr	r0, [pc, #184]	; (8006d08 <prvTraceStoreKernelCallWithParam+0x10c>)
 8006c4e:	f000 fca9 	bl	80075a4 <prvTraceError>
		return;
 8006c52:	e04b      	b.n	8006cec <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c54:	f3ef 8310 	mrs	r3, PRIMASK
 8006c58:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f383 8810 	msr	PRIMASK, r3
}
 8006c68:	bf00      	nop
 8006c6a:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <prvTraceStoreKernelCallWithParam+0x108>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <prvTraceStoreKernelCallWithParam+0x108>)
 8006c72:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <prvTraceStoreKernelCallWithParam+0x100>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d02b      	beq.n	8006cd6 <prvTraceStoreKernelCallWithParam+0xda>
 8006c7e:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <prvTraceStoreKernelCallWithParam+0x110>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d027      	beq.n	8006cd6 <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8006c86:	20ff      	movs	r0, #255	; 0xff
 8006c88:	f000 fd6e 	bl	8007768 <prvTraceGetDTS>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	20ff      	movs	r0, #255	; 0xff
 8006c96:	f000 f83b 	bl	8006d10 <prvTraceGetParam>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8006ca6:	f000 fa63 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006caa:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d011      	beq.n	8006cd6 <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006cb8:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006cc8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006cd0:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006cd2:	f000 fd21 	bl	8007718 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <prvTraceStoreKernelCallWithParam+0x108>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <prvTraceStoreKernelCallWithParam+0x108>)
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	bf00      	nop
}
 8006cec:	3728      	adds	r7, #40	; 0x28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	0800976c 	.word	0x0800976c
 8006cf8:	080097ac 	.word	0x080097ac
 8006cfc:	20004e38 	.word	0x20004e38
 8006d00:	080097fc 	.word	0x080097fc
 8006d04:	2000405c 	.word	0x2000405c
 8006d08:	0800984c 	.word	0x0800984c
 8006d0c:	20004064 	.word	0x20004064

08006d10 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2bff      	cmp	r3, #255	; 0xff
 8006d1e:	d009      	beq.n	8006d34 <prvTraceGetParam+0x24>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <prvTraceGetParam+0x24>
 8006d2a:	4816      	ldr	r0, [pc, #88]	; (8006d84 <prvTraceGetParam+0x74>)
 8006d2c:	f000 fc3a 	bl	80075a4 <prvTraceError>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	e023      	b.n	8006d7c <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d801      	bhi.n	8006d40 <prvTraceGetParam+0x30>
	{
		return param;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	e01d      	b.n	8006d7c <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8006d40:	f000 fa16 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006d44:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d014      	beq.n	8006d76 <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	43da      	mvns	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	43da      	mvns	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006d72:	f000 fcd1 	bl	8007718 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4013      	ands	r3, r2
	}
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08009884 	.word	0x08009884

08006d88 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2bfe      	cmp	r3, #254	; 0xfe
 8006d9a:	d903      	bls.n	8006da4 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8006d9e:	f000 fc01 	bl	80075a4 <prvTraceError>
 8006da2:	e049      	b.n	8006e38 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8006da4:	4b27      	ldr	r3, [pc, #156]	; (8006e44 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8006dac:	4826      	ldr	r0, [pc, #152]	; (8006e48 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8006dae:	f000 fbf9 	bl	80075a4 <prvTraceError>
		return;
 8006db2:	e041      	b.n	8006e38 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db4:	f3ef 8310 	mrs	r3, PRIMASK
 8006db8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dba:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f383 8810 	msr	PRIMASK, r3
}
 8006dc8:	bf00      	nop
 8006dca:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8006dd2:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d021      	beq.n	8006e22 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8006dde:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01d      	beq.n	8006e22 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8006de6:	20ff      	movs	r0, #255	; 0xff
 8006de8:	f000 fcbe 	bl	8007768 <prvTraceGetDTS>
 8006dec:	4603      	mov	r3, r0
 8006dee:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006df6:	f7ff ff8b 	bl	8006d10 <prvTraceGetParam>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8006dfe:	f000 f9b7 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006e02:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	7ffa      	ldrb	r2, [r7, #31]
 8006e0e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e1c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006e1e:	f000 fc7b 	bl	8007718 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f383 8810 	msr	PRIMASK, r3
}
 8006e36:	bf00      	nop
}
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	080098c0 	.word	0x080098c0
 8006e44:	2000405c 	.word	0x2000405c
 8006e48:	08009918 	.word	0x08009918
 8006e4c:	20004e38 	.word	0x20004e38
 8006e50:	20004064 	.word	0x20004064

08006e54 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d903      	bls.n	8006e6c <prvTraceStoreTaskswitch+0x18>
 8006e64:	482f      	ldr	r0, [pc, #188]	; (8006f24 <prvTraceStoreTaskswitch+0xd0>)
 8006e66:	f000 fb9d 	bl	80075a4 <prvTraceError>
 8006e6a:	e058      	b.n	8006f1e <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e72:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	2301      	movs	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f383 8810 	msr	PRIMASK, r3
}
 8006e80:	bf00      	nop
 8006e82:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <prvTraceStoreTaskswitch+0xd4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <prvTraceStoreTaskswitch+0xd4>)
 8006e8a:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8006e8c:	4b27      	ldr	r3, [pc, #156]	; (8006f2c <prvTraceStoreTaskswitch+0xd8>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	79fa      	ldrb	r2, [r7, #7]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d038      	beq.n	8006f08 <prvTraceStoreTaskswitch+0xb4>
 8006e96:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <prvTraceStoreTaskswitch+0xdc>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d033      	beq.n	8006f08 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8006ea0:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <prvTraceStoreTaskswitch+0xe0>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006eaa:	f000 fc5d 	bl	8007768 <prvTraceGetDTS>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8006eb2:	4a1e      	ldr	r2, [pc, #120]	; (8006f2c <prvTraceStoreTaskswitch+0xd8>)
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8006eb8:	4b1c      	ldr	r3, [pc, #112]	; (8006f2c <prvTraceStoreTaskswitch+0xd8>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8006ebe:	f000 f957 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8006ec2:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01e      	beq.n	8006f08 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <prvTraceStoreTaskswitch+0xd8>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	2003      	movs	r0, #3
 8006ed2:	f000 f8e7 	bl	80070a4 <prvTraceGetObjectState>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d103      	bne.n	8006ee4 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2207      	movs	r2, #7
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2206      	movs	r2, #6
 8006ee8:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	8b7a      	ldrh	r2, [r7, #26]
 8006eee:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	7e7a      	ldrb	r2, [r7, #25]
 8006ef4:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <prvTraceStoreTaskswitch+0xd8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2201      	movs	r2, #1
 8006efc:	4619      	mov	r1, r3
 8006efe:	2003      	movs	r0, #3
 8006f00:	f000 f894 	bl	800702c <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8006f04:	f000 fc08 	bl	8007718 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8006f08:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <prvTraceStoreTaskswitch+0xd4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	4a06      	ldr	r2, [pc, #24]	; (8006f28 <prvTraceStoreTaskswitch+0xd4>)
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f383 8810 	msr	PRIMASK, r3
}
 8006f1c:	bf00      	nop
}
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	08009950 	.word	0x08009950
 8006f28:	2000405c 	.word	0x2000405c
 8006f2c:	20004064 	.word	0x20004064
 8006f30:	20004e38 	.word	0x20004e38
 8006f34:	20004048 	.word	0x20004048

08006f38 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	460b      	mov	r3, r1
 8006f44:	71bb      	strb	r3, [r7, #6]
 8006f46:	4613      	mov	r3, r2
 8006f48:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d903      	bls.n	8006f58 <prvTraceSetPriorityProperty+0x20>
 8006f50:	4814      	ldr	r0, [pc, #80]	; (8006fa4 <prvTraceSetPriorityProperty+0x6c>)
 8006f52:	f000 fb27 	bl	80075a4 <prvTraceError>
 8006f56:	e022      	b.n	8006f9e <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <prvTraceSetPriorityProperty+0x70>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f64:	79ba      	ldrb	r2, [r7, #6]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d903      	bls.n	8006f72 <prvTraceSetPriorityProperty+0x3a>
 8006f6a:	4810      	ldr	r0, [pc, #64]	; (8006fac <prvTraceSetPriorityProperty+0x74>)
 8006f6c:	f000 fb1a 	bl	80075a4 <prvTraceError>
 8006f70:	e015      	b.n	8006f9e <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8006f72:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <prvTraceSetPriorityProperty+0x70>)
 8006f74:	681c      	ldr	r4, [r3, #0]
 8006f76:	79fa      	ldrb	r2, [r7, #7]
 8006f78:	79bb      	ldrb	r3, [r7, #6]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f91b 	bl	80071b8 <uiIndexOfObject>
 8006f82:	4603      	mov	r3, r0
 8006f84:	4619      	mov	r1, r3
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <prvTraceSetPriorityProperty+0x70>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f92:	440b      	add	r3, r1
 8006f94:	3301      	adds	r3, #1
 8006f96:	4423      	add	r3, r4
 8006f98:	797a      	ldrb	r2, [r7, #5]
 8006f9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}
 8006fa4:	08009ae4 	.word	0x08009ae4
 8006fa8:	20004e38 	.word	0x20004e38
 8006fac:	08009b30 	.word	0x08009b30

08006fb0 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460a      	mov	r2, r1
 8006fba:	71fb      	strb	r3, [r7, #7]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d904      	bls.n	8006fd0 <prvTraceGetPriorityProperty+0x20>
 8006fc6:	4816      	ldr	r0, [pc, #88]	; (8007020 <prvTraceGetPriorityProperty+0x70>)
 8006fc8:	f000 faec 	bl	80075a4 <prvTraceError>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e022      	b.n	8007016 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8006fd0:	4b14      	ldr	r3, [pc, #80]	; (8007024 <prvTraceGetPriorityProperty+0x74>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fdc:	79ba      	ldrb	r2, [r7, #6]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d904      	bls.n	8006fec <prvTraceGetPriorityProperty+0x3c>
 8006fe2:	4811      	ldr	r0, [pc, #68]	; (8007028 <prvTraceGetPriorityProperty+0x78>)
 8006fe4:	f000 fade 	bl	80075a4 <prvTraceError>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e014      	b.n	8007016 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <prvTraceGetPriorityProperty+0x74>)
 8006fee:	681c      	ldr	r4, [r3, #0]
 8006ff0:	79fa      	ldrb	r2, [r7, #7]
 8006ff2:	79bb      	ldrb	r3, [r7, #6]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f8de 	bl	80071b8 <uiIndexOfObject>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4619      	mov	r1, r3
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <prvTraceGetPriorityProperty+0x74>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	4413      	add	r3, r2
 8007008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800700c:	440b      	add	r3, r1
 800700e:	3301      	adds	r3, #1
 8007010:	4423      	add	r3, r4
 8007012:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	bd90      	pop	{r4, r7, pc}
 800701e:	bf00      	nop
 8007020:	08009b70 	.word	0x08009b70
 8007024:	20004e38 	.word	0x20004e38
 8007028:	08009bbc 	.word	0x08009bbc

0800702c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
 8007036:	460b      	mov	r3, r1
 8007038:	71bb      	strb	r3, [r7, #6]
 800703a:	4613      	mov	r3, r2
 800703c:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d903      	bls.n	800704c <prvTraceSetObjectState+0x20>
 8007044:	4814      	ldr	r0, [pc, #80]	; (8007098 <prvTraceSetObjectState+0x6c>)
 8007046:	f000 faad 	bl	80075a4 <prvTraceError>
 800704a:	e021      	b.n	8007090 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <prvTraceSetObjectState+0x70>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	4413      	add	r3, r2
 8007054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007058:	79ba      	ldrb	r2, [r7, #6]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <prvTraceSetObjectState+0x3a>
 800705e:	4810      	ldr	r0, [pc, #64]	; (80070a0 <prvTraceSetObjectState+0x74>)
 8007060:	f000 faa0 	bl	80075a4 <prvTraceError>
 8007064:	e014      	b.n	8007090 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <prvTraceSetObjectState+0x70>)
 8007068:	681c      	ldr	r4, [r3, #0]
 800706a:	79fa      	ldrb	r2, [r7, #7]
 800706c:	79bb      	ldrb	r3, [r7, #6]
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f8a1 	bl	80071b8 <uiIndexOfObject>
 8007076:	4603      	mov	r3, r0
 8007078:	4619      	mov	r1, r3
 800707a:	4b08      	ldr	r3, [pc, #32]	; (800709c <prvTraceSetObjectState+0x70>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	4413      	add	r3, r2
 8007082:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007086:	440b      	add	r3, r1
 8007088:	4423      	add	r3, r4
 800708a:	797a      	ldrb	r2, [r7, #5]
 800708c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	bd90      	pop	{r4, r7, pc}
 8007096:	bf00      	nop
 8007098:	08009bfc 	.word	0x08009bfc
 800709c:	20004e38 	.word	0x20004e38
 80070a0:	08009c40 	.word	0x08009c40

080070a4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	460a      	mov	r2, r1
 80070ae:	71fb      	strb	r3, [r7, #7]
 80070b0:	4613      	mov	r3, r2
 80070b2:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d904      	bls.n	80070c4 <prvTraceGetObjectState+0x20>
 80070ba:	4815      	ldr	r0, [pc, #84]	; (8007110 <prvTraceGetObjectState+0x6c>)
 80070bc:	f000 fa72 	bl	80075a4 <prvTraceError>
 80070c0:	2300      	movs	r3, #0
 80070c2:	e021      	b.n	8007108 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <prvTraceGetObjectState+0x70>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	4413      	add	r3, r2
 80070cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070d0:	79ba      	ldrb	r2, [r7, #6]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d904      	bls.n	80070e0 <prvTraceGetObjectState+0x3c>
 80070d6:	4810      	ldr	r0, [pc, #64]	; (8007118 <prvTraceGetObjectState+0x74>)
 80070d8:	f000 fa64 	bl	80075a4 <prvTraceError>
 80070dc:	2300      	movs	r3, #0
 80070de:	e013      	b.n	8007108 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <prvTraceGetObjectState+0x70>)
 80070e2:	681c      	ldr	r4, [r3, #0]
 80070e4:	79fa      	ldrb	r2, [r7, #7]
 80070e6:	79bb      	ldrb	r3, [r7, #6]
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f864 	bl	80071b8 <uiIndexOfObject>
 80070f0:	4603      	mov	r3, r0
 80070f2:	4619      	mov	r1, r3
 80070f4:	4b07      	ldr	r3, [pc, #28]	; (8007114 <prvTraceGetObjectState+0x70>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	4413      	add	r3, r2
 80070fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007100:	440b      	add	r3, r1
 8007102:	4423      	add	r3, r4
 8007104:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}
 8007110:	08009c7c 	.word	0x08009c7c
 8007114:	20004e38 	.word	0x20004e38
 8007118:	08009cc0 	.word	0x08009cc0

0800711c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8007126:	4b10      	ldr	r3, [pc, #64]	; (8007168 <prvTraceSetTaskInstanceFinished+0x4c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800712e:	79fa      	ldrb	r2, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <prvTraceSetTaskInstanceFinished+0x20>
 8007134:	480d      	ldr	r0, [pc, #52]	; (800716c <prvTraceSetTaskInstanceFinished+0x50>)
 8007136:	f000 fa35 	bl	80075a4 <prvTraceError>
 800713a:	e011      	b.n	8007160 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <prvTraceSetTaskInstanceFinished+0x4c>)
 800713e:	681c      	ldr	r4, [r3, #0]
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2103      	movs	r1, #3
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f837 	bl	80071b8 <uiIndexOfObject>
 800714a:	4603      	mov	r3, r0
 800714c:	461a      	mov	r2, r3
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <prvTraceSetTaskInstanceFinished+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8007156:	4413      	add	r3, r2
 8007158:	4423      	add	r3, r4
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bd90      	pop	{r4, r7, pc}
 8007166:	bf00      	nop
 8007168:	20004e38 	.word	0x20004e38
 800716c:	08009cfc 	.word	0x08009cfc

08007170 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	e014      	b.n	80071ac <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8007182:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718c:	d304      	bcc.n	8007198 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 800718e:	4809      	ldr	r0, [pc, #36]	; (80071b4 <prvTraceNextFreeEventBufferSlot+0x44>)
 8007190:	f000 fa08 	bl	80075a4 <prvTraceError>
		return NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	e009      	b.n	80071ac <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80071a8:	4413      	add	r3, r2
 80071aa:	3304      	adds	r3, #4
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20004e38 	.word	0x20004e38
 80071b4:	08009d44 	.word	0x08009d44

080071b8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	460a      	mov	r2, r1
 80071c2:	71fb      	strb	r3, [r7, #7]
 80071c4:	4613      	mov	r3, r2
 80071c6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80071c8:	79bb      	ldrb	r3, [r7, #6]
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d904      	bls.n	80071d8 <uiIndexOfObject+0x20>
 80071ce:	4822      	ldr	r0, [pc, #136]	; (8007258 <uiIndexOfObject+0xa0>)
 80071d0:	f000 f9e8 	bl	80075a4 <prvTraceError>
 80071d4:	2300      	movs	r3, #0
 80071d6:	e03a      	b.n	800724e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <uiIndexOfObject+0x38>
 80071de:	4b1f      	ldr	r3, [pc, #124]	; (800725c <uiIndexOfObject+0xa4>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	79bb      	ldrb	r3, [r7, #6]
 80071e4:	4413      	add	r3, r2
 80071e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071ea:	79fa      	ldrb	r2, [r7, #7]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d904      	bls.n	80071fa <uiIndexOfObject+0x42>
 80071f0:	481b      	ldr	r0, [pc, #108]	; (8007260 <uiIndexOfObject+0xa8>)
 80071f2:	f000 f9d7 	bl	80075a4 <prvTraceError>
 80071f6:	2300      	movs	r3, #0
 80071f8:	e029      	b.n	800724e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80071fa:	79bb      	ldrb	r3, [r7, #6]
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d822      	bhi.n	8007246 <uiIndexOfObject+0x8e>
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01f      	beq.n	8007246 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <uiIndexOfObject+0xa4>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	79bb      	ldrb	r3, [r7, #6]
 800720c:	4413      	add	r3, r2
 800720e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8007212:	79fa      	ldrb	r2, [r7, #7]
 8007214:	429a      	cmp	r2, r3
 8007216:	d816      	bhi.n	8007246 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8007218:	4b10      	ldr	r3, [pc, #64]	; (800725c <uiIndexOfObject+0xa4>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	79bb      	ldrb	r3, [r7, #6]
 800721e:	3338      	adds	r3, #56	; 0x38
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <uiIndexOfObject+0xa4>)
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	79bb      	ldrb	r3, [r7, #6]
 800722c:	440b      	add	r3, r1
 800722e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8007232:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8007238:	b29b      	uxth	r3, r3
 800723a:	fb11 f303 	smulbb	r3, r1, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	4413      	add	r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	e003      	b.n	800724e <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8007246:	4807      	ldr	r0, [pc, #28]	; (8007264 <uiIndexOfObject+0xac>)
 8007248:	f000 f9ac 	bl	80075a4 <prvTraceError>
	return 0;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	08009d6c 	.word	0x08009d6c
 800725c:	20004e38 	.word	0x20004e38
 8007260:	08009dac 	.word	0x08009dac
 8007264:	08009dec 	.word	0x08009dec

08007268 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8007272:	4b4e      	ldr	r3, [pc, #312]	; (80073ac <prvTraceGetObjectHandle+0x144>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <prvTraceGetObjectHandle+0x1c>
 800727a:	484d      	ldr	r0, [pc, #308]	; (80073b0 <prvTraceGetObjectHandle+0x148>)
 800727c:	f000 f992 	bl	80075a4 <prvTraceError>
 8007280:	2300      	movs	r3, #0
 8007282:	e08f      	b.n	80073a4 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d904      	bls.n	8007294 <prvTraceGetObjectHandle+0x2c>
 800728a:	484a      	ldr	r0, [pc, #296]	; (80073b4 <prvTraceGetObjectHandle+0x14c>)
 800728c:	f000 f98a 	bl	80075a4 <prvTraceError>
 8007290:	2300      	movs	r3, #0
 8007292:	e087      	b.n	80073a4 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007294:	f3ef 8310 	mrs	r3, PRIMASK
 8007298:	60fb      	str	r3, [r7, #12]
  return(result);
 800729a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	2301      	movs	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	bf00      	nop
 80072aa:	4b43      	ldr	r3, [pc, #268]	; (80073b8 <prvTraceGetObjectHandle+0x150>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	4a41      	ldr	r2, [pc, #260]	; (80073b8 <prvTraceGetObjectHandle+0x150>)
 80072b2:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	4a41      	ldr	r2, [pc, #260]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 80072b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072bc:	461a      	mov	r2, r3
 80072be:	4b40      	ldr	r3, [pc, #256]	; (80073c0 <prvTraceGetObjectHandle+0x158>)
 80072c0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80072c2:	4b3f      	ldr	r3, [pc, #252]	; (80073c0 <prvTraceGetObjectHandle+0x158>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a3d      	ldr	r2, [pc, #244]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 80072c8:	4413      	add	r3, r2
 80072ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d114      	bne.n	80072fc <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80072d2:	4b3b      	ldr	r3, [pc, #236]	; (80073c0 <prvTraceGetObjectHandle+0x158>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	4938      	ldr	r1, [pc, #224]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 80072dc:	3308      	adds	r3, #8
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	440b      	add	r3, r1
 80072e2:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80072ea:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <prvTraceGetObjectHandle+0x158>)
 80072ec:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80072ee:	3201      	adds	r2, #1
 80072f0:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80072f2:	4a32      	ldr	r2, [pc, #200]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 80072f4:	4413      	add	r3, r2
 80072f6:	460a      	mov	r2, r1
 80072f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80072fc:	4b30      	ldr	r3, [pc, #192]	; (80073c0 <prvTraceGetObjectHandle+0x158>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2e      	ldr	r2, [pc, #184]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007302:	4413      	add	r3, r2
 8007304:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007308:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	4a2b      	ldr	r2, [pc, #172]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 800730e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	4929      	ldr	r1, [pc, #164]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007316:	3310      	adds	r3, #16
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	440b      	add	r3, r1
 800731c:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800731e:	429a      	cmp	r2, r3
 8007320:	d90a      	bls.n	8007338 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff f8c1 	bl	80064ac <pszTraceGetErrorNotEnoughHandles>
 800732a:	4603      	mov	r3, r0
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f939 	bl	80075a4 <prvTraceError>
		handle = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e029      	b.n	800738c <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	4a20      	ldr	r2, [pc, #128]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 800733c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007340:	3201      	adds	r2, #1
 8007342:	b291      	uxth	r1, r2
 8007344:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007346:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 800734e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007352:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	4a19      	ldr	r2, [pc, #100]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007358:	3308      	adds	r3, #8
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8007360:	1acb      	subs	r3, r1, r3
 8007362:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	4a15      	ldr	r2, [pc, #84]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007368:	3318      	adds	r3, #24
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	88db      	ldrh	r3, [r3, #6]
 8007370:	461a      	mov	r2, r3
		if (hndCount >
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4293      	cmp	r3, r2
 8007376:	dd09      	ble.n	800738c <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800737c:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 800737e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8007380:	4a0e      	ldr	r2, [pc, #56]	; (80073bc <prvTraceGetObjectHandle+0x154>)
 8007382:	3318      	adds	r3, #24
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	4413      	add	r3, r2
 8007388:	460a      	mov	r2, r1
 800738a:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <prvTraceGetObjectHandle+0x150>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3b01      	subs	r3, #1
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <prvTraceGetObjectHandle+0x150>)
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f383 8810 	msr	PRIMASK, r3
}
 80073a0:	bf00      	nop

	return handle;
 80073a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20004e38 	.word	0x20004e38
 80073b0:	0800924c 	.word	0x0800924c
 80073b4:	08009e2c 	.word	0x08009e2c
 80073b8:	2000405c 	.word	0x2000405c
 80073bc:	2000674c 	.word	0x2000674c
 80073c0:	20004070 	.word	0x20004070

080073c4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	460a      	mov	r2, r1
 80073ce:	71fb      	strb	r3, [r7, #7]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80073d4:	79fa      	ldrb	r2, [r7, #7]
 80073d6:	79bb      	ldrb	r3, [r7, #6]
 80073d8:	4611      	mov	r1, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff feec 	bl	80071b8 <uiIndexOfObject>
 80073e0:	4603      	mov	r3, r0
 80073e2:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <prvMarkObjectAsUsed+0x38>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	89fb      	ldrh	r3, [r7, #14]
 80073ea:	4413      	add	r3, r2
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20004e38 	.word	0x20004e38

08007400 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e010      	b.n	8007434 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	441a      	add	r2, r3
 8007418:	68f9      	ldr	r1, [r7, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	440b      	add	r3, r1
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4413      	add	r3, r2
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3301      	adds	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d3ea      	bcc.n	8007412 <prvStrncpy+0x12>
			break;
	}
}
 800743c:	e000      	b.n	8007440 <prvStrncpy+0x40>
			break;
 800743e:	bf00      	nop
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	603a      	str	r2, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
 8007458:	460b      	mov	r3, r1
 800745a:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <prvTraceSetObjectName+0x1a>
	{
		name = "";
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <prvTraceSetObjectName+0x9c>)
 8007464:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d903      	bls.n	8007474 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800746c:	481f      	ldr	r0, [pc, #124]	; (80074ec <prvTraceSetObjectName+0xa0>)
 800746e:	f000 f899 	bl	80075a4 <prvTraceError>
		return;
 8007472:	e036      	b.n	80074e2 <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 8007474:	79bb      	ldrb	r3, [r7, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 800747a:	481d      	ldr	r0, [pc, #116]	; (80074f0 <prvTraceSetObjectName+0xa4>)
 800747c:	f000 f892 	bl	80075a4 <prvTraceError>
		return;
 8007480:	e02f      	b.n	80074e2 <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <prvTraceSetObjectName+0xa8>)
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	4413      	add	r3, r2
 800748a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800748e:	79ba      	ldrb	r2, [r7, #6]
 8007490:	429a      	cmp	r2, r3
 8007492:	d908      	bls.n	80074a6 <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff f808 	bl	80064ac <pszTraceGetErrorNotEnoughHandles>
 800749c:	4603      	mov	r3, r0
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f880 	bl	80075a4 <prvTraceError>
 80074a4:	e01d      	b.n	80074e2 <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80074a6:	79fa      	ldrb	r2, [r7, #7]
 80074a8:	79bb      	ldrb	r3, [r7, #6]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fe83 	bl	80071b8 <uiIndexOfObject>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <prvTraceSetObjectName+0xac>)
 80074b8:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <prvTraceSetObjectName+0xb0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <prvTraceSetObjectName+0xa8>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvTraceSetObjectName+0xac>)
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	3388      	adds	r3, #136	; 0x88
 80074cc:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <prvTraceSetObjectName+0xa8>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	4413      	add	r3, r2
 80074d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80074da:	461a      	mov	r2, r3
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	f7ff ff8f 	bl	8007400 <prvStrncpy>
		}
	}
}
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	08009f30 	.word	0x08009f30
 80074ec:	08009f34 	.word	0x08009f34
 80074f0:	08009f64 	.word	0x08009f64
 80074f4:	20004e38 	.word	0x20004e38
 80074f8:	20004074 	.word	0x20004074
 80074fc:	20006744 	.word	0x20006744

08007500 <prvTraceOpenSymbol>:

traceString prvTraceOpenSymbol(const char* name, traceString userEventChannel)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d104      	bne.n	8007524 <prvTraceOpenSymbol+0x24>
 800751a:	4820      	ldr	r0, [pc, #128]	; (800759c <prvTraceOpenSymbol+0x9c>)
 800751c:	f000 f842 	bl	80075a4 <prvTraceError>
 8007520:	2300      	movs	r3, #0
 8007522:	e036      	b.n	8007592 <prvTraceOpenSymbol+0x92>

	prvTraceGetChecksum(name, &crc, &len);
 8007524:	f107 020b 	add.w	r2, r7, #11
 8007528:	f107 030a 	add.w	r3, r7, #10
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fb32 	bl	8007b98 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007534:	f3ef 8310 	mrs	r3, PRIMASK
 8007538:	613b      	str	r3, [r7, #16]
  return(result);
 800753a:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	2301      	movs	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f383 8810 	msr	PRIMASK, r3
}
 8007548:	bf00      	nop
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <prvTraceOpenSymbol+0xa0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <prvTraceOpenSymbol+0xa0>)
 8007552:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8007554:	7ab9      	ldrb	r1, [r7, #10]
 8007556:	7afa      	ldrb	r2, [r7, #11]
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9dc 	bl	8007918 <prvTraceLookupSymbolTableEntry>
 8007560:	4603      	mov	r3, r0
 8007562:	83fb      	strh	r3, [r7, #30]
	if (!result)
 8007564:	8bfb      	ldrh	r3, [r7, #30]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <prvTraceOpenSymbol+0x7a>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 800756a:	7ab9      	ldrb	r1, [r7, #10]
 800756c:	7afa      	ldrb	r2, [r7, #11]
 800756e:	887b      	ldrh	r3, [r7, #2]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa4f 	bl	8007a14 <prvTraceCreateSymbolTableEntry>
 8007576:	4603      	mov	r3, r0
 8007578:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <prvTraceOpenSymbol+0xa0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <prvTraceOpenSymbol+0xa0>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f383 8810 	msr	PRIMASK, r3
}
 800758e:	bf00      	nop

	return result;
 8007590:	8bfb      	ldrh	r3, [r7, #30]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	08009f94 	.word	0x08009f94
 80075a0:	2000405c 	.word	0x2000405c

080075a4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <prvTraceError+0x50>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <prvTraceError+0x14>
	{
		vTraceStop();
 80075b4:	f7ff f83c 	bl	8006630 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <prvTraceError+0x54>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d115      	bne.n	80075ec <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80075c0:	4a0d      	ldr	r2, [pc, #52]	; (80075f8 <prvTraceError+0x54>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <prvTraceError+0x50>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <prvTraceError+0x50>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <prvTraceError+0x54>)
 80075d8:	6811      	ldr	r1, [r2, #0]
 80075da:	2250      	movs	r2, #80	; 0x50
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff0f 	bl	8007400 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80075e2:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <prvTraceError+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20004e38 	.word	0x20004e38
 80075f8:	20006744 	.word	0x20006744

080075fc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d175      	bne.n	8007700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 8007614:	483e      	ldr	r0, [pc, #248]	; (8007710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 8007616:	f7ff ffc5 	bl	80075a4 <prvTraceError>
 800761a:	e075      	b.n	8007708 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 800761c:	4b3d      	ldr	r3, [pc, #244]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8007628:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8007636:	2b98      	cmp	r3, #152	; 0x98
 8007638:	d929      	bls.n	800768e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800763a:	4b36      	ldr	r3, [pc, #216]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8007648:	2ba7      	cmp	r3, #167	; 0xa7
 800764a:	d820      	bhi.n	800768e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800764c:	4b31      	ldr	r3, [pc, #196]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800765a:	3368      	adds	r3, #104	; 0x68
 800765c:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800765e:	7bfa      	ldrb	r2, [r7, #15]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	441a      	add	r2, r3
 8007664:	4b2b      	ldr	r3, [pc, #172]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	429a      	cmp	r2, r3
 800766c:	d244      	bcs.n	80076f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800767a:	4413      	add	r3, r2
 800767c:	1d18      	adds	r0, r3, #4
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	3301      	adds	r3, #1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	461a      	mov	r2, r3
 8007686:	2100      	movs	r1, #0
 8007688:	f000 fb86 	bl	8007d98 <memset>
		{
 800768c:	e034      	b.n	80076f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800769c:	2b01      	cmp	r3, #1
 800769e:	d12c      	bne.n	80076fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d20d      	bcs.n	80076ca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80076ae:	4b19      	ldr	r3, [pc, #100]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	2208      	movs	r2, #8
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fb68 	bl	8007d98 <memset>
 80076c8:	e017      	b.n	80076fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f603 1354 	addw	r3, r3, #2388	; 0x954
 80076d2:	2204      	movs	r2, #4
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fb5e 	bl	8007d98 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80076e8:	4413      	add	r3, r2
 80076ea:	3304      	adds	r3, #4
 80076ec:	2204      	movs	r2, #4
 80076ee:	2100      	movs	r1, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fb51 	bl	8007d98 <memset>
 80076f6:	e000      	b.n	80076fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 80076f8:	bf00      	nop
			}
		}
		i++;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	3301      	adds	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	429a      	cmp	r2, r3
 8007706:	d389      	bcc.n	800761c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	08009fc4 	.word	0x08009fc4
 8007714:	20004e38 	.word	0x20004e38

08007718 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 800771c:	4b11      	ldr	r3, [pc, #68]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01b      	beq.n	800775e <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	3201      	adds	r2, #1
 800772e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8007730:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	3201      	adds	r2, #1
 8007738:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800773a:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007744:	d307      	bcc.n	8007756 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2201      	movs	r2, #1
 800774c:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <prvTraceUpdateCounters+0x4c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8007756:	2001      	movs	r0, #1
 8007758:	f7ff ff50 	bl	80075fc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800775c:	e000      	b.n	8007760 <prvTraceUpdateCounters+0x48>
		return;
 800775e:	bf00      	nop
#endif
}
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20004e38 	.word	0x20004e38

08007768 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	2bff      	cmp	r3, #255	; 0xff
 8007782:	d009      	beq.n	8007798 <prvTraceGetDTS+0x30>
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <prvTraceGetDTS+0x30>
 800778e:	485a      	ldr	r0, [pc, #360]	; (80078f8 <prvTraceGetDTS+0x190>)
 8007790:	f7ff ff08 	bl	80075a4 <prvTraceError>
 8007794:	2300      	movs	r3, #0
 8007796:	e0ab      	b.n	80078f0 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8007798:	4b58      	ldr	r3, [pc, #352]	; (80078fc <prvTraceGetDTS+0x194>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d116      	bne.n	80077d0 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 80077a2:	4b57      	ldr	r3, [pc, #348]	; (8007900 <prvTraceGetDTS+0x198>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d006      	beq.n	80077b8 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80077aa:	4b55      	ldr	r3, [pc, #340]	; (8007900 <prvTraceGetDTS+0x198>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b53      	ldr	r3, [pc, #332]	; (80078fc <prvTraceGetDTS+0x194>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	0892      	lsrs	r2, r2, #2
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24
 80077b6:	e00b      	b.n	80077d0 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80077b8:	4b52      	ldr	r3, [pc, #328]	; (8007904 <prvTraceGetDTS+0x19c>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b52      	ldr	r3, [pc, #328]	; (8007908 <prvTraceGetDTS+0x1a0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d005      	beq.n	80077d0 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80077c4:	4b51      	ldr	r3, [pc, #324]	; (800790c <prvTraceGetDTS+0x1a4>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	4b4c      	ldr	r3, [pc, #304]	; (80078fc <prvTraceGetDTS+0x194>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	0892      	lsrs	r2, r2, #2
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa5d 	bl	8007c94 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <prvTraceGetDTS+0x1a8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a4a      	ldr	r2, [pc, #296]	; (8007910 <prvTraceGetDTS+0x1a8>)
 80077e8:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 80077ea:	4b44      	ldr	r3, [pc, #272]	; (80078fc <prvTraceGetDTS+0x194>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d043      	beq.n	800787c <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80077f4:	4b41      	ldr	r3, [pc, #260]	; (80078fc <prvTraceGetDTS+0x194>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d91d      	bls.n	800783c <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8007800:	4b3e      	ldr	r3, [pc, #248]	; (80078fc <prvTraceGetDTS+0x194>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007806:	4b3d      	ldr	r3, [pc, #244]	; (80078fc <prvTraceGetDTS+0x194>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007812:	4b3a      	ldr	r3, [pc, #232]	; (80078fc <prvTraceGetDTS+0x194>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	440a      	add	r2, r1
 8007818:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800781a:	4b38      	ldr	r3, [pc, #224]	; (80078fc <prvTraceGetDTS+0x194>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <prvTraceGetDTS+0x194>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	fbb3 f0f2 	udiv	r0, r3, r2
 800782c:	fb02 f200 	mul.w	r2, r2, r0
 8007830:	1a9a      	subs	r2, r3, r2
 8007832:	4b32      	ldr	r3, [pc, #200]	; (80078fc <prvTraceGetDTS+0x194>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	440a      	add	r2, r1
 8007838:	629a      	str	r2, [r3, #40]	; 0x28
 800783a:	e007      	b.n	800784c <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800783c:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <prvTraceGetDTS+0x194>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007842:	4b2e      	ldr	r3, [pc, #184]	; (80078fc <prvTraceGetDTS+0x194>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	440a      	add	r2, r1
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800784c:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <prvTraceGetDTS+0x194>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007852:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <prvTraceGetDTS+0x194>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	429a      	cmp	r2, r3
 800785a:	d313      	bcc.n	8007884 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800785c:	4b27      	ldr	r3, [pc, #156]	; (80078fc <prvTraceGetDTS+0x194>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007862:	3201      	adds	r2, #1
 8007864:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8007866:	4b25      	ldr	r3, [pc, #148]	; (80078fc <prvTraceGetDTS+0x194>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800786c:	4b23      	ldr	r3, [pc, #140]	; (80078fc <prvTraceGetDTS+0x194>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007872:	4b22      	ldr	r3, [pc, #136]	; (80078fc <prvTraceGetDTS+0x194>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	1a8a      	subs	r2, r1, r2
 8007878:	629a      	str	r2, [r3, #40]	; 0x28
 800787a:	e003      	b.n	8007884 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800787c:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <prvTraceGetDTS+0x194>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d92c      	bls.n	80078e6 <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800788c:	f7ff fc70 	bl	8007170 <prvTraceNextFreeEventBufferSlot>
 8007890:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d026      	beq.n	80078e6 <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10b      	bne.n	80078ba <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	22a9      	movs	r2, #169	; 0xa9
 80078a6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	705a      	strb	r2, [r3, #1]
 80078b8:	e013      	b.n	80078e2 <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2bff      	cmp	r3, #255	; 0xff
 80078be:	d10d      	bne.n	80078dc <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	22a8      	movs	r2, #168	; 0xa8
 80078c4:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	0e1b      	lsrs	r3, r3, #24
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	705a      	strb	r2, [r3, #1]
 80078da:	e002      	b.n	80078e2 <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80078dc:	480d      	ldr	r0, [pc, #52]	; (8007914 <prvTraceGetDTS+0x1ac>)
 80078de:	f7ff fe61 	bl	80075a4 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80078e2:	f7ff ff19 	bl	8007718 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	4013      	ands	r3, r2
 80078ee:	b29b      	uxth	r3, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	0800a01c 	.word	0x0800a01c
 80078fc:	20004e38 	.word	0x20004e38
 8007900:	20004060 	.word	0x20004060
 8007904:	e0001004 	.word	0xe0001004
 8007908:	20006748 	.word	0x20006748
 800790c:	20000000 	.word	0x20000000
 8007910:	20004078 	.word	0x20004078
 8007914:	0800a05c 	.word	0x0800a05c

08007918 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceString prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceString chn)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4603      	mov	r3, r0
 8007928:	70fb      	strb	r3, [r7, #3]
 800792a:	460b      	mov	r3, r1
 800792c:	70bb      	strb	r3, [r7, #2]
 800792e:	4613      	mov	r3, r2
 8007930:	803b      	strh	r3, [r7, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	889b      	ldrh	r3, [r3, #4]
 8007942:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceString)0);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <prvTraceLookupSymbolTableEntry+0x3c>
 800794a:	4830      	ldr	r0, [pc, #192]	; (8007a0c <prvTraceLookupSymbolTableEntry+0xf4>)
 800794c:	f7ff fe2a 	bl	80075a4 <prvTraceError>
 8007950:	2300      	movs	r3, #0
 8007952:	e054      	b.n	80079fe <prvTraceLookupSymbolTableEntry+0xe6>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8007954:	78bb      	ldrb	r3, [r7, #2]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d14b      	bne.n	80079f2 <prvTraceLookupSymbolTableEntry+0xda>
 800795a:	482d      	ldr	r0, [pc, #180]	; (8007a10 <prvTraceLookupSymbolTableEntry+0xf8>)
 800795c:	f7ff fe22 	bl	80075a4 <prvTraceError>
 8007960:	2300      	movs	r3, #0
 8007962:	e04c      	b.n	80079fe <prvTraceLookupSymbolTableEntry+0xe6>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8007964:	4b28      	ldr	r3, [pc, #160]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	3302      	adds	r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8007972:	461a      	mov	r2, r3
 8007974:	883b      	ldrh	r3, [r7, #0]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	429a      	cmp	r2, r3
 800797a:	d127      	bne.n	80079cc <prvTraceLookupSymbolTableEntry+0xb4>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 800797c:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	89fb      	ldrh	r3, [r7, #14]
 8007982:	3303      	adds	r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800798a:	b29a      	uxth	r2, r3
 800798c:	883b      	ldrh	r3, [r7, #0]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	b29b      	uxth	r3, r3
 8007992:	429a      	cmp	r2, r3
 8007994:	d11a      	bne.n	80079cc <prvTraceLookupSymbolTableEntry+0xb4>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8007996:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	89fb      	ldrh	r3, [r7, #14]
 800799c:	1d19      	adds	r1, r3, #4
 800799e:	78bb      	ldrb	r3, [r7, #2]
 80079a0:	440b      	add	r3, r1
 80079a2:	4413      	add	r3, r2
 80079a4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10f      	bne.n	80079cc <prvTraceLookupSymbolTableEntry+0xb4>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	89fb      	ldrh	r3, [r7, #14]
 80079b2:	3304      	adds	r3, #4
 80079b4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	78ba      	ldrb	r2, [r7, #2]
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fa7f 	bl	8007ec4 <strncmp>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d016      	beq.n	80079fa <prvTraceLookupSymbolTableEntry+0xe2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	89fb      	ldrh	r3, [r7, #14]
 80079d2:	4413      	add	r3, r2
 80079d4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80079d8:	b29a      	uxth	r2, r3
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <prvTraceLookupSymbolTableEntry+0xf0>)
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	89fb      	ldrh	r3, [r7, #14]
 80079e0:	3301      	adds	r3, #1
 80079e2:	440b      	add	r3, r1
 80079e4:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4413      	add	r3, r2
 80079f0:	81fb      	strh	r3, [r7, #14]
	while (i != 0)
 80079f2:	89fb      	ldrh	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1b5      	bne.n	8007964 <prvTraceLookupSymbolTableEntry+0x4c>
 80079f8:	e000      	b.n	80079fc <prvTraceLookupSymbolTableEntry+0xe4>
						break; /* found */
 80079fa:	bf00      	nop
	}
	return i;
 80079fc:	89fb      	ldrh	r3, [r7, #14]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20004e38 	.word	0x20004e38
 8007a0c:	0800a080 	.word	0x0800a080
 8007a10:	0800a0bc 	.word	0x0800a0bc

08007a14 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceString channel)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	70fb      	strb	r3, [r7, #3]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70bb      	strb	r3, [r7, #2]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	803b      	strh	r3, [r7, #0]
	uint16_t ret = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <prvTraceCreateSymbolTableEntry+0x2e>
 8007a38:	4853      	ldr	r0, [pc, #332]	; (8007b88 <prvTraceCreateSymbolTableEntry+0x174>)
 8007a3a:	f7ff fdb3 	bl	80075a4 <prvTraceError>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e09e      	b.n	8007b80 <prvTraceCreateSymbolTableEntry+0x16c>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 8007a42:	78bb      	ldrb	r3, [r7, #2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <prvTraceCreateSymbolTableEntry+0x3e>
 8007a48:	4850      	ldr	r0, [pc, #320]	; (8007b8c <prvTraceCreateSymbolTableEntry+0x178>)
 8007a4a:	f7ff fdab 	bl	80075a4 <prvTraceError>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e096      	b.n	8007b80 <prvTraceCreateSymbolTableEntry+0x16c>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8007a52:	4b4f      	ldr	r3, [pc, #316]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8007a5a:	78bb      	ldrb	r3, [r7, #2]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3304      	adds	r3, #4
 8007a60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007a64:	d305      	bcc.n	8007a72 <prvTraceCreateSymbolTableEntry+0x5e>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8007a66:	484b      	ldr	r0, [pc, #300]	; (8007b94 <prvTraceCreateSymbolTableEntry+0x180>)
 8007a68:	f7ff fd9c 	bl	80075a4 <prvTraceError>
		ret = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	81fb      	strh	r3, [r7, #14]
 8007a70:	e085      	b.n	8007b7e <prvTraceCreateSymbolTableEntry+0x16a>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8007a72:	4b47      	ldr	r3, [pc, #284]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	8899      	ldrh	r1, [r3, #4]
		RecorderDataPtr->SymbolTable.symbytes
 8007a82:	4b43      	ldr	r3, [pc, #268]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007a84:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8007a86:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8007a8e:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8007a90:	4413      	add	r3, r2
 8007a92:	460a      	mov	r2, r1
 8007a94:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8007a98:	4b3d      	ldr	r3, [pc, #244]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	889b      	ldrh	r3, [r3, #4]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 8007aac:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007aae:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8007ab0:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8007ab8:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8007aba:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8007abc:	4413      	add	r3, r2
 8007abe:	460a      	mov	r2, r1
 8007ac0:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
 8007ac4:	4b32      	ldr	r3, [pc, #200]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8007ac8:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8007ad0:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 8007ad2:	8839      	ldrh	r1, [r7, #0]
 8007ad4:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8007ad6:	4413      	add	r3, r2
 8007ad8:	460a      	mov	r2, r1
 8007ada:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 8007ade:	883b      	ldrh	r3, [r7, #0]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 8007ae4:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8007ae8:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8007af0:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 8007af2:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8007af4:	4413      	add	r3, r2
 8007af6:	460a      	mov	r2, r1
 8007af8:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8007afc:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007afe:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8007b00:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8007b08:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8007b0a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8007b0e:	4413      	add	r3, r2
 8007b10:	3304      	adds	r3, #4
 8007b12:	78ba      	ldrb	r2, [r7, #2]
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fc72 	bl	8007400 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8007b1c:	4b1c      	ldr	r3, [pc, #112]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
 8007b28:	78bb      	ldrb	r3, [r7, #2]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4413      	add	r3, r2
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8007b36:	4b16      	ldr	r3, [pc, #88]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8007b3e:	4b14      	ldr	r3, [pc, #80]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b40:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	b289      	uxth	r1, r1
 8007b46:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	460a      	mov	r2, r1
 8007b50:	809a      	strh	r2, [r3, #4]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 8007b5a:	78bb      	ldrb	r3, [r7, #2]
 8007b5c:	441a      	add	r2, r3
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3205      	adds	r2, #5
 8007b64:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <prvTraceCreateSymbolTableEntry+0x17c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	78bb      	ldrb	r3, [r7, #2]
 8007b74:	3305      	adds	r3, #5
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	0800a0f4 	.word	0x0800a0f4
 8007b8c:	0800a130 	.word	0x0800a130
 8007b90:	20004e38 	.word	0x20004e38
 8007b94:	0800a168 	.word	0x0800a168

08007b98 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <prvTraceGetChecksum+0x22>
 8007bb2:	4819      	ldr	r0, [pc, #100]	; (8007c18 <prvTraceGetChecksum+0x80>)
 8007bb4:	f7ff fcf6 	bl	80075a4 <prvTraceError>
 8007bb8:	e02b      	b.n	8007c12 <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <prvTraceGetChecksum+0x30>
 8007bc0:	4816      	ldr	r0, [pc, #88]	; (8007c1c <prvTraceGetChecksum+0x84>)
 8007bc2:	f7ff fcef 	bl	80075a4 <prvTraceError>
 8007bc6:	e024      	b.n	8007c12 <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <prvTraceGetChecksum+0x3e>
 8007bce:	4814      	ldr	r0, [pc, #80]	; (8007c20 <prvTraceGetChecksum+0x88>)
 8007bd0:	f7ff fce8 	bl	80075a4 <prvTraceError>
 8007bd4:	e01d      	b.n	8007c12 <prvTraceGetChecksum+0x7a>

	if (pname != (const char *) 0)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00f      	beq.n	8007bfc <prvTraceGetChecksum+0x64>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8007bdc:	e006      	b.n	8007bec <prvTraceGetChecksum+0x54>
		{
			crc += c;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4413      	add	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
			length++;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	3301      	adds	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	60fa      	str	r2, [r7, #12]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	75fb      	strb	r3, [r7, #23]
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f0      	bne.n	8007bde <prvTraceGetChecksum+0x46>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	701a      	strb	r2, [r3, #0]
}
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	0800a1b0 	.word	0x0800a1b0
 8007c1c:	0800a1e4 	.word	0x0800a1e4
 8007c20:	0800a214 	.word	0x0800a214

08007c24 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8007c28:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <prvTraceInitCortexM+0x54>)
 8007c2a:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <prvTraceInitCortexM+0x58>)
 8007c2c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <prvTraceInitCortexM+0x5c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <prvTraceInitCortexM+0x5c>)
 8007c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c38:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <prvTraceInitCortexM+0x5c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8007c42:	4810      	ldr	r0, [pc, #64]	; (8007c84 <prvTraceInitCortexM+0x60>)
 8007c44:	f7ff fcae 	bl	80075a4 <prvTraceError>
			break;
 8007c48:	e013      	b.n	8007c72 <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <prvTraceInitCortexM+0x64>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8007c56:	480d      	ldr	r0, [pc, #52]	; (8007c8c <prvTraceInitCortexM+0x68>)
 8007c58:	f7ff fca4 	bl	80075a4 <prvTraceError>
			break;
 8007c5c:	e009      	b.n	8007c72 <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <prvTraceInitCortexM+0x6c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <prvTraceInitCortexM+0x64>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <prvTraceInitCortexM+0x64>)
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	e0001fb0 	.word	0xe0001fb0
 8007c7c:	c5acce55 	.word	0xc5acce55
 8007c80:	e000edfc 	.word	0xe000edfc
 8007c84:	0800a248 	.word	0x0800a248
 8007c88:	e0001000 	.word	0xe0001000
 8007c8c:	0800a274 	.word	0x0800a274
 8007c90:	e0001004 	.word	0xe0001004

08007c94 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8007ca8:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <prvTracePortGetTimeStamp+0x80>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d028      	beq.n	8007d08 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8007cb6:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <prvTracePortGetTimeStamp+0x84>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
		return;
 8007cbe:	e023      	b.n	8007d08 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8007cc0:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <prvTracePortGetTimeStamp+0x88>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <prvTracePortGetTimeStamp+0x8c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <prvTracePortGetTimeStamp+0x90>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <prvTracePortGetTimeStamp+0x90>)
 8007ce4:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <prvTracePortGetTimeStamp+0x84>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <prvTracePortGetTimeStamp+0x84>)
 8007cf0:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <prvTracePortGetTimeStamp+0x84>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8007d00:	4a07      	ldr	r2, [pc, #28]	; (8007d20 <prvTracePortGetTimeStamp+0x8c>)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e000      	b.n	8007d0a <prvTracePortGetTimeStamp+0x76>
		return;
 8007d08:	bf00      	nop
}
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20004050 	.word	0x20004050
 8007d18:	20004054 	.word	0x20004054
 8007d1c:	e0001004 	.word	0xe0001004
 8007d20:	2000407c 	.word	0x2000407c
 8007d24:	20004080 	.word	0x20004080

08007d28 <__errno>:
 8007d28:	4b01      	ldr	r3, [pc, #4]	; (8007d30 <__errno+0x8>)
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2000001c 	.word	0x2000001c

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f001 f80c 	bl	8008d64 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	0800a360 	.word	0x0800a360
 8007d70:	0800a360 	.word	0x0800a360
 8007d74:	0800a360 	.word	0x0800a360
 8007d78:	0800a364 	.word	0x0800a364

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <memset>:
 8007d98:	4402      	add	r2, r0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <iprintf>:
 8007da8:	b40f      	push	{r0, r1, r2, r3}
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <iprintf+0x2c>)
 8007dac:	b513      	push	{r0, r1, r4, lr}
 8007dae:	681c      	ldr	r4, [r3, #0]
 8007db0:	b124      	cbz	r4, 8007dbc <iprintf+0x14>
 8007db2:	69a3      	ldr	r3, [r4, #24]
 8007db4:	b913      	cbnz	r3, 8007dbc <iprintf+0x14>
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fa70 	bl	800829c <__sinit>
 8007dbc:	ab05      	add	r3, sp, #20
 8007dbe:	9a04      	ldr	r2, [sp, #16]
 8007dc0:	68a1      	ldr	r1, [r4, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 fc41 	bl	800864c <_vfiprintf_r>
 8007dca:	b002      	add	sp, #8
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	b004      	add	sp, #16
 8007dd2:	4770      	bx	lr
 8007dd4:	2000001c 	.word	0x2000001c

08007dd8 <_puts_r>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	460e      	mov	r6, r1
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b118      	cbz	r0, 8007de8 <_puts_r+0x10>
 8007de0:	6983      	ldr	r3, [r0, #24]
 8007de2:	b90b      	cbnz	r3, 8007de8 <_puts_r+0x10>
 8007de4:	f000 fa5a 	bl	800829c <__sinit>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	68ac      	ldr	r4, [r5, #8]
 8007dec:	b913      	cbnz	r3, 8007df4 <_puts_r+0x1c>
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fa54 	bl	800829c <__sinit>
 8007df4:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <_puts_r+0xd0>)
 8007df6:	429c      	cmp	r4, r3
 8007df8:	d120      	bne.n	8007e3c <_puts_r+0x64>
 8007dfa:	686c      	ldr	r4, [r5, #4]
 8007dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dfe:	07db      	lsls	r3, r3, #31
 8007e00:	d405      	bmi.n	8007e0e <_puts_r+0x36>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	0598      	lsls	r0, r3, #22
 8007e06:	d402      	bmi.n	8007e0e <_puts_r+0x36>
 8007e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0a:	f000 fae5 	bl	80083d8 <__retarget_lock_acquire_recursive>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	0719      	lsls	r1, r3, #28
 8007e12:	d51d      	bpl.n	8007e50 <_puts_r+0x78>
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	b1db      	cbz	r3, 8007e50 <_puts_r+0x78>
 8007e18:	3e01      	subs	r6, #1
 8007e1a:	68a3      	ldr	r3, [r4, #8]
 8007e1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e20:	3b01      	subs	r3, #1
 8007e22:	60a3      	str	r3, [r4, #8]
 8007e24:	bb39      	cbnz	r1, 8007e76 <_puts_r+0x9e>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da38      	bge.n	8007e9c <_puts_r+0xc4>
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	210a      	movs	r1, #10
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f85a 	bl	8007ee8 <__swbuf_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d011      	beq.n	8007e5c <_puts_r+0x84>
 8007e38:	250a      	movs	r5, #10
 8007e3a:	e011      	b.n	8007e60 <_puts_r+0x88>
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <_puts_r+0xd4>)
 8007e3e:	429c      	cmp	r4, r3
 8007e40:	d101      	bne.n	8007e46 <_puts_r+0x6e>
 8007e42:	68ac      	ldr	r4, [r5, #8]
 8007e44:	e7da      	b.n	8007dfc <_puts_r+0x24>
 8007e46:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <_puts_r+0xd8>)
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	bf08      	it	eq
 8007e4c:	68ec      	ldreq	r4, [r5, #12]
 8007e4e:	e7d5      	b.n	8007dfc <_puts_r+0x24>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f89a 	bl	8007f8c <__swsetup_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0dd      	beq.n	8007e18 <_puts_r+0x40>
 8007e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e62:	07da      	lsls	r2, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_puts_r+0x9a>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	059b      	lsls	r3, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_puts_r+0x9a>
 8007e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6e:	f000 fab4 	bl	80083da <__retarget_lock_release_recursive>
 8007e72:	4628      	mov	r0, r5
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da04      	bge.n	8007e84 <_puts_r+0xac>
 8007e7a:	69a2      	ldr	r2, [r4, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	dc06      	bgt.n	8007e8e <_puts_r+0xb6>
 8007e80:	290a      	cmp	r1, #10
 8007e82:	d004      	beq.n	8007e8e <_puts_r+0xb6>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	6022      	str	r2, [r4, #0]
 8007e8a:	7019      	strb	r1, [r3, #0]
 8007e8c:	e7c5      	b.n	8007e1a <_puts_r+0x42>
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 f829 	bl	8007ee8 <__swbuf_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	d1bf      	bne.n	8007e1a <_puts_r+0x42>
 8007e9a:	e7df      	b.n	8007e5c <_puts_r+0x84>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	250a      	movs	r5, #10
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	6022      	str	r2, [r4, #0]
 8007ea4:	701d      	strb	r5, [r3, #0]
 8007ea6:	e7db      	b.n	8007e60 <_puts_r+0x88>
 8007ea8:	0800a2e4 	.word	0x0800a2e4
 8007eac:	0800a304 	.word	0x0800a304
 8007eb0:	0800a2c4 	.word	0x0800a2c4

08007eb4 <puts>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <puts+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f7ff bf8d 	b.w	8007dd8 <_puts_r>
 8007ebe:	bf00      	nop
 8007ec0:	2000001c 	.word	0x2000001c

08007ec4 <strncmp>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	b16a      	cbz	r2, 8007ee4 <strncmp+0x20>
 8007ec8:	3901      	subs	r1, #1
 8007eca:	1884      	adds	r4, r0, r2
 8007ecc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ed0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <strncmp+0x1c>
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d001      	beq.n	8007ee0 <strncmp+0x1c>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f5      	bne.n	8007ecc <strncmp+0x8>
 8007ee0:	1a98      	subs	r0, r3, r2
 8007ee2:	bd10      	pop	{r4, pc}
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	e7fc      	b.n	8007ee2 <strncmp+0x1e>

08007ee8 <__swbuf_r>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	460e      	mov	r6, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b118      	cbz	r0, 8007efa <__swbuf_r+0x12>
 8007ef2:	6983      	ldr	r3, [r0, #24]
 8007ef4:	b90b      	cbnz	r3, 8007efa <__swbuf_r+0x12>
 8007ef6:	f000 f9d1 	bl	800829c <__sinit>
 8007efa:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <__swbuf_r+0x98>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d12b      	bne.n	8007f58 <__swbuf_r+0x70>
 8007f00:	686c      	ldr	r4, [r5, #4]
 8007f02:	69a3      	ldr	r3, [r4, #24]
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	071a      	lsls	r2, r3, #28
 8007f0a:	d52f      	bpl.n	8007f6c <__swbuf_r+0x84>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b36b      	cbz	r3, 8007f6c <__swbuf_r+0x84>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	6820      	ldr	r0, [r4, #0]
 8007f14:	1ac0      	subs	r0, r0, r3
 8007f16:	6963      	ldr	r3, [r4, #20]
 8007f18:	b2f6      	uxtb	r6, r6
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	4637      	mov	r7, r6
 8007f1e:	dc04      	bgt.n	8007f2a <__swbuf_r+0x42>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 f926 	bl	8008174 <_fflush_r>
 8007f28:	bb30      	cbnz	r0, 8007f78 <__swbuf_r+0x90>
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	60a3      	str	r3, [r4, #8]
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	6022      	str	r2, [r4, #0]
 8007f36:	701e      	strb	r6, [r3, #0]
 8007f38:	6963      	ldr	r3, [r4, #20]
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	d004      	beq.n	8007f4a <__swbuf_r+0x62>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d506      	bpl.n	8007f54 <__swbuf_r+0x6c>
 8007f46:	2e0a      	cmp	r6, #10
 8007f48:	d104      	bne.n	8007f54 <__swbuf_r+0x6c>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 f911 	bl	8008174 <_fflush_r>
 8007f52:	b988      	cbnz	r0, 8007f78 <__swbuf_r+0x90>
 8007f54:	4638      	mov	r0, r7
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <__swbuf_r+0x9c>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <__swbuf_r+0x7a>
 8007f5e:	68ac      	ldr	r4, [r5, #8]
 8007f60:	e7cf      	b.n	8007f02 <__swbuf_r+0x1a>
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <__swbuf_r+0xa0>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68ec      	ldreq	r4, [r5, #12]
 8007f6a:	e7ca      	b.n	8007f02 <__swbuf_r+0x1a>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 f80c 	bl	8007f8c <__swsetup_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0cb      	beq.n	8007f10 <__swbuf_r+0x28>
 8007f78:	f04f 37ff 	mov.w	r7, #4294967295
 8007f7c:	e7ea      	b.n	8007f54 <__swbuf_r+0x6c>
 8007f7e:	bf00      	nop
 8007f80:	0800a2e4 	.word	0x0800a2e4
 8007f84:	0800a304 	.word	0x0800a304
 8007f88:	0800a2c4 	.word	0x0800a2c4

08007f8c <__swsetup_r>:
 8007f8c:	4b32      	ldr	r3, [pc, #200]	; (8008058 <__swsetup_r+0xcc>)
 8007f8e:	b570      	push	{r4, r5, r6, lr}
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	4606      	mov	r6, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	b125      	cbz	r5, 8007fa2 <__swsetup_r+0x16>
 8007f98:	69ab      	ldr	r3, [r5, #24]
 8007f9a:	b913      	cbnz	r3, 8007fa2 <__swsetup_r+0x16>
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 f97d 	bl	800829c <__sinit>
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	; (800805c <__swsetup_r+0xd0>)
 8007fa4:	429c      	cmp	r4, r3
 8007fa6:	d10f      	bne.n	8007fc8 <__swsetup_r+0x3c>
 8007fa8:	686c      	ldr	r4, [r5, #4]
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb0:	0719      	lsls	r1, r3, #28
 8007fb2:	d42c      	bmi.n	800800e <__swsetup_r+0x82>
 8007fb4:	06dd      	lsls	r5, r3, #27
 8007fb6:	d411      	bmi.n	8007fdc <__swsetup_r+0x50>
 8007fb8:	2309      	movs	r3, #9
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc6:	e03e      	b.n	8008046 <__swsetup_r+0xba>
 8007fc8:	4b25      	ldr	r3, [pc, #148]	; (8008060 <__swsetup_r+0xd4>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d101      	bne.n	8007fd2 <__swsetup_r+0x46>
 8007fce:	68ac      	ldr	r4, [r5, #8]
 8007fd0:	e7eb      	b.n	8007faa <__swsetup_r+0x1e>
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <__swsetup_r+0xd8>)
 8007fd4:	429c      	cmp	r4, r3
 8007fd6:	bf08      	it	eq
 8007fd8:	68ec      	ldreq	r4, [r5, #12]
 8007fda:	e7e6      	b.n	8007faa <__swsetup_r+0x1e>
 8007fdc:	0758      	lsls	r0, r3, #29
 8007fde:	d512      	bpl.n	8008006 <__swsetup_r+0x7a>
 8007fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fe2:	b141      	cbz	r1, 8007ff6 <__swsetup_r+0x6a>
 8007fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	d002      	beq.n	8007ff2 <__swsetup_r+0x66>
 8007fec:	4630      	mov	r0, r6
 8007fee:	f000 fa59 	bl	80084a4 <_free_r>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	2300      	movs	r3, #0
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f043 0308 	orr.w	r3, r3, #8
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	b94b      	cbnz	r3, 8008026 <__swsetup_r+0x9a>
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801c:	d003      	beq.n	8008026 <__swsetup_r+0x9a>
 800801e:	4621      	mov	r1, r4
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f9ff 	bl	8008424 <__smakebuf_r>
 8008026:	89a0      	ldrh	r0, [r4, #12]
 8008028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800802c:	f010 0301 	ands.w	r3, r0, #1
 8008030:	d00a      	beq.n	8008048 <__swsetup_r+0xbc>
 8008032:	2300      	movs	r3, #0
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	6963      	ldr	r3, [r4, #20]
 8008038:	425b      	negs	r3, r3
 800803a:	61a3      	str	r3, [r4, #24]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	b943      	cbnz	r3, 8008052 <__swsetup_r+0xc6>
 8008040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008044:	d1ba      	bne.n	8007fbc <__swsetup_r+0x30>
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	0781      	lsls	r1, r0, #30
 800804a:	bf58      	it	pl
 800804c:	6963      	ldrpl	r3, [r4, #20]
 800804e:	60a3      	str	r3, [r4, #8]
 8008050:	e7f4      	b.n	800803c <__swsetup_r+0xb0>
 8008052:	2000      	movs	r0, #0
 8008054:	e7f7      	b.n	8008046 <__swsetup_r+0xba>
 8008056:	bf00      	nop
 8008058:	2000001c 	.word	0x2000001c
 800805c:	0800a2e4 	.word	0x0800a2e4
 8008060:	0800a304 	.word	0x0800a304
 8008064:	0800a2c4 	.word	0x0800a2c4

08008068 <__sflush_r>:
 8008068:	898a      	ldrh	r2, [r1, #12]
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	4605      	mov	r5, r0
 8008070:	0710      	lsls	r0, r2, #28
 8008072:	460c      	mov	r4, r1
 8008074:	d458      	bmi.n	8008128 <__sflush_r+0xc0>
 8008076:	684b      	ldr	r3, [r1, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc05      	bgt.n	8008088 <__sflush_r+0x20>
 800807c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	dc02      	bgt.n	8008088 <__sflush_r+0x20>
 8008082:	2000      	movs	r0, #0
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800808a:	2e00      	cmp	r6, #0
 800808c:	d0f9      	beq.n	8008082 <__sflush_r+0x1a>
 800808e:	2300      	movs	r3, #0
 8008090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008094:	682f      	ldr	r7, [r5, #0]
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	d032      	beq.n	8008100 <__sflush_r+0x98>
 800809a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	075a      	lsls	r2, r3, #29
 80080a0:	d505      	bpl.n	80080ae <__sflush_r+0x46>
 80080a2:	6863      	ldr	r3, [r4, #4]
 80080a4:	1ac0      	subs	r0, r0, r3
 80080a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080a8:	b10b      	cbz	r3, 80080ae <__sflush_r+0x46>
 80080aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ac:	1ac0      	subs	r0, r0, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	4602      	mov	r2, r0
 80080b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b4:	6a21      	ldr	r1, [r4, #32]
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b0      	blx	r6
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	d106      	bne.n	80080ce <__sflush_r+0x66>
 80080c0:	6829      	ldr	r1, [r5, #0]
 80080c2:	291d      	cmp	r1, #29
 80080c4:	d82c      	bhi.n	8008120 <__sflush_r+0xb8>
 80080c6:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <__sflush_r+0x108>)
 80080c8:	40ca      	lsrs	r2, r1
 80080ca:	07d6      	lsls	r6, r2, #31
 80080cc:	d528      	bpl.n	8008120 <__sflush_r+0xb8>
 80080ce:	2200      	movs	r2, #0
 80080d0:	6062      	str	r2, [r4, #4]
 80080d2:	04d9      	lsls	r1, r3, #19
 80080d4:	6922      	ldr	r2, [r4, #16]
 80080d6:	6022      	str	r2, [r4, #0]
 80080d8:	d504      	bpl.n	80080e4 <__sflush_r+0x7c>
 80080da:	1c42      	adds	r2, r0, #1
 80080dc:	d101      	bne.n	80080e2 <__sflush_r+0x7a>
 80080de:	682b      	ldr	r3, [r5, #0]
 80080e0:	b903      	cbnz	r3, 80080e4 <__sflush_r+0x7c>
 80080e2:	6560      	str	r0, [r4, #84]	; 0x54
 80080e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e6:	602f      	str	r7, [r5, #0]
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d0ca      	beq.n	8008082 <__sflush_r+0x1a>
 80080ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f0:	4299      	cmp	r1, r3
 80080f2:	d002      	beq.n	80080fa <__sflush_r+0x92>
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 f9d5 	bl	80084a4 <_free_r>
 80080fa:	2000      	movs	r0, #0
 80080fc:	6360      	str	r0, [r4, #52]	; 0x34
 80080fe:	e7c1      	b.n	8008084 <__sflush_r+0x1c>
 8008100:	6a21      	ldr	r1, [r4, #32]
 8008102:	2301      	movs	r3, #1
 8008104:	4628      	mov	r0, r5
 8008106:	47b0      	blx	r6
 8008108:	1c41      	adds	r1, r0, #1
 800810a:	d1c7      	bne.n	800809c <__sflush_r+0x34>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0c4      	beq.n	800809c <__sflush_r+0x34>
 8008112:	2b1d      	cmp	r3, #29
 8008114:	d001      	beq.n	800811a <__sflush_r+0xb2>
 8008116:	2b16      	cmp	r3, #22
 8008118:	d101      	bne.n	800811e <__sflush_r+0xb6>
 800811a:	602f      	str	r7, [r5, #0]
 800811c:	e7b1      	b.n	8008082 <__sflush_r+0x1a>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	e7ad      	b.n	8008084 <__sflush_r+0x1c>
 8008128:	690f      	ldr	r7, [r1, #16]
 800812a:	2f00      	cmp	r7, #0
 800812c:	d0a9      	beq.n	8008082 <__sflush_r+0x1a>
 800812e:	0793      	lsls	r3, r2, #30
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	bf08      	it	eq
 8008134:	694b      	ldreq	r3, [r1, #20]
 8008136:	600f      	str	r7, [r1, #0]
 8008138:	bf18      	it	ne
 800813a:	2300      	movne	r3, #0
 800813c:	eba6 0807 	sub.w	r8, r6, r7
 8008140:	608b      	str	r3, [r1, #8]
 8008142:	f1b8 0f00 	cmp.w	r8, #0
 8008146:	dd9c      	ble.n	8008082 <__sflush_r+0x1a>
 8008148:	6a21      	ldr	r1, [r4, #32]
 800814a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800814c:	4643      	mov	r3, r8
 800814e:	463a      	mov	r2, r7
 8008150:	4628      	mov	r0, r5
 8008152:	47b0      	blx	r6
 8008154:	2800      	cmp	r0, #0
 8008156:	dc06      	bgt.n	8008166 <__sflush_r+0xfe>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e78e      	b.n	8008084 <__sflush_r+0x1c>
 8008166:	4407      	add	r7, r0
 8008168:	eba8 0800 	sub.w	r8, r8, r0
 800816c:	e7e9      	b.n	8008142 <__sflush_r+0xda>
 800816e:	bf00      	nop
 8008170:	20400001 	.word	0x20400001

08008174 <_fflush_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	690b      	ldr	r3, [r1, #16]
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	b913      	cbnz	r3, 8008184 <_fflush_r+0x10>
 800817e:	2500      	movs	r5, #0
 8008180:	4628      	mov	r0, r5
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	b118      	cbz	r0, 800818e <_fflush_r+0x1a>
 8008186:	6983      	ldr	r3, [r0, #24]
 8008188:	b90b      	cbnz	r3, 800818e <_fflush_r+0x1a>
 800818a:	f000 f887 	bl	800829c <__sinit>
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <_fflush_r+0x6c>)
 8008190:	429c      	cmp	r4, r3
 8008192:	d11b      	bne.n	80081cc <_fflush_r+0x58>
 8008194:	686c      	ldr	r4, [r5, #4]
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0ef      	beq.n	800817e <_fflush_r+0xa>
 800819e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081a0:	07d0      	lsls	r0, r2, #31
 80081a2:	d404      	bmi.n	80081ae <_fflush_r+0x3a>
 80081a4:	0599      	lsls	r1, r3, #22
 80081a6:	d402      	bmi.n	80081ae <_fflush_r+0x3a>
 80081a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081aa:	f000 f915 	bl	80083d8 <__retarget_lock_acquire_recursive>
 80081ae:	4628      	mov	r0, r5
 80081b0:	4621      	mov	r1, r4
 80081b2:	f7ff ff59 	bl	8008068 <__sflush_r>
 80081b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b8:	07da      	lsls	r2, r3, #31
 80081ba:	4605      	mov	r5, r0
 80081bc:	d4e0      	bmi.n	8008180 <_fflush_r+0xc>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	059b      	lsls	r3, r3, #22
 80081c2:	d4dd      	bmi.n	8008180 <_fflush_r+0xc>
 80081c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c6:	f000 f908 	bl	80083da <__retarget_lock_release_recursive>
 80081ca:	e7d9      	b.n	8008180 <_fflush_r+0xc>
 80081cc:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <_fflush_r+0x70>)
 80081ce:	429c      	cmp	r4, r3
 80081d0:	d101      	bne.n	80081d6 <_fflush_r+0x62>
 80081d2:	68ac      	ldr	r4, [r5, #8]
 80081d4:	e7df      	b.n	8008196 <_fflush_r+0x22>
 80081d6:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <_fflush_r+0x74>)
 80081d8:	429c      	cmp	r4, r3
 80081da:	bf08      	it	eq
 80081dc:	68ec      	ldreq	r4, [r5, #12]
 80081de:	e7da      	b.n	8008196 <_fflush_r+0x22>
 80081e0:	0800a2e4 	.word	0x0800a2e4
 80081e4:	0800a304 	.word	0x0800a304
 80081e8:	0800a2c4 	.word	0x0800a2c4

080081ec <std>:
 80081ec:	2300      	movs	r3, #0
 80081ee:	b510      	push	{r4, lr}
 80081f0:	4604      	mov	r4, r0
 80081f2:	e9c0 3300 	strd	r3, r3, [r0]
 80081f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081fa:	6083      	str	r3, [r0, #8]
 80081fc:	8181      	strh	r1, [r0, #12]
 80081fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008200:	81c2      	strh	r2, [r0, #14]
 8008202:	6183      	str	r3, [r0, #24]
 8008204:	4619      	mov	r1, r3
 8008206:	2208      	movs	r2, #8
 8008208:	305c      	adds	r0, #92	; 0x5c
 800820a:	f7ff fdc5 	bl	8007d98 <memset>
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <std+0x38>)
 8008210:	6263      	str	r3, [r4, #36]	; 0x24
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <std+0x3c>)
 8008214:	62a3      	str	r3, [r4, #40]	; 0x28
 8008216:	4b05      	ldr	r3, [pc, #20]	; (800822c <std+0x40>)
 8008218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <std+0x44>)
 800821c:	6224      	str	r4, [r4, #32]
 800821e:	6323      	str	r3, [r4, #48]	; 0x30
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	08008bf5 	.word	0x08008bf5
 8008228:	08008c17 	.word	0x08008c17
 800822c:	08008c4f 	.word	0x08008c4f
 8008230:	08008c73 	.word	0x08008c73

08008234 <_cleanup_r>:
 8008234:	4901      	ldr	r1, [pc, #4]	; (800823c <_cleanup_r+0x8>)
 8008236:	f000 b8af 	b.w	8008398 <_fwalk_reent>
 800823a:	bf00      	nop
 800823c:	08008175 	.word	0x08008175

08008240 <__sfmoreglue>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	1e4a      	subs	r2, r1, #1
 8008244:	2568      	movs	r5, #104	; 0x68
 8008246:	4355      	muls	r5, r2
 8008248:	460e      	mov	r6, r1
 800824a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800824e:	f000 f979 	bl	8008544 <_malloc_r>
 8008252:	4604      	mov	r4, r0
 8008254:	b140      	cbz	r0, 8008268 <__sfmoreglue+0x28>
 8008256:	2100      	movs	r1, #0
 8008258:	e9c0 1600 	strd	r1, r6, [r0]
 800825c:	300c      	adds	r0, #12
 800825e:	60a0      	str	r0, [r4, #8]
 8008260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008264:	f7ff fd98 	bl	8007d98 <memset>
 8008268:	4620      	mov	r0, r4
 800826a:	bd70      	pop	{r4, r5, r6, pc}

0800826c <__sfp_lock_acquire>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__sfp_lock_acquire+0x8>)
 800826e:	f000 b8b3 	b.w	80083d8 <__retarget_lock_acquire_recursive>
 8008272:	bf00      	nop
 8008274:	200067e2 	.word	0x200067e2

08008278 <__sfp_lock_release>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__sfp_lock_release+0x8>)
 800827a:	f000 b8ae 	b.w	80083da <__retarget_lock_release_recursive>
 800827e:	bf00      	nop
 8008280:	200067e2 	.word	0x200067e2

08008284 <__sinit_lock_acquire>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__sinit_lock_acquire+0x8>)
 8008286:	f000 b8a7 	b.w	80083d8 <__retarget_lock_acquire_recursive>
 800828a:	bf00      	nop
 800828c:	200067dd 	.word	0x200067dd

08008290 <__sinit_lock_release>:
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <__sinit_lock_release+0x8>)
 8008292:	f000 b8a2 	b.w	80083da <__retarget_lock_release_recursive>
 8008296:	bf00      	nop
 8008298:	200067dd 	.word	0x200067dd

0800829c <__sinit>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4604      	mov	r4, r0
 80082a0:	f7ff fff0 	bl	8008284 <__sinit_lock_acquire>
 80082a4:	69a3      	ldr	r3, [r4, #24]
 80082a6:	b11b      	cbz	r3, 80082b0 <__sinit+0x14>
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ac:	f7ff bff0 	b.w	8008290 <__sinit_lock_release>
 80082b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082b4:	6523      	str	r3, [r4, #80]	; 0x50
 80082b6:	4b13      	ldr	r3, [pc, #76]	; (8008304 <__sinit+0x68>)
 80082b8:	4a13      	ldr	r2, [pc, #76]	; (8008308 <__sinit+0x6c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80082be:	42a3      	cmp	r3, r4
 80082c0:	bf04      	itt	eq
 80082c2:	2301      	moveq	r3, #1
 80082c4:	61a3      	streq	r3, [r4, #24]
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f820 	bl	800830c <__sfp>
 80082cc:	6060      	str	r0, [r4, #4]
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f81c 	bl	800830c <__sfp>
 80082d4:	60a0      	str	r0, [r4, #8]
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f818 	bl	800830c <__sfp>
 80082dc:	2200      	movs	r2, #0
 80082de:	60e0      	str	r0, [r4, #12]
 80082e0:	2104      	movs	r1, #4
 80082e2:	6860      	ldr	r0, [r4, #4]
 80082e4:	f7ff ff82 	bl	80081ec <std>
 80082e8:	68a0      	ldr	r0, [r4, #8]
 80082ea:	2201      	movs	r2, #1
 80082ec:	2109      	movs	r1, #9
 80082ee:	f7ff ff7d 	bl	80081ec <std>
 80082f2:	68e0      	ldr	r0, [r4, #12]
 80082f4:	2202      	movs	r2, #2
 80082f6:	2112      	movs	r1, #18
 80082f8:	f7ff ff78 	bl	80081ec <std>
 80082fc:	2301      	movs	r3, #1
 80082fe:	61a3      	str	r3, [r4, #24]
 8008300:	e7d2      	b.n	80082a8 <__sinit+0xc>
 8008302:	bf00      	nop
 8008304:	0800a2c0 	.word	0x0800a2c0
 8008308:	08008235 	.word	0x08008235

0800830c <__sfp>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	4607      	mov	r7, r0
 8008310:	f7ff ffac 	bl	800826c <__sfp_lock_acquire>
 8008314:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <__sfp+0x84>)
 8008316:	681e      	ldr	r6, [r3, #0]
 8008318:	69b3      	ldr	r3, [r6, #24]
 800831a:	b913      	cbnz	r3, 8008322 <__sfp+0x16>
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff ffbd 	bl	800829c <__sinit>
 8008322:	3648      	adds	r6, #72	; 0x48
 8008324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	d503      	bpl.n	8008334 <__sfp+0x28>
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	b30b      	cbz	r3, 8008374 <__sfp+0x68>
 8008330:	6836      	ldr	r6, [r6, #0]
 8008332:	e7f7      	b.n	8008324 <__sfp+0x18>
 8008334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008338:	b9d5      	cbnz	r5, 8008370 <__sfp+0x64>
 800833a:	4b16      	ldr	r3, [pc, #88]	; (8008394 <__sfp+0x88>)
 800833c:	60e3      	str	r3, [r4, #12]
 800833e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008342:	6665      	str	r5, [r4, #100]	; 0x64
 8008344:	f000 f847 	bl	80083d6 <__retarget_lock_init_recursive>
 8008348:	f7ff ff96 	bl	8008278 <__sfp_lock_release>
 800834c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008354:	6025      	str	r5, [r4, #0]
 8008356:	61a5      	str	r5, [r4, #24]
 8008358:	2208      	movs	r2, #8
 800835a:	4629      	mov	r1, r5
 800835c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008360:	f7ff fd1a 	bl	8007d98 <memset>
 8008364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800836c:	4620      	mov	r0, r4
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008370:	3468      	adds	r4, #104	; 0x68
 8008372:	e7d9      	b.n	8008328 <__sfp+0x1c>
 8008374:	2104      	movs	r1, #4
 8008376:	4638      	mov	r0, r7
 8008378:	f7ff ff62 	bl	8008240 <__sfmoreglue>
 800837c:	4604      	mov	r4, r0
 800837e:	6030      	str	r0, [r6, #0]
 8008380:	2800      	cmp	r0, #0
 8008382:	d1d5      	bne.n	8008330 <__sfp+0x24>
 8008384:	f7ff ff78 	bl	8008278 <__sfp_lock_release>
 8008388:	230c      	movs	r3, #12
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	e7ee      	b.n	800836c <__sfp+0x60>
 800838e:	bf00      	nop
 8008390:	0800a2c0 	.word	0x0800a2c0
 8008394:	ffff0001 	.word	0xffff0001

08008398 <_fwalk_reent>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	4606      	mov	r6, r0
 800839e:	4688      	mov	r8, r1
 80083a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083a4:	2700      	movs	r7, #0
 80083a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083aa:	f1b9 0901 	subs.w	r9, r9, #1
 80083ae:	d505      	bpl.n	80083bc <_fwalk_reent+0x24>
 80083b0:	6824      	ldr	r4, [r4, #0]
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	d1f7      	bne.n	80083a6 <_fwalk_reent+0xe>
 80083b6:	4638      	mov	r0, r7
 80083b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083bc:	89ab      	ldrh	r3, [r5, #12]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d907      	bls.n	80083d2 <_fwalk_reent+0x3a>
 80083c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083c6:	3301      	adds	r3, #1
 80083c8:	d003      	beq.n	80083d2 <_fwalk_reent+0x3a>
 80083ca:	4629      	mov	r1, r5
 80083cc:	4630      	mov	r0, r6
 80083ce:	47c0      	blx	r8
 80083d0:	4307      	orrs	r7, r0
 80083d2:	3568      	adds	r5, #104	; 0x68
 80083d4:	e7e9      	b.n	80083aa <_fwalk_reent+0x12>

080083d6 <__retarget_lock_init_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <__retarget_lock_acquire_recursive>:
 80083d8:	4770      	bx	lr

080083da <__retarget_lock_release_recursive>:
 80083da:	4770      	bx	lr

080083dc <__swhatbuf_r>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	460e      	mov	r6, r1
 80083e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e4:	2900      	cmp	r1, #0
 80083e6:	b096      	sub	sp, #88	; 0x58
 80083e8:	4614      	mov	r4, r2
 80083ea:	461d      	mov	r5, r3
 80083ec:	da07      	bge.n	80083fe <__swhatbuf_r+0x22>
 80083ee:	2300      	movs	r3, #0
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	89b3      	ldrh	r3, [r6, #12]
 80083f4:	061a      	lsls	r2, r3, #24
 80083f6:	d410      	bmi.n	800841a <__swhatbuf_r+0x3e>
 80083f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083fc:	e00e      	b.n	800841c <__swhatbuf_r+0x40>
 80083fe:	466a      	mov	r2, sp
 8008400:	f000 fc5e 	bl	8008cc0 <_fstat_r>
 8008404:	2800      	cmp	r0, #0
 8008406:	dbf2      	blt.n	80083ee <__swhatbuf_r+0x12>
 8008408:	9a01      	ldr	r2, [sp, #4]
 800840a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800840e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008412:	425a      	negs	r2, r3
 8008414:	415a      	adcs	r2, r3
 8008416:	602a      	str	r2, [r5, #0]
 8008418:	e7ee      	b.n	80083f8 <__swhatbuf_r+0x1c>
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	2000      	movs	r0, #0
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	b016      	add	sp, #88	; 0x58
 8008422:	bd70      	pop	{r4, r5, r6, pc}

08008424 <__smakebuf_r>:
 8008424:	898b      	ldrh	r3, [r1, #12]
 8008426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008428:	079d      	lsls	r5, r3, #30
 800842a:	4606      	mov	r6, r0
 800842c:	460c      	mov	r4, r1
 800842e:	d507      	bpl.n	8008440 <__smakebuf_r+0x1c>
 8008430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	2301      	movs	r3, #1
 800843a:	6163      	str	r3, [r4, #20]
 800843c:	b002      	add	sp, #8
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	ab01      	add	r3, sp, #4
 8008442:	466a      	mov	r2, sp
 8008444:	f7ff ffca 	bl	80083dc <__swhatbuf_r>
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	4605      	mov	r5, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f000 f879 	bl	8008544 <_malloc_r>
 8008452:	b948      	cbnz	r0, 8008468 <__smakebuf_r+0x44>
 8008454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008458:	059a      	lsls	r2, r3, #22
 800845a:	d4ef      	bmi.n	800843c <__smakebuf_r+0x18>
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	e7e3      	b.n	8008430 <__smakebuf_r+0xc>
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <__smakebuf_r+0x7c>)
 800846a:	62b3      	str	r3, [r6, #40]	; 0x28
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	6163      	str	r3, [r4, #20]
 800847a:	9b01      	ldr	r3, [sp, #4]
 800847c:	6120      	str	r0, [r4, #16]
 800847e:	b15b      	cbz	r3, 8008498 <__smakebuf_r+0x74>
 8008480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008484:	4630      	mov	r0, r6
 8008486:	f000 fc2d 	bl	8008ce4 <_isatty_r>
 800848a:	b128      	cbz	r0, 8008498 <__smakebuf_r+0x74>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	89a0      	ldrh	r0, [r4, #12]
 800849a:	4305      	orrs	r5, r0
 800849c:	81a5      	strh	r5, [r4, #12]
 800849e:	e7cd      	b.n	800843c <__smakebuf_r+0x18>
 80084a0:	08008235 	.word	0x08008235

080084a4 <_free_r>:
 80084a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d048      	beq.n	800853c <_free_r+0x98>
 80084aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ae:	9001      	str	r0, [sp, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f1a1 0404 	sub.w	r4, r1, #4
 80084b6:	bfb8      	it	lt
 80084b8:	18e4      	addlt	r4, r4, r3
 80084ba:	f000 fc35 	bl	8008d28 <__malloc_lock>
 80084be:	4a20      	ldr	r2, [pc, #128]	; (8008540 <_free_r+0x9c>)
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	4615      	mov	r5, r2
 80084c6:	b933      	cbnz	r3, 80084d6 <_free_r+0x32>
 80084c8:	6063      	str	r3, [r4, #4]
 80084ca:	6014      	str	r4, [r2, #0]
 80084cc:	b003      	add	sp, #12
 80084ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084d2:	f000 bc2f 	b.w	8008d34 <__malloc_unlock>
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	d90b      	bls.n	80084f2 <_free_r+0x4e>
 80084da:	6821      	ldr	r1, [r4, #0]
 80084dc:	1862      	adds	r2, r4, r1
 80084de:	4293      	cmp	r3, r2
 80084e0:	bf04      	itt	eq
 80084e2:	681a      	ldreq	r2, [r3, #0]
 80084e4:	685b      	ldreq	r3, [r3, #4]
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	bf04      	itt	eq
 80084ea:	1852      	addeq	r2, r2, r1
 80084ec:	6022      	streq	r2, [r4, #0]
 80084ee:	602c      	str	r4, [r5, #0]
 80084f0:	e7ec      	b.n	80084cc <_free_r+0x28>
 80084f2:	461a      	mov	r2, r3
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b10b      	cbz	r3, 80084fc <_free_r+0x58>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d9fa      	bls.n	80084f2 <_free_r+0x4e>
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	1855      	adds	r5, r2, r1
 8008500:	42a5      	cmp	r5, r4
 8008502:	d10b      	bne.n	800851c <_free_r+0x78>
 8008504:	6824      	ldr	r4, [r4, #0]
 8008506:	4421      	add	r1, r4
 8008508:	1854      	adds	r4, r2, r1
 800850a:	42a3      	cmp	r3, r4
 800850c:	6011      	str	r1, [r2, #0]
 800850e:	d1dd      	bne.n	80084cc <_free_r+0x28>
 8008510:	681c      	ldr	r4, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4421      	add	r1, r4
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	e7d7      	b.n	80084cc <_free_r+0x28>
 800851c:	d902      	bls.n	8008524 <_free_r+0x80>
 800851e:	230c      	movs	r3, #12
 8008520:	6003      	str	r3, [r0, #0]
 8008522:	e7d3      	b.n	80084cc <_free_r+0x28>
 8008524:	6825      	ldr	r5, [r4, #0]
 8008526:	1961      	adds	r1, r4, r5
 8008528:	428b      	cmp	r3, r1
 800852a:	bf04      	itt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	bf04      	itt	eq
 8008534:	1949      	addeq	r1, r1, r5
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6054      	str	r4, [r2, #4]
 800853a:	e7c7      	b.n	80084cc <_free_r+0x28>
 800853c:	b003      	add	sp, #12
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	20004084 	.word	0x20004084

08008544 <_malloc_r>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	1ccd      	adds	r5, r1, #3
 8008548:	f025 0503 	bic.w	r5, r5, #3
 800854c:	3508      	adds	r5, #8
 800854e:	2d0c      	cmp	r5, #12
 8008550:	bf38      	it	cc
 8008552:	250c      	movcc	r5, #12
 8008554:	2d00      	cmp	r5, #0
 8008556:	4606      	mov	r6, r0
 8008558:	db01      	blt.n	800855e <_malloc_r+0x1a>
 800855a:	42a9      	cmp	r1, r5
 800855c:	d903      	bls.n	8008566 <_malloc_r+0x22>
 800855e:	230c      	movs	r3, #12
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	2000      	movs	r0, #0
 8008564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008566:	f000 fbdf 	bl	8008d28 <__malloc_lock>
 800856a:	4921      	ldr	r1, [pc, #132]	; (80085f0 <_malloc_r+0xac>)
 800856c:	680a      	ldr	r2, [r1, #0]
 800856e:	4614      	mov	r4, r2
 8008570:	b99c      	cbnz	r4, 800859a <_malloc_r+0x56>
 8008572:	4f20      	ldr	r7, [pc, #128]	; (80085f4 <_malloc_r+0xb0>)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	b923      	cbnz	r3, 8008582 <_malloc_r+0x3e>
 8008578:	4621      	mov	r1, r4
 800857a:	4630      	mov	r0, r6
 800857c:	f000 fb2a 	bl	8008bd4 <_sbrk_r>
 8008580:	6038      	str	r0, [r7, #0]
 8008582:	4629      	mov	r1, r5
 8008584:	4630      	mov	r0, r6
 8008586:	f000 fb25 	bl	8008bd4 <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d123      	bne.n	80085d6 <_malloc_r+0x92>
 800858e:	230c      	movs	r3, #12
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	4630      	mov	r0, r6
 8008594:	f000 fbce 	bl	8008d34 <__malloc_unlock>
 8008598:	e7e3      	b.n	8008562 <_malloc_r+0x1e>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	1b5b      	subs	r3, r3, r5
 800859e:	d417      	bmi.n	80085d0 <_malloc_r+0x8c>
 80085a0:	2b0b      	cmp	r3, #11
 80085a2:	d903      	bls.n	80085ac <_malloc_r+0x68>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	441c      	add	r4, r3
 80085a8:	6025      	str	r5, [r4, #0]
 80085aa:	e004      	b.n	80085b6 <_malloc_r+0x72>
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	42a2      	cmp	r2, r4
 80085b0:	bf0c      	ite	eq
 80085b2:	600b      	streq	r3, [r1, #0]
 80085b4:	6053      	strne	r3, [r2, #4]
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 fbbc 	bl	8008d34 <__malloc_unlock>
 80085bc:	f104 000b 	add.w	r0, r4, #11
 80085c0:	1d23      	adds	r3, r4, #4
 80085c2:	f020 0007 	bic.w	r0, r0, #7
 80085c6:	1ac2      	subs	r2, r0, r3
 80085c8:	d0cc      	beq.n	8008564 <_malloc_r+0x20>
 80085ca:	1a1b      	subs	r3, r3, r0
 80085cc:	50a3      	str	r3, [r4, r2]
 80085ce:	e7c9      	b.n	8008564 <_malloc_r+0x20>
 80085d0:	4622      	mov	r2, r4
 80085d2:	6864      	ldr	r4, [r4, #4]
 80085d4:	e7cc      	b.n	8008570 <_malloc_r+0x2c>
 80085d6:	1cc4      	adds	r4, r0, #3
 80085d8:	f024 0403 	bic.w	r4, r4, #3
 80085dc:	42a0      	cmp	r0, r4
 80085de:	d0e3      	beq.n	80085a8 <_malloc_r+0x64>
 80085e0:	1a21      	subs	r1, r4, r0
 80085e2:	4630      	mov	r0, r6
 80085e4:	f000 faf6 	bl	8008bd4 <_sbrk_r>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d1dd      	bne.n	80085a8 <_malloc_r+0x64>
 80085ec:	e7cf      	b.n	800858e <_malloc_r+0x4a>
 80085ee:	bf00      	nop
 80085f0:	20004084 	.word	0x20004084
 80085f4:	20004088 	.word	0x20004088

080085f8 <__sfputc_r>:
 80085f8:	6893      	ldr	r3, [r2, #8]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	b410      	push	{r4}
 8008600:	6093      	str	r3, [r2, #8]
 8008602:	da08      	bge.n	8008616 <__sfputc_r+0x1e>
 8008604:	6994      	ldr	r4, [r2, #24]
 8008606:	42a3      	cmp	r3, r4
 8008608:	db01      	blt.n	800860e <__sfputc_r+0x16>
 800860a:	290a      	cmp	r1, #10
 800860c:	d103      	bne.n	8008616 <__sfputc_r+0x1e>
 800860e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008612:	f7ff bc69 	b.w	8007ee8 <__swbuf_r>
 8008616:	6813      	ldr	r3, [r2, #0]
 8008618:	1c58      	adds	r0, r3, #1
 800861a:	6010      	str	r0, [r2, #0]
 800861c:	7019      	strb	r1, [r3, #0]
 800861e:	4608      	mov	r0, r1
 8008620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008624:	4770      	bx	lr

08008626 <__sfputs_r>:
 8008626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	4614      	mov	r4, r2
 800862e:	18d5      	adds	r5, r2, r3
 8008630:	42ac      	cmp	r4, r5
 8008632:	d101      	bne.n	8008638 <__sfputs_r+0x12>
 8008634:	2000      	movs	r0, #0
 8008636:	e007      	b.n	8008648 <__sfputs_r+0x22>
 8008638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863c:	463a      	mov	r2, r7
 800863e:	4630      	mov	r0, r6
 8008640:	f7ff ffda 	bl	80085f8 <__sfputc_r>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d1f3      	bne.n	8008630 <__sfputs_r+0xa>
 8008648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800864c <_vfiprintf_r>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	460d      	mov	r5, r1
 8008652:	b09d      	sub	sp, #116	; 0x74
 8008654:	4614      	mov	r4, r2
 8008656:	4698      	mov	r8, r3
 8008658:	4606      	mov	r6, r0
 800865a:	b118      	cbz	r0, 8008664 <_vfiprintf_r+0x18>
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	b90b      	cbnz	r3, 8008664 <_vfiprintf_r+0x18>
 8008660:	f7ff fe1c 	bl	800829c <__sinit>
 8008664:	4b89      	ldr	r3, [pc, #548]	; (800888c <_vfiprintf_r+0x240>)
 8008666:	429d      	cmp	r5, r3
 8008668:	d11b      	bne.n	80086a2 <_vfiprintf_r+0x56>
 800866a:	6875      	ldr	r5, [r6, #4]
 800866c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800866e:	07d9      	lsls	r1, r3, #31
 8008670:	d405      	bmi.n	800867e <_vfiprintf_r+0x32>
 8008672:	89ab      	ldrh	r3, [r5, #12]
 8008674:	059a      	lsls	r2, r3, #22
 8008676:	d402      	bmi.n	800867e <_vfiprintf_r+0x32>
 8008678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800867a:	f7ff fead 	bl	80083d8 <__retarget_lock_acquire_recursive>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	071b      	lsls	r3, r3, #28
 8008682:	d501      	bpl.n	8008688 <_vfiprintf_r+0x3c>
 8008684:	692b      	ldr	r3, [r5, #16]
 8008686:	b9eb      	cbnz	r3, 80086c4 <_vfiprintf_r+0x78>
 8008688:	4629      	mov	r1, r5
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff fc7e 	bl	8007f8c <__swsetup_r>
 8008690:	b1c0      	cbz	r0, 80086c4 <_vfiprintf_r+0x78>
 8008692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008694:	07dc      	lsls	r4, r3, #31
 8008696:	d50e      	bpl.n	80086b6 <_vfiprintf_r+0x6a>
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	b01d      	add	sp, #116	; 0x74
 800869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a2:	4b7b      	ldr	r3, [pc, #492]	; (8008890 <_vfiprintf_r+0x244>)
 80086a4:	429d      	cmp	r5, r3
 80086a6:	d101      	bne.n	80086ac <_vfiprintf_r+0x60>
 80086a8:	68b5      	ldr	r5, [r6, #8]
 80086aa:	e7df      	b.n	800866c <_vfiprintf_r+0x20>
 80086ac:	4b79      	ldr	r3, [pc, #484]	; (8008894 <_vfiprintf_r+0x248>)
 80086ae:	429d      	cmp	r5, r3
 80086b0:	bf08      	it	eq
 80086b2:	68f5      	ldreq	r5, [r6, #12]
 80086b4:	e7da      	b.n	800866c <_vfiprintf_r+0x20>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	0598      	lsls	r0, r3, #22
 80086ba:	d4ed      	bmi.n	8008698 <_vfiprintf_r+0x4c>
 80086bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086be:	f7ff fe8c 	bl	80083da <__retarget_lock_release_recursive>
 80086c2:	e7e9      	b.n	8008698 <_vfiprintf_r+0x4c>
 80086c4:	2300      	movs	r3, #0
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	2320      	movs	r3, #32
 80086ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d2:	2330      	movs	r3, #48	; 0x30
 80086d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008898 <_vfiprintf_r+0x24c>
 80086d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086dc:	f04f 0901 	mov.w	r9, #1
 80086e0:	4623      	mov	r3, r4
 80086e2:	469a      	mov	sl, r3
 80086e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e8:	b10a      	cbz	r2, 80086ee <_vfiprintf_r+0xa2>
 80086ea:	2a25      	cmp	r2, #37	; 0x25
 80086ec:	d1f9      	bne.n	80086e2 <_vfiprintf_r+0x96>
 80086ee:	ebba 0b04 	subs.w	fp, sl, r4
 80086f2:	d00b      	beq.n	800870c <_vfiprintf_r+0xc0>
 80086f4:	465b      	mov	r3, fp
 80086f6:	4622      	mov	r2, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ff93 	bl	8008626 <__sfputs_r>
 8008700:	3001      	adds	r0, #1
 8008702:	f000 80aa 	beq.w	800885a <_vfiprintf_r+0x20e>
 8008706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008708:	445a      	add	r2, fp
 800870a:	9209      	str	r2, [sp, #36]	; 0x24
 800870c:	f89a 3000 	ldrb.w	r3, [sl]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80a2 	beq.w	800885a <_vfiprintf_r+0x20e>
 8008716:	2300      	movs	r3, #0
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008720:	f10a 0a01 	add.w	sl, sl, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	9307      	str	r3, [sp, #28]
 8008728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872c:	931a      	str	r3, [sp, #104]	; 0x68
 800872e:	4654      	mov	r4, sl
 8008730:	2205      	movs	r2, #5
 8008732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008736:	4858      	ldr	r0, [pc, #352]	; (8008898 <_vfiprintf_r+0x24c>)
 8008738:	f7f7 fd6a 	bl	8000210 <memchr>
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	b9d8      	cbnz	r0, 8008778 <_vfiprintf_r+0x12c>
 8008740:	06d1      	lsls	r1, r2, #27
 8008742:	bf44      	itt	mi
 8008744:	2320      	movmi	r3, #32
 8008746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874a:	0713      	lsls	r3, r2, #28
 800874c:	bf44      	itt	mi
 800874e:	232b      	movmi	r3, #43	; 0x2b
 8008750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008754:	f89a 3000 	ldrb.w	r3, [sl]
 8008758:	2b2a      	cmp	r3, #42	; 0x2a
 800875a:	d015      	beq.n	8008788 <_vfiprintf_r+0x13c>
 800875c:	9a07      	ldr	r2, [sp, #28]
 800875e:	4654      	mov	r4, sl
 8008760:	2000      	movs	r0, #0
 8008762:	f04f 0c0a 	mov.w	ip, #10
 8008766:	4621      	mov	r1, r4
 8008768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876c:	3b30      	subs	r3, #48	; 0x30
 800876e:	2b09      	cmp	r3, #9
 8008770:	d94e      	bls.n	8008810 <_vfiprintf_r+0x1c4>
 8008772:	b1b0      	cbz	r0, 80087a2 <_vfiprintf_r+0x156>
 8008774:	9207      	str	r2, [sp, #28]
 8008776:	e014      	b.n	80087a2 <_vfiprintf_r+0x156>
 8008778:	eba0 0308 	sub.w	r3, r0, r8
 800877c:	fa09 f303 	lsl.w	r3, r9, r3
 8008780:	4313      	orrs	r3, r2
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	46a2      	mov	sl, r4
 8008786:	e7d2      	b.n	800872e <_vfiprintf_r+0xe2>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	1d19      	adds	r1, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	9103      	str	r1, [sp, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfbb      	ittet	lt
 8008794:	425b      	neglt	r3, r3
 8008796:	f042 0202 	orrlt.w	r2, r2, #2
 800879a:	9307      	strge	r3, [sp, #28]
 800879c:	9307      	strlt	r3, [sp, #28]
 800879e:	bfb8      	it	lt
 80087a0:	9204      	strlt	r2, [sp, #16]
 80087a2:	7823      	ldrb	r3, [r4, #0]
 80087a4:	2b2e      	cmp	r3, #46	; 0x2e
 80087a6:	d10c      	bne.n	80087c2 <_vfiprintf_r+0x176>
 80087a8:	7863      	ldrb	r3, [r4, #1]
 80087aa:	2b2a      	cmp	r3, #42	; 0x2a
 80087ac:	d135      	bne.n	800881a <_vfiprintf_r+0x1ce>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	9203      	str	r2, [sp, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80087be:	3402      	adds	r4, #2
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088a8 <_vfiprintf_r+0x25c>
 80087c6:	7821      	ldrb	r1, [r4, #0]
 80087c8:	2203      	movs	r2, #3
 80087ca:	4650      	mov	r0, sl
 80087cc:	f7f7 fd20 	bl	8000210 <memchr>
 80087d0:	b140      	cbz	r0, 80087e4 <_vfiprintf_r+0x198>
 80087d2:	2340      	movs	r3, #64	; 0x40
 80087d4:	eba0 000a 	sub.w	r0, r0, sl
 80087d8:	fa03 f000 	lsl.w	r0, r3, r0
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	4303      	orrs	r3, r0
 80087e0:	3401      	adds	r4, #1
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	482c      	ldr	r0, [pc, #176]	; (800889c <_vfiprintf_r+0x250>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ee:	2206      	movs	r2, #6
 80087f0:	f7f7 fd0e 	bl	8000210 <memchr>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d03f      	beq.n	8008878 <_vfiprintf_r+0x22c>
 80087f8:	4b29      	ldr	r3, [pc, #164]	; (80088a0 <_vfiprintf_r+0x254>)
 80087fa:	bb1b      	cbnz	r3, 8008844 <_vfiprintf_r+0x1f8>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	3307      	adds	r3, #7
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	443b      	add	r3, r7
 800880c:	9309      	str	r3, [sp, #36]	; 0x24
 800880e:	e767      	b.n	80086e0 <_vfiprintf_r+0x94>
 8008810:	fb0c 3202 	mla	r2, ip, r2, r3
 8008814:	460c      	mov	r4, r1
 8008816:	2001      	movs	r0, #1
 8008818:	e7a5      	b.n	8008766 <_vfiprintf_r+0x11a>
 800881a:	2300      	movs	r3, #0
 800881c:	3401      	adds	r4, #1
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	4619      	mov	r1, r3
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4620      	mov	r0, r4
 8008828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882c:	3a30      	subs	r2, #48	; 0x30
 800882e:	2a09      	cmp	r2, #9
 8008830:	d903      	bls.n	800883a <_vfiprintf_r+0x1ee>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c5      	beq.n	80087c2 <_vfiprintf_r+0x176>
 8008836:	9105      	str	r1, [sp, #20]
 8008838:	e7c3      	b.n	80087c2 <_vfiprintf_r+0x176>
 800883a:	fb0c 2101 	mla	r1, ip, r1, r2
 800883e:	4604      	mov	r4, r0
 8008840:	2301      	movs	r3, #1
 8008842:	e7f0      	b.n	8008826 <_vfiprintf_r+0x1da>
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	462a      	mov	r2, r5
 800884a:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <_vfiprintf_r+0x258>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4630      	mov	r0, r6
 8008850:	f3af 8000 	nop.w
 8008854:	4607      	mov	r7, r0
 8008856:	1c78      	adds	r0, r7, #1
 8008858:	d1d6      	bne.n	8008808 <_vfiprintf_r+0x1bc>
 800885a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800885c:	07d9      	lsls	r1, r3, #31
 800885e:	d405      	bmi.n	800886c <_vfiprintf_r+0x220>
 8008860:	89ab      	ldrh	r3, [r5, #12]
 8008862:	059a      	lsls	r2, r3, #22
 8008864:	d402      	bmi.n	800886c <_vfiprintf_r+0x220>
 8008866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008868:	f7ff fdb7 	bl	80083da <__retarget_lock_release_recursive>
 800886c:	89ab      	ldrh	r3, [r5, #12]
 800886e:	065b      	lsls	r3, r3, #25
 8008870:	f53f af12 	bmi.w	8008698 <_vfiprintf_r+0x4c>
 8008874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008876:	e711      	b.n	800869c <_vfiprintf_r+0x50>
 8008878:	ab03      	add	r3, sp, #12
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	462a      	mov	r2, r5
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <_vfiprintf_r+0x258>)
 8008880:	a904      	add	r1, sp, #16
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f880 	bl	8008988 <_printf_i>
 8008888:	e7e4      	b.n	8008854 <_vfiprintf_r+0x208>
 800888a:	bf00      	nop
 800888c:	0800a2e4 	.word	0x0800a2e4
 8008890:	0800a304 	.word	0x0800a304
 8008894:	0800a2c4 	.word	0x0800a2c4
 8008898:	0800a324 	.word	0x0800a324
 800889c:	0800a32e 	.word	0x0800a32e
 80088a0:	00000000 	.word	0x00000000
 80088a4:	08008627 	.word	0x08008627
 80088a8:	0800a32a 	.word	0x0800a32a

080088ac <_printf_common>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	4616      	mov	r6, r2
 80088b2:	4699      	mov	r9, r3
 80088b4:	688a      	ldr	r2, [r1, #8]
 80088b6:	690b      	ldr	r3, [r1, #16]
 80088b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bfb8      	it	lt
 80088c0:	4613      	movlt	r3, r2
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c8:	4607      	mov	r7, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b10a      	cbz	r2, 80088d2 <_printf_common+0x26>
 80088ce:	3301      	adds	r3, #1
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	0699      	lsls	r1, r3, #26
 80088d6:	bf42      	ittt	mi
 80088d8:	6833      	ldrmi	r3, [r6, #0]
 80088da:	3302      	addmi	r3, #2
 80088dc:	6033      	strmi	r3, [r6, #0]
 80088de:	6825      	ldr	r5, [r4, #0]
 80088e0:	f015 0506 	ands.w	r5, r5, #6
 80088e4:	d106      	bne.n	80088f4 <_printf_common+0x48>
 80088e6:	f104 0a19 	add.w	sl, r4, #25
 80088ea:	68e3      	ldr	r3, [r4, #12]
 80088ec:	6832      	ldr	r2, [r6, #0]
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc26      	bgt.n	8008942 <_printf_common+0x96>
 80088f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f8:	1e13      	subs	r3, r2, #0
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	bf18      	it	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	0692      	lsls	r2, r2, #26
 8008902:	d42b      	bmi.n	800895c <_printf_common+0xb0>
 8008904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008908:	4649      	mov	r1, r9
 800890a:	4638      	mov	r0, r7
 800890c:	47c0      	blx	r8
 800890e:	3001      	adds	r0, #1
 8008910:	d01e      	beq.n	8008950 <_printf_common+0xa4>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	68e5      	ldr	r5, [r4, #12]
 8008916:	6832      	ldr	r2, [r6, #0]
 8008918:	f003 0306 	and.w	r3, r3, #6
 800891c:	2b04      	cmp	r3, #4
 800891e:	bf08      	it	eq
 8008920:	1aad      	subeq	r5, r5, r2
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	6922      	ldr	r2, [r4, #16]
 8008926:	bf0c      	ite	eq
 8008928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800892c:	2500      	movne	r5, #0
 800892e:	4293      	cmp	r3, r2
 8008930:	bfc4      	itt	gt
 8008932:	1a9b      	subgt	r3, r3, r2
 8008934:	18ed      	addgt	r5, r5, r3
 8008936:	2600      	movs	r6, #0
 8008938:	341a      	adds	r4, #26
 800893a:	42b5      	cmp	r5, r6
 800893c:	d11a      	bne.n	8008974 <_printf_common+0xc8>
 800893e:	2000      	movs	r0, #0
 8008940:	e008      	b.n	8008954 <_printf_common+0xa8>
 8008942:	2301      	movs	r3, #1
 8008944:	4652      	mov	r2, sl
 8008946:	4649      	mov	r1, r9
 8008948:	4638      	mov	r0, r7
 800894a:	47c0      	blx	r8
 800894c:	3001      	adds	r0, #1
 800894e:	d103      	bne.n	8008958 <_printf_common+0xac>
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008958:	3501      	adds	r5, #1
 800895a:	e7c6      	b.n	80088ea <_printf_common+0x3e>
 800895c:	18e1      	adds	r1, r4, r3
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	2030      	movs	r0, #48	; 0x30
 8008962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008966:	4422      	add	r2, r4
 8008968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800896c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008970:	3302      	adds	r3, #2
 8008972:	e7c7      	b.n	8008904 <_printf_common+0x58>
 8008974:	2301      	movs	r3, #1
 8008976:	4622      	mov	r2, r4
 8008978:	4649      	mov	r1, r9
 800897a:	4638      	mov	r0, r7
 800897c:	47c0      	blx	r8
 800897e:	3001      	adds	r0, #1
 8008980:	d0e6      	beq.n	8008950 <_printf_common+0xa4>
 8008982:	3601      	adds	r6, #1
 8008984:	e7d9      	b.n	800893a <_printf_common+0x8e>
	...

08008988 <_printf_i>:
 8008988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	460c      	mov	r4, r1
 800898e:	4691      	mov	r9, r2
 8008990:	7e27      	ldrb	r7, [r4, #24]
 8008992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008994:	2f78      	cmp	r7, #120	; 0x78
 8008996:	4680      	mov	r8, r0
 8008998:	469a      	mov	sl, r3
 800899a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800899e:	d807      	bhi.n	80089b0 <_printf_i+0x28>
 80089a0:	2f62      	cmp	r7, #98	; 0x62
 80089a2:	d80a      	bhi.n	80089ba <_printf_i+0x32>
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	f000 80d8 	beq.w	8008b5a <_printf_i+0x1d2>
 80089aa:	2f58      	cmp	r7, #88	; 0x58
 80089ac:	f000 80a3 	beq.w	8008af6 <_printf_i+0x16e>
 80089b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b8:	e03a      	b.n	8008a30 <_printf_i+0xa8>
 80089ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089be:	2b15      	cmp	r3, #21
 80089c0:	d8f6      	bhi.n	80089b0 <_printf_i+0x28>
 80089c2:	a001      	add	r0, pc, #4	; (adr r0, 80089c8 <_printf_i+0x40>)
 80089c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089c8:	08008a21 	.word	0x08008a21
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	080089b1 	.word	0x080089b1
 80089d4:	080089b1 	.word	0x080089b1
 80089d8:	080089b1 	.word	0x080089b1
 80089dc:	080089b1 	.word	0x080089b1
 80089e0:	08008a35 	.word	0x08008a35
 80089e4:	080089b1 	.word	0x080089b1
 80089e8:	080089b1 	.word	0x080089b1
 80089ec:	080089b1 	.word	0x080089b1
 80089f0:	080089b1 	.word	0x080089b1
 80089f4:	08008b41 	.word	0x08008b41
 80089f8:	08008a65 	.word	0x08008a65
 80089fc:	08008b23 	.word	0x08008b23
 8008a00:	080089b1 	.word	0x080089b1
 8008a04:	080089b1 	.word	0x080089b1
 8008a08:	08008b63 	.word	0x08008b63
 8008a0c:	080089b1 	.word	0x080089b1
 8008a10:	08008a65 	.word	0x08008a65
 8008a14:	080089b1 	.word	0x080089b1
 8008a18:	080089b1 	.word	0x080089b1
 8008a1c:	08008b2b 	.word	0x08008b2b
 8008a20:	680b      	ldr	r3, [r1, #0]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	600a      	str	r2, [r1, #0]
 8008a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0a3      	b.n	8008b7c <_printf_i+0x1f4>
 8008a34:	6825      	ldr	r5, [r4, #0]
 8008a36:	6808      	ldr	r0, [r1, #0]
 8008a38:	062e      	lsls	r6, r5, #24
 8008a3a:	f100 0304 	add.w	r3, r0, #4
 8008a3e:	d50a      	bpl.n	8008a56 <_printf_i+0xce>
 8008a40:	6805      	ldr	r5, [r0, #0]
 8008a42:	600b      	str	r3, [r1, #0]
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	da03      	bge.n	8008a50 <_printf_i+0xc8>
 8008a48:	232d      	movs	r3, #45	; 0x2d
 8008a4a:	426d      	negs	r5, r5
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a50:	485e      	ldr	r0, [pc, #376]	; (8008bcc <_printf_i+0x244>)
 8008a52:	230a      	movs	r3, #10
 8008a54:	e019      	b.n	8008a8a <_printf_i+0x102>
 8008a56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a5a:	6805      	ldr	r5, [r0, #0]
 8008a5c:	600b      	str	r3, [r1, #0]
 8008a5e:	bf18      	it	ne
 8008a60:	b22d      	sxthne	r5, r5
 8008a62:	e7ef      	b.n	8008a44 <_printf_i+0xbc>
 8008a64:	680b      	ldr	r3, [r1, #0]
 8008a66:	6825      	ldr	r5, [r4, #0]
 8008a68:	1d18      	adds	r0, r3, #4
 8008a6a:	6008      	str	r0, [r1, #0]
 8008a6c:	0628      	lsls	r0, r5, #24
 8008a6e:	d501      	bpl.n	8008a74 <_printf_i+0xec>
 8008a70:	681d      	ldr	r5, [r3, #0]
 8008a72:	e002      	b.n	8008a7a <_printf_i+0xf2>
 8008a74:	0669      	lsls	r1, r5, #25
 8008a76:	d5fb      	bpl.n	8008a70 <_printf_i+0xe8>
 8008a78:	881d      	ldrh	r5, [r3, #0]
 8008a7a:	4854      	ldr	r0, [pc, #336]	; (8008bcc <_printf_i+0x244>)
 8008a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008a7e:	bf0c      	ite	eq
 8008a80:	2308      	moveq	r3, #8
 8008a82:	230a      	movne	r3, #10
 8008a84:	2100      	movs	r1, #0
 8008a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a8a:	6866      	ldr	r6, [r4, #4]
 8008a8c:	60a6      	str	r6, [r4, #8]
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	bfa2      	ittt	ge
 8008a92:	6821      	ldrge	r1, [r4, #0]
 8008a94:	f021 0104 	bicge.w	r1, r1, #4
 8008a98:	6021      	strge	r1, [r4, #0]
 8008a9a:	b90d      	cbnz	r5, 8008aa0 <_printf_i+0x118>
 8008a9c:	2e00      	cmp	r6, #0
 8008a9e:	d04d      	beq.n	8008b3c <_printf_i+0x1b4>
 8008aa0:	4616      	mov	r6, r2
 8008aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8008aaa:	5dc7      	ldrb	r7, [r0, r7]
 8008aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ab0:	462f      	mov	r7, r5
 8008ab2:	42bb      	cmp	r3, r7
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	d9f4      	bls.n	8008aa2 <_printf_i+0x11a>
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d10b      	bne.n	8008ad4 <_printf_i+0x14c>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	07df      	lsls	r7, r3, #31
 8008ac0:	d508      	bpl.n	8008ad4 <_printf_i+0x14c>
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	6861      	ldr	r1, [r4, #4]
 8008ac6:	4299      	cmp	r1, r3
 8008ac8:	bfde      	ittt	le
 8008aca:	2330      	movle	r3, #48	; 0x30
 8008acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ad0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ad4:	1b92      	subs	r2, r2, r6
 8008ad6:	6122      	str	r2, [r4, #16]
 8008ad8:	f8cd a000 	str.w	sl, [sp]
 8008adc:	464b      	mov	r3, r9
 8008ade:	aa03      	add	r2, sp, #12
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f7ff fee2 	bl	80088ac <_printf_common>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d14c      	bne.n	8008b86 <_printf_i+0x1fe>
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	b004      	add	sp, #16
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	4835      	ldr	r0, [pc, #212]	; (8008bcc <_printf_i+0x244>)
 8008af8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	680e      	ldr	r6, [r1, #0]
 8008b00:	061f      	lsls	r7, r3, #24
 8008b02:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b06:	600e      	str	r6, [r1, #0]
 8008b08:	d514      	bpl.n	8008b34 <_printf_i+0x1ac>
 8008b0a:	07d9      	lsls	r1, r3, #31
 8008b0c:	bf44      	itt	mi
 8008b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b12:	6023      	strmi	r3, [r4, #0]
 8008b14:	b91d      	cbnz	r5, 8008b1e <_printf_i+0x196>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	f023 0320 	bic.w	r3, r3, #32
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	2310      	movs	r3, #16
 8008b20:	e7b0      	b.n	8008a84 <_printf_i+0xfc>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	f043 0320 	orr.w	r3, r3, #32
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	2378      	movs	r3, #120	; 0x78
 8008b2c:	4828      	ldr	r0, [pc, #160]	; (8008bd0 <_printf_i+0x248>)
 8008b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b32:	e7e3      	b.n	8008afc <_printf_i+0x174>
 8008b34:	065e      	lsls	r6, r3, #25
 8008b36:	bf48      	it	mi
 8008b38:	b2ad      	uxthmi	r5, r5
 8008b3a:	e7e6      	b.n	8008b0a <_printf_i+0x182>
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	e7bb      	b.n	8008ab8 <_printf_i+0x130>
 8008b40:	680b      	ldr	r3, [r1, #0]
 8008b42:	6826      	ldr	r6, [r4, #0]
 8008b44:	6960      	ldr	r0, [r4, #20]
 8008b46:	1d1d      	adds	r5, r3, #4
 8008b48:	600d      	str	r5, [r1, #0]
 8008b4a:	0635      	lsls	r5, r6, #24
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	d501      	bpl.n	8008b54 <_printf_i+0x1cc>
 8008b50:	6018      	str	r0, [r3, #0]
 8008b52:	e002      	b.n	8008b5a <_printf_i+0x1d2>
 8008b54:	0671      	lsls	r1, r6, #25
 8008b56:	d5fb      	bpl.n	8008b50 <_printf_i+0x1c8>
 8008b58:	8018      	strh	r0, [r3, #0]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	4616      	mov	r6, r2
 8008b60:	e7ba      	b.n	8008ad8 <_printf_i+0x150>
 8008b62:	680b      	ldr	r3, [r1, #0]
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	600a      	str	r2, [r1, #0]
 8008b68:	681e      	ldr	r6, [r3, #0]
 8008b6a:	6862      	ldr	r2, [r4, #4]
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7f7 fb4e 	bl	8000210 <memchr>
 8008b74:	b108      	cbz	r0, 8008b7a <_printf_i+0x1f2>
 8008b76:	1b80      	subs	r0, r0, r6
 8008b78:	6060      	str	r0, [r4, #4]
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b84:	e7a8      	b.n	8008ad8 <_printf_i+0x150>
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	4632      	mov	r2, r6
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	47d0      	blx	sl
 8008b90:	3001      	adds	r0, #1
 8008b92:	d0ab      	beq.n	8008aec <_printf_i+0x164>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	079b      	lsls	r3, r3, #30
 8008b98:	d413      	bmi.n	8008bc2 <_printf_i+0x23a>
 8008b9a:	68e0      	ldr	r0, [r4, #12]
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	4298      	cmp	r0, r3
 8008ba0:	bfb8      	it	lt
 8008ba2:	4618      	movlt	r0, r3
 8008ba4:	e7a4      	b.n	8008af0 <_printf_i+0x168>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4649      	mov	r1, r9
 8008bac:	4640      	mov	r0, r8
 8008bae:	47d0      	blx	sl
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d09b      	beq.n	8008aec <_printf_i+0x164>
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	9903      	ldr	r1, [sp, #12]
 8008bba:	1a5b      	subs	r3, r3, r1
 8008bbc:	42ab      	cmp	r3, r5
 8008bbe:	dcf2      	bgt.n	8008ba6 <_printf_i+0x21e>
 8008bc0:	e7eb      	b.n	8008b9a <_printf_i+0x212>
 8008bc2:	2500      	movs	r5, #0
 8008bc4:	f104 0619 	add.w	r6, r4, #25
 8008bc8:	e7f5      	b.n	8008bb6 <_printf_i+0x22e>
 8008bca:	bf00      	nop
 8008bcc:	0800a335 	.word	0x0800a335
 8008bd0:	0800a346 	.word	0x0800a346

08008bd4 <_sbrk_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d06      	ldr	r5, [pc, #24]	; (8008bf0 <_sbrk_r+0x1c>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f7f8 f85e 	bl	8000ca0 <_sbrk>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_sbrk_r+0x1a>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_sbrk_r+0x1a>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200067e4 	.word	0x200067e4

08008bf4 <__sread>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfc:	f000 f8a0 	bl	8008d40 <_read_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	bfab      	itete	ge
 8008c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c06:	89a3      	ldrhlt	r3, [r4, #12]
 8008c08:	181b      	addge	r3, r3, r0
 8008c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c0e:	bfac      	ite	ge
 8008c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c12:	81a3      	strhlt	r3, [r4, #12]
 8008c14:	bd10      	pop	{r4, pc}

08008c16 <__swrite>:
 8008c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	898b      	ldrh	r3, [r1, #12]
 8008c1e:	05db      	lsls	r3, r3, #23
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4616      	mov	r6, r2
 8008c26:	d505      	bpl.n	8008c34 <__swrite+0x1e>
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f000 f868 	bl	8008d04 <_lseek_r>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	4628      	mov	r0, r5
 8008c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4a:	f000 b817 	b.w	8008c7c <_write_r>

08008c4e <__sseek>:
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c56:	f000 f855 	bl	8008d04 <_lseek_r>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	bf15      	itete	ne
 8008c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c6a:	81a3      	strheq	r3, [r4, #12]
 8008c6c:	bf18      	it	ne
 8008c6e:	81a3      	strhne	r3, [r4, #12]
 8008c70:	bd10      	pop	{r4, pc}

08008c72 <__sclose>:
 8008c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c76:	f000 b813 	b.w	8008ca0 <_close_r>
	...

08008c7c <_write_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d07      	ldr	r5, [pc, #28]	; (8008c9c <_write_r+0x20>)
 8008c80:	4604      	mov	r4, r0
 8008c82:	4608      	mov	r0, r1
 8008c84:	4611      	mov	r1, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	602a      	str	r2, [r5, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f7f7 ffb7 	bl	8000bfe <_write>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_write_r+0x1e>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_write_r+0x1e>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	200067e4 	.word	0x200067e4

08008ca0 <_close_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4d06      	ldr	r5, [pc, #24]	; (8008cbc <_close_r+0x1c>)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	4608      	mov	r0, r1
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	f7f7 ffc3 	bl	8000c36 <_close>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_close_r+0x1a>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_close_r+0x1a>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	200067e4 	.word	0x200067e4

08008cc0 <_fstat_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d07      	ldr	r5, [pc, #28]	; (8008ce0 <_fstat_r+0x20>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	4611      	mov	r1, r2
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	f7f7 ffbe 	bl	8000c4e <_fstat>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d102      	bne.n	8008cdc <_fstat_r+0x1c>
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	b103      	cbz	r3, 8008cdc <_fstat_r+0x1c>
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	bd38      	pop	{r3, r4, r5, pc}
 8008cde:	bf00      	nop
 8008ce0:	200067e4 	.word	0x200067e4

08008ce4 <_isatty_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4d06      	ldr	r5, [pc, #24]	; (8008d00 <_isatty_r+0x1c>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	f7f7 ffbd 	bl	8000c6e <_isatty>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_isatty_r+0x1a>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_isatty_r+0x1a>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	200067e4 	.word	0x200067e4

08008d04 <_lseek_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d07      	ldr	r5, [pc, #28]	; (8008d24 <_lseek_r+0x20>)
 8008d08:	4604      	mov	r4, r0
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	602a      	str	r2, [r5, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f7f7 ffb6 	bl	8000c84 <_lseek>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_lseek_r+0x1e>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_lseek_r+0x1e>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	200067e4 	.word	0x200067e4

08008d28 <__malloc_lock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_lock+0x8>)
 8008d2a:	f7ff bb55 	b.w	80083d8 <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	200067de 	.word	0x200067de

08008d34 <__malloc_unlock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__malloc_unlock+0x8>)
 8008d36:	f7ff bb50 	b.w	80083da <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	200067de 	.word	0x200067de

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_read_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7f7 ff38 	bl	8000bc4 <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200067e4 	.word	0x200067e4

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
